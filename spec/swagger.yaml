swagger: '2.0'
host: example.com
info:
  title: DataHub API documentation
  version: 1.0.0
  contact:
    email: info@accedian.net 
  description: |
    Here is Datahub's API documentation.
    # Introduction
    This API is documented in **Open API format v2**. You can download the full API spec above, and use it with
    compatible code generators to generate the client stubs.
    # Quick setup
    (Almost) every endpoint require a [valid user authentication](/#tag/AuthService), so this is probably where you should start.
    Depending on the access rights associated with your account, some endpoints may not be authorized. When such restriction exists,
    the API documentation will outline which acess rights are required to access or modify a given resource.

    ## Authenticate to obtain an Authorized Token
    You must optain an `Authorization Bearer` (for subsequent API calls) or a set-cookie, for browser related calls. Both 
    of these can be obtained by the [auth/login](/#tag/AuthService) endpoint.

    ```bash
    curl -X POST \
       https://tenant-url.npav.accedian.net/api/v1/auth/login \
       -H 'Cache-Control: no-cache' \
       -H 'Content-Type: application/x-www-form-urlencoded' \
       -d 'username=tenantUsername&password=tenantUserPassword'
    ```
    > Pro-tip: Replace "tenant-url" by your tenant name

    The response will contained an authorized header and a set-cookie header

    ```bash
    HTTP/2 200
    content-type: application/vnd.api+json
    content-length: 208
    authorization: Bearer MTUzNTAyNDg[...]
    set-cookie: skylight-aaa=MTUzNTAyNDg[...]
    {
      "data": {
        "attributes":{
          "emailAddress":"tenantUsername",
          "isPasswordSet":true,
          "isRegisteredForEmail":false,
          "name":"tenantName",
          "roles":["tenant-role"],
          "tenants":["tenantName"]},
          "id":"1",
          "type":"users"
          }
    }
    ```

    ## Making an authorized API request - (RAW metrics API query)

    Once you have optained an `Authorization bearer` token, you can make a query to retrieve [RAW metrics](/#operation/GetRawMetrics). 

    ```bash
    curl -X POST https://accedian-dh2.npav.accedian.net/api/v2/raw-metrics \
      -d "\
        {'tenantId':'tenant12345',\
         'interval':'2018-08-08T11%3A12%3A53-04%3A00%2F2018-08-09T11%3A12%3A53-04%3A00',\
         'granularity':'PT78.545S',\
         'meta':{'colors':['orange']},\
         'timeout':30000,\
         'metrics':['jitterP95'],\
         'directions':['0','1','2'],\
         'objectType':'twamp-sf'\
        }" -H 'Cache-Control: no-cache' -H 'Authorization:  MTUzNTAyNDg[...]'

    ``` 

    

basePath: /api

schemes:
  - https
consumes:
  - application/json
  - application/vnd.api+json
produces:
  - application/json
  - application/vnd.api+json
paths:
  /v1/tenants:
    post:
      summary: Create a Tenant.
      operationId: CreateTenant
      consumes:
        - application/vnd.api+json
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/JsonApiTenant'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '409':
          description: "The Tenant being provisioned already exists"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/JsonApiTenant'
      tags:
        - AdminProvisioningService
    put:
      summary: Update a Tenant.
      operationId: UpdateTenant
      consumes:
        - application/vnd.api+json
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/JsonApiTenant'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/JsonApiTenant'
      tags:
        - AdminProvisioningService
  /v1/tenant-list:
    get:
      summary: Retrieve all Tenants.
      operationId: GetAllTenants
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/JsonApiTenantList'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      tags:
        - AdminProvisioningService
  '/v1/tenants/{tenantId}':
    get:
      summary: Retrieve a Tenant by id.
      operationId: GetTenant
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/JsonApiTenant'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: tenantId
          in: path
          required: true
          type: string
      tags:
        - AdminProvisioningService
    delete:
      summary: Delete a Tenant
      operationId: DeleteTenant
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/JsonApiTenant'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: tenantId
          in: path
          required: true
          type: string
      tags:
        - AdminProvisioningService
    patch:
      summary: Patch a Tenant
      operationId: PatchTenant
      consumes:
        - application/vnd.api+json
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/JsonApiTenant'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: tenantId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/JsonApiTenant'
      tags:
        - AdminProvisioningService
  '/v1/tenant-by-alias/{value}':
    get:
      summary: Returns the Id of a Tenant that matches the provided alias.
      operationId: GetTenantIdByAlias
      produces:
        - text/plain
      responses:
        '200':
          description: ''
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: value
          in: path
          required: true
          type: string
      tags:
        - AdminProvisioningService
  '/v1/tenant-summary-by-alias/{value}':
    get:
      summary: Returns a summary of the Tenant that matches the provided alias.
      operationId: GetTenantSummaryByAlias
      produces:
        - application/json
      responses:
        '200':
          description: ''
          schema:
            $ref: "#/definitions/TenantSummary"
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: value
          in: path
          required: true
          type: string
      tags:
        - AdminProvisioningService
  /v1/ingestion-dictionaries:
    get:
      summary: Retrieve an Ingestion Dictionary.
      operationId: GetIngestionDictionary
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/JsonApiIngestionDictionary'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      tags:
        - AdminProvisioningService
  /v1/valid-types:
    get:
      summary: Retrieve a Valid Types object.
      operationId: GetValidTypes
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/JsonApiValidTypes'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      tags:
        - AdminProvisioningService
  /v1/histogram:
    post:
      summary: Retrieve a histogram of measurements for given time range and metric/v1/histogramcustom
      operationId: GetHistogram
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/gathergrpcJSONAPIObject'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/HistogramRequestObject'
      tags:
        - MetricsService
  /v1/raw-metrics:
    get:
      summary: Returns raw metrics from druid
      operationId: GetRawMetrics
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/gathergrpcJSONAPIObject'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: interval
          description: ISO-8601 Intervals.
          in: query
          required: false
          type: string
        - name: tenant
          in: query
          required: false
          type: string
        - name: direction
          in: query
          required: false
          type: string
        - name: metric
          in: query
          required: false
          type: array
          items:
            type: string
        - name: objectType
          in: query
          required: false
          type: string
        - name: monitoredObjectId
          in: query
          required: false
          type: array
          items:
            type: string
        - name: timeout
          in: query
          required: false
          type: integer
          format: int32
        - name: granularity
          in: query
          required: false
          type: string
      tags:
        - MetricsService
  /v2/raw-metrics:
    post:
      summary: Returns raw metrics from druid
      operationId: GetFilteredRawMetrics
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/gathergrpcJSONAPIObject'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/FilteredRawMetricsRequestObject'
      tags:
        - MetricsService
  /v1/threshold-crossing:
    post:
      summary: Retrieve threshold crossings
      operationId: QueryThresholdCrossing
      consumes:
        - application/vnd.api+json
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/MetricResultsResponseObject'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "Threshold profile not found"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ThresholdCrossingAPIRequestObject'
      tags:
        - MetricsService
  /v1/threshold-crossing-by-monitored-object-top-n:
    post:
      operationId: GetThresholdCrossingByMonitoredObjectTopN
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/gathergrpcJSONAPIObject'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "Threshold profile not found"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ThresholdCrossingByMOTopNAPIRequestObject'
      tags:
        - MetricsService
  /v1/aggregated-metrics:
    post:
      summary: Query metrics and perform aggregations
      operationId: QueryAggregatedMetrics
      consumes:
        - application/vnd.api+json
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/MetricResultsResponseObject'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "Missing provisioned data from request parameters"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/AggregateMetricsAPIRequestObject'
      tags:
        - MetricsService
  /v1/topn-metrics:
    post:
      summary: Retrieve a Top-N for a given sets of metrics
      operationId: GetTopNForMetric
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/gathergrpcJSONAPIObject'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "Missing proviosned data"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/TopNMetricsAPIRequestObject'
      tags:
        - MetricsService
  /v1/generate-sla-report:
    post:
      summary: Generate an SLA Report.
      operationId: GenSLAReport
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/gathergrpcJSONAPIObject'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "Components of the request parameters were not in the provisioning database"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/SLAReportRequestObject'

      tags:
        - MetricsService
  /v1/tenants/{tenantId}/connector-configs:
    post:
      summary: Create a ConnectorConfig for a Tenant.
      operationId: CreateTenantConnectorConfig
      consumes:
        - application/vnd.api+json
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/JsonApiTenantConnectorConfig'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '409':
          description: "The Tenant being provisioned already exists"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: tenantId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/JsonApiTenantConnectorConfig'
      tags:
        - TenantProvisioningService
    put:
      summary: Update a Tenant ConnectorConfig
      operationId: UpdateTenantConnectorConfig
      consumes:
        - application/vnd.api+json
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/JsonApiTenantConnectorConfig'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: tenantId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/JsonApiTenantConnectorConfig'
      tags:
        - TenantProvisioningService
  '/v1/tenants/{tenantId}/connector-configs/{connectorId}':
    get:
      summary: Retrieve a Tenant ConnectorConfig by Id.
      operationId: GetTenantConnectorConfig
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/JsonApiTenantConnectorConfig'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: connectorId
          in: path
          required: true
          type: string
        - name: tenantId
          in: path
          required: true
          type: string
      tags:
        - TenantProvisioningService
    delete:
      summary: Delete a Tenant ConnectorConfig specified by the provided Connector Id.
      operationId: DeleteTenantConnectorConfig
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/JsonApiTenantConnectorConfig'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: connectorId
          in: path
          required: true
          type: string
        - name: tenantId
          in: path
          required: true
          type: string
      tags:
        - TenantProvisioningService
  /v1/tenants/{tenantId}/connector-config-list:
    get:
      summary: Retrieve all ConnectorConfigs for the specified Tenant.
      operationId: GetAllTenantConnectorConfigs
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/JsonApiTenantConnectorConfigList'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: tenantId
          in: path
          required: true
          type: string
        - name: zone
          in: query
          required: false
          type: string
      tags:
        - TenantProvisioningService
  /v1/tenants/{tenantId}/connector-instances:
    post:
      summary: Create a ConnectorInstance for a Tenant.
      operationId: CreateTenantConnectorInstance
      consumes:
        - application/vnd.api+json
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/JsonApiTenantConnectorInstance'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: tenantId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/JsonApiTenantConnectorInstance'
      tags:
        - TenantProvisioningService
    put:
      summary: Update a Tenant ConnectorInstance
      operationId: UpdateTenantConnectorInstance
      consumes:
        - application/vnd.api+json
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/JsonApiTenantConnectorInstance'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: tenantId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/JsonApiTenantConnectorInstance'
      tags:
        - TenantProvisioningService
  '/v1/tenants/{tenantId}/connector-instances/{connectorInstanceId}':
    get:
      summary: Retrieve a Tenant ConnectorInstance by Id.
      operationId: GetTenantConnectorInstance
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/JsonApiTenantConnectorInstance'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: connectorInstanceId
          in: path
          required: true
          type: string
        - name: tenantId
          in: path
          required: true
          type: string
      tags:
        - TenantProvisioningService
    delete:
      summary: Delete a Tenant ConnectorInstance specified by the provided Connector Instance Id.
      operationId: DeleteTenantConnectorInstance
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/JsonApiTenantConnectorInstance'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: connectorInstanceId
          in: path
          required: true
          type: string
        - name: tenantId
          in: path
          required: true
          type: string
      tags:
        - TenantProvisioningService
  /v1/tenants/{tenantId}/connector-instance-list:
    get:
      summary: Retrieve all ConnectorInstances for the specified Tenant.
      operationId: GetAllTenantConnectorInstances
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/JsonApiTenantConnectorInstanceList'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: tenantId
          in: path
          required: true
          type: string
      tags:
        - TenantProvisioningService
  /v1/tenants/{tenantId}/domains:
    post:
      summary: Create a Domain for a Tenant.
      operationId: CreateTenantDomain
      consumes:
        - application/vnd.api+json
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/JsonApiTenantDomain'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: tenantId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/JsonApiTenantDomain'
      tags:
        - TenantProvisioningService
  /v1/tenants/{tenantId}/report-schedule-configs:
    post:
      summary: Create a report schedule configuration for a Tenant.
      operationId: CreateReportScheduleConfig
      consumes:
        - application/vnd.api+json
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/JsonApiTenantReportScheduleConfig'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: tenantId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/JsonApiTenantReportScheduleConfig'
      tags:
        - TenantProvisioningService
    put:
      summary: Update a report schedule configuration for a Tenant.
      operationId: UpdateReportScheduleConfig
      consumes:
        - application/vnd.api+json
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/JsonApiTenantReportScheduleConfig'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: tenantId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/JsonApiTenantReportScheduleConfig'
      tags:
        - TenantProvisioningService
  '/v1/tenants/{tenantId}/report-schedule-configs/{configId}':
    get:
      summary: Retrieve a report schedule configuration for a Tenant by configuration Id.
      operationId: GetReportScheduleConfig
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/JsonApiTenantReportScheduleConfig'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: configId
          in: path
          required: true
          type: string
        - name: tenantId
          in: path
          required: true
          type: string
      tags:
        - TenantProvisioningService
    delete:
      summary: Delete a report schedule configuration for a Tenant by configuration Id.
      operationId: DeleteReportScheduleConfig
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/JsonApiTenantReportScheduleConfig'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: configId
          in: path
          required: true
          type: string
        - name: tenantId
          in: path
          required: true
          type: string
      tags:
        - TenantProvisioningService
  '/v1/tenants/{tenantId}/report-schedule-config-list':
    get:
      summary: Retrieve all report schedule configs for the specified Tenant.
      operationId: GetAllReportScheduleConfig
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/JsonApiTenantReportScheduleConfigList'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: tenantId
          in: path
          required: true
          type: string
      tags:
        - TenantProvisioningService
  /v1/tenants/{tenantId}/domain-list:
    get:
      summary: Retrieve all Domains for the specified Tenant.
      operationId: GetAllTenantDomains
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/JsonApiTenantDomainList'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: tenantId
          in: path
          required: true
          type: string
      tags:
        - TenantProvisioningService
  '/v1/tenants/{tenantId}/domains/{domainId}':
    get:
      summary: Retrieve a Tenant Domain by Id.
      operationId: GetTenantDomain
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/JsonApiTenantDomain'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: domainId
          in: path
          required: true
          type: string
        - name: tenantId
          in: path
          required: true
          type: string
      tags:
        - TenantProvisioningService
    put:
      summary: Update a Tenant Domain
      operationId: UpdateTenantDomain
      consumes:
        - application/vnd.api+json
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/JsonApiTenantDomain'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: domainId
          in: path
          required: true
          type: string
        - name: tenantId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/JsonApiTenantDomain'
      tags:
        - TenantProvisioningService
    patch:
      summary: Patch update a Tenant Domain
      operationId: PatchTenantDomain
      consumes:
        - application/vnd.api+json
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: 'Successfully patched tenant domain.'
          schema:
            $ref: '#/definitions/JsonApiTenantDomain'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: domainId
          in: path
          required: true
          type: string
        - name: tenantId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/JsonApiTenantDomain'
      tags:
        - TenantProvisioningService
    delete:
      summary: Delete a Tenant Domain specified by the provided Domain Id.
      operationId: DeleteTenantDomain
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/JsonApiTenantDomain'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: domainId
          in: path
          required: true
          type: string
        - name: tenantId
          in: path
          required: true
          type: string
      tags:
        - TenantProvisioningService
  /v1/tenants/{tenantId}/ingestion-profiles:
    post:
      summary: Create an Ingestion Profile for a Tenant.
      operationId: CreateTenantIngestionProfile
      consumes:
        - application/vnd.api+json
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/JsonApiTenantIngestionProfile'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: tenantId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/JsonApiTenantIngestionProfile'
      tags:
        - TenantProvisioningService
    patch:
      summary: Update a Tenant Ingestion Profile
      operationId: PatchTenantIngestionProfile
      consumes:
        - application/vnd.api+json
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/JsonApiTenantIngestionProfile'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: tenantId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/JsonApiTenantIngestionProfile'
      tags:
        - TenantProvisioningService
    put:
      summary: Update a Tenant Ingestion Profile
      operationId: UpdateTenantIngestionProfile
      consumes:
        - application/vnd.api+json
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/JsonApiTenantIngestionProfile'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: tenantId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/JsonApiTenantIngestionProfile'
      tags:
        - TenantProvisioningService
  /v1/tenants/{tenantId}/active-ingestion-profile:
    get:
      summary: Retrieve the active Ingestion Profile for the specified Tenant.
      operationId: GetActiveTenantIngestionProfile
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/JsonApiTenantIngestionProfile'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: tenantId
          in: path
          required: true
          type: string
      tags:
        - TenantProvisioningService
  '/v1/tenants/{tenantId}/ingestion-profiles/{ingestionProfileId}':
    get:
      summary: Retrieve a Tenant Ingestion Profile by id.
      operationId: GetTenantIngestionProfile
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/JsonApiTenantIngestionProfile'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: ingestionProfileId
          in: path
          required: true
          type: string
        - name: tenantId
          in: path
          required: true
          type: string
      tags:
        - TenantProvisioningService
    delete:
      summary: Delete a Tenant Ingestion Profile specified by the provided Ingestion Profile Id.
      operationId: DeleteTenantIngestionProfile
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/JsonApiTenantIngestionProfile'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: ingestionProfileId
          in: path
          required: true
          type: string
        - name: tenantId
          in: path
          required: true
          type: string
      tags:
        - TenantProvisioningService
  /v1/tenants/{tenantId}/threshold-profiles:
    post:
      summary: Create a Threshold Profile for a Tenant.
      operationId: CreateTenantThresholdProfile
      consumes:
        - application/vnd.api+json
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/JsonApiTenantThresholdProfile'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: tenantId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/JsonApiTenantThresholdProfile'
      tags:
        - TenantProvisioningService
    patch:
      summary: Update a Tenant Threshold Profile
      operationId: PatchTenantThresholdProfile
      consumes:
        - application/vnd.api+json
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/JsonApiTenantThresholdProfile'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: tenantId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/JsonApiTenantThresholdProfile'
      tags:
        - TenantProvisioningService
    put:
      summary: Update a Tenant Threshold Profile
      operationId: UpdateTenantThresholdProfile
      consumes:
        - application/vnd.api+json
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/JsonApiTenantThresholdProfile'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: tenantId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/JsonApiTenantMonitoredObject'
      tags:
        - TenantProvisioningService
  /v1/tenants/{tenantId}/threshold-profile-list:
    get:
      summary: Retrieve all Threshold Profiles for the specified Tenant.
      operationId: GetAllTenantThresholdProfiles
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/JsonApiTenantThresholdProfileList'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: tenantId
          in: path
          required: true
          type: string
      tags:
        - TenantProvisioningService
  '/v1/tenants/{tenantId}/threshold-profiles/{thrPrfId}':
    get:
      summary: Retrieve a Tenant Threshold Profile by id.
      operationId: GetTenantThresholdProfile
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/JsonApiTenantThresholdProfile'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: thrPrfId
          in: path
          required: true
          type: string
        - name: tenantId
          in: path
          required: true
          type: string
      tags:
        - TenantProvisioningService
    delete:
      summary: Delete a Tenant Threshold Profile specified by the provided id.
      operationId: DeleteTenantThresholdProfile
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/JsonApiTenantThresholdProfile'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: thrPrfId
          in: path
          required: true
          type: string
        - name: tenantId
          in: path
          required: true
          type: string
      tags:
        - TenantProvisioningService
  /v1/tenants/{tenantId}/monitored-objects:
    post:
      summary: Create a Monitored Object for a Tenant.
      operationId: CreateTenantMonitoredObject
      consumes:
        - application/vnd.api+json
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/JsonApiTenantMonitoredObject'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: tenantId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/JsonApiTenantMonitoredObject'
      tags:
        - TenantProvisioningService
    patch:
      summary: Patch a Tenant Monitored Object
      operationId: PatchTenantMonitoredObject
      consumes:
        - application/vnd.api+json
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/JsonApiTenantMonitoredObject'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: tenantId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/JsonApiTenantMonitoredObject'
      tags:
        - TenantProvisioningService
    put:
      summary: Update a Tenant Monitored Object
      operationId: UpdateTenantMonitoredObject
      consumes:
        - application/vnd.api+json
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/JsonApiTenantMonitoredObject'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: tenantId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/JsonApiTenantMonitoredObject'
      tags:
        - TenantProvisioningService
  /v1/tenants/{tenantId}/monitored-object-list:
    get:
      summary: Retrieve all Monitored Objects for the specified Tenant.
      operationId: GetAllTenantMonitoredObjects
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/JsonApiTenantMonitoredObjectList'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: tenantId
          in: path
          required: true
          type: string
      tags:
        - TenantProvisioningService
  '/v1/tenants/{tenantId}/monitored-objects/{monObjId}':
    get:
      summary: Retrieve a Tenant Monitored Object by id.
      operationId: GetTenantMonitoredObject
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/JsonApiTenantMonitoredObject'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: monObjId
          in: path
          required: true
          type: string
        - name: tenantId
          in: path
          required: true
          type: string
      tags:
        - TenantProvisioningService
    delete:
      summary: Delete a Tenant Monitored Object specified by the provided id.
      operationId: DeleteTenantMonitoredObject
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/JsonApiTenantMonitoredObject'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: monObjId
          in: path
          required: true
          type: string
        - name: tenantId
          in: path
          required: true
          type: string
      tags:
        - TenantProvisioningService
  '/v1/tenants/{tenantId}/monitored-object-domain-map':
    post:
      summary: Retrieve a mapping of Monitored Objects that are associated with each Domain.
      operationId: GetDomainToMonitoredObjectMap
      produces:
        - application/json        
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/MonitoredObjectCountByDomainResponse'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: tenantId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/MonitoredObjectCountByDomainRequest'
      tags:
        - TenantProvisioningService
  '/v1/tenants/{tenantId}/bulk/insert/monitored-objects':
    post:
      summary: Create one or more Monitored Objects in a single API request.
      operationId: BulkInsertMonitoredObject
      produces:
        - application/json        
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/BulkOperationResponse'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: tenantId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
              $ref: '#/definitions/BulkMonitoredObjectRequest'
      tags:
        - TenantProvisioningService
    put:
      summary: Update one or more Monitored Objects in a single API request.
      operationId: BulkUpdateMonitoredObject
      produces:
        - application/json        
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/BulkOperationResponse'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: tenantId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
              $ref: '#/definitions/BulkMonitoredObjectRequest'
      tags:
        - TenantProvisioningService
  '/v1/tenants/{tenantId}/bulk/upsert/monitored-objects/meta':
    post:
      summary: Upsert metadata for one or more Monitored Objects in a single API request.
      operationId: BulkUpsertMonitoredObjectMeta
      produces:
        - application/json        
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/BulkOperationResponse'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request. Please check response payload for error description as multiple errors can be reported back."
          schema:
            $ref: '#/definitions/BulkOperationResponse'
      parameters:
        - name: tenantId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
              $ref: '#/definitions/BulkMonitoredObjectMetaRequest'
      tags:
        - TenantProvisioningService
  /v1/tenants/{tenantId}/meta:
    post:
      summary: Create a Metadata record for a Tenant.
      operationId: CreateTenantMetadata
      consumes:
        - application/vnd.api+json
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/JsonApiTenantMetadata'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: tenantId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/JsonApiTenantMetadata'
      tags:
        - TenantProvisioningService
    patch:
      summary: Patch a Tenant Metadata record
      operationId: PatchTenantMetadata
      consumes:
        - application/vnd.api+json
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/JsonApiTenantMetadata'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: tenantId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/JsonApiTenantIngestionProfile'
      tags:
        - TenantProvisioningService

    put:
      summary: Update a Tenant Metadata record
      operationId: UpdateTenantMetadata
      consumes:
        - application/vnd.api+json
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/JsonApiTenantMetadata'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: tenantId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/JsonApiTenantIngestionProfile'
      tags:
        - TenantProvisioningService
    get:
      summary: Retrieve a Tenant Metadata record
      operationId: GetTenantMetadata
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/JsonApiTenantMetadata'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: tenantId
          in: path
          required: true
          type: string
      tags:
        - TenantProvisioningService
    delete:
      summary: Delete a Tenant Metadata record
      operationId: DeleteTenantMetadata
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/JsonApiTenantMetadata'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: tenantId
          in: path
          required: true
          type: string
      tags:
        - TenantProvisioningService
  '/v1/tenants/{tenantId}/reports/{reportID}':
    get:
      summary: Retrieve a Tenant SLA report by id.
      operationId: GetSLAReport
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/gathergrpcJSONAPIObject'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: reportID
          in: path
          required: true
          type: string
        - name: tenantId
          in: path
          required: true
          type: string
      tags:
        - TenantProvisioningService
  /v1/tenants/{tenantId}/report-list:
    get:
      summary: Retrieve all SLA reports for the specified Tenant.
      operationId: GetAllSLAReports
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/gathergrpcJSONAPIObjectList'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: tenantId
          in: path
          required: true
          type: string
      tags:
        - TenantProvisioningService
  /v2/tenants:
    post:
      summary: Create a Tenant.
      operationId: CreateTenantV2
      consumes:
        - application/vnd.api+json
      produces:
        - application/vnd.api+json
      responses:
        '201':
          description: ''
          schema:
            $ref: '#/definitions/TenantResponse'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '409':
          description: "The Tenant being provisioned already exists"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/TenantCreationRequest'
      tags:
        - AdminProvisioningServiceV2
    get:
      summary: Retrieve all Tenants.
      operationId: GetAllTenantsV2
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/TenantListResponse'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "There are no Tenants provisioned"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      tags:
        - AdminProvisioningServiceV2
  /v2/tenants/{tenantId}:
    get:
      summary: Retrieve a Tenant by id.
      operationId: GetTenantV2
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/TenantResponse'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "There requested Tenant is not provisioned"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: tenantId
          in: path
          required: true
          type: string
      tags:
        - AdminProvisioningServiceV2
    delete:
      summary: Delete a Tenant
      operationId: DeleteTenantV2
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/TenantResponse'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "There requested Tenant is not provisioned"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: tenantId
          in: path
          required: true
          type: string
      tags:
        - AdminProvisioningServiceV2
    patch:
      summary: Patch a Tenant
      operationId: PatchTenantV2
      consumes:
        - application/vnd.api+json
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/TenantResponse'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "There requested Tenant is not provisioned"
          schema:
            type: string
        '409':
          description: "Incorrect revision provided for the update request"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: tenantId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/TenantUpdateRequest'
      tags:
        - AdminProvisioningServiceV2
  /v2/tenant-by-alias/{value}:
    get:
      summary: Returns the Id of a Tenant that matches the provided alias.
      operationId: GetTenantIdByAliasV2
      produces:
        - text/plain
      responses:
        '200':
          description: ''
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "There requested Tenant is not provisioned"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: value
          in: path
          required: true
          type: string
      tags:
        - AdminProvisioningServiceV2
  /v2/tenant-summary-by-alias/{value}:
    get:
      summary: Returns a summary of the Tenant that matches the provided alias.
      operationId: GetTenantSummaryByAliasV2
      produces:
        - application/json
      responses:
        '200':
          description: ''
          schema:
            $ref: "#/definitions/TenantSummaryResponse"
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "There requested Tenant is not provisioned"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: value
          in: path
          required: true
          type: string
      tags:
        - AdminProvisioningServiceV2
  /v2/ingestion-dictionaries:
    get:
      summary: Retrieve an Ingestion Dictionary.
      operationId: GetIngestionDictionaryV2
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/IngestionDictionaryListResponse'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      tags:
        - AdminProvisioningServiceV2
  /v2/valid-types:
    get:
      summary: Retrieve a Valid Types object.
      operationId: GetValidTypesV2
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/ValidTypesListResponse'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      tags:
        - AdminProvisioningServiceV2
  /v2/brandings:
    post:
      summary: Create a Branding for a Tenant.
      operationId: CreateBrandingV2
      consumes:
        - application/vnd.api+json
      produces:
        - application/vnd.api+json
      responses:
        '201':
          description: ''
          schema:
            $ref: '#/definitions/BrandingResponse'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '409':
          description: "The Branding being provisioned already exists"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/BrandingCreateRequest'
      tags:
        - TenantProvisioningServiceV2
    get:
      summary: Retrieve all Brandings for the specified Tenant.
      operationId: GetAllBrandingsV2
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/BrandingListResponse'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "No branding records are provisioned"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: zone
          in: query
          required: false
          type: string
      tags:
        - TenantProvisioningServiceV2
  /v2/brandings/{brandingId}:
    get:
      summary: Retrieve a Tenant Branding by Id.
      operationId: GetBrandingV2
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/BrandingResponse'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "The specified branding is not provisioned"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: brandingId
          in: path
          required: true
          type: string
      tags:
        - TenantProvisioningServiceV2
    patch:
      summary: Update a Tenant Branding specified by the provided Branding Id.
      operationId: UpdateBrandingV2
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/BrandingResponse'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "The specified branding is not provisioned"
          schema:
            type: string
        '409':
          description: "Incorrect revision number passed in to the branding being updated"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/BrandingUpdateRequest'
        - name: brandingId
          in: path
          required: true
          type: string
      tags:
        - TenantProvisioningServiceV2
    delete:
      summary: Delete a Tenant Branding specified by the provided Branding Id.
      operationId: DeleteBrandingV2
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/BrandingResponse'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "The specified branding is not provisioned"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: brandingId
          in: path
          required: true
          type: string
      tags:
        - TenantProvisioningServiceV2
    
  /v2/locales:
    post:
      summary: Create a Locale for a Tenant.
      operationId: CreateLocaleV2
      consumes:
        - application/vnd.api+json
      produces:
        - application/vnd.api+json
      responses:
        '201':
          description: ''
          schema:
            $ref: '#/definitions/LocaleResponse'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '409':
          description: "The Locale being provisioned already exists"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/LocaleCreateRequest'
      tags:
        - TenantProvisioningServiceV2
    get:
      summary: Retrieve all Locales for the specified Tenant.
      operationId: GetAllLocalesV2
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/LocaleListResponse'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "No Locales are provisioned"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      tags:
        - TenantProvisioningServiceV2
  /v2/locales/{localeId}:
    get:
      summary: Retrieve a Tenant Locale by Id.
      operationId: GetLocaleV2
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/LocaleResponse'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "The requested Locale is not provisioned"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: localeId
          in: path
          required: true
          type: string
      tags:
        - TenantProvisioningServiceV2
    patch:
      summary: Update a Locale for a Tenant.
      operationId: UpdateLocaleV2
      consumes:
        - application/vnd.api+json
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/LocaleResponse'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "The requested Locale is not provisioned"
          schema:
            type: string
        '409':
          description: "Incorrect revision number passed in to the Locale being updated"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/LocaleUpdateRequest'
        - name: localeId
          in: path
          required: true
          type: string
      tags:
        - TenantProvisioningServiceV2
    delete:
      summary: Delete a Tenant Locale specified by the provided Locale Id.
      operationId: DeleteLocaleV2
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/LocaleResponse'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "The requested Locale is not provisioned"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: localeId
          in: path
          required: true
          type: string
      tags:
        - TenantProvisioningServiceV2
  /v2/connector-configs:
    post:
      summary: Create a ConnectorConfig for a Tenant.
      operationId: CreateConnectorConfigV2
      consumes:
        - application/vnd.api+json
      produces:
        - application/vnd.api+json
      responses:
        '201':
          description: ''
          schema:
            $ref: '#/definitions/ConnectorConfigResponse'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '409':
          description: "The Connector being provisioned already exists"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ConnectorConfigCreateRequest'
      tags:
        - TenantProvisioningServiceV2
    get:
      summary: Retrieve all ConnectorConfigs for the specified Tenant.
      operationId: GetAllConnectorConfigsV2
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/ConnectorConfigListResponse'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "No connector configurations are provisioned"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: zone
          in: query
          required: false
          type: string
      tags:
        - TenantProvisioningServiceV2
  /v2/connector-configs/{connectorId}:
    get:
      summary: Retrieve a Tenant ConnectorConfig by Id.
      operationId: GetConnectorConfigV2
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/ConnectorConfigResponse'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "The specified connector configuration is not provisioned"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: connectorId
          in: path
          required: true
          type: string
      tags:
        - TenantProvisioningServiceV2
    patch:
      summary: Update a Tenant ConnectorConfig specified by the provided Connector Id.
      operationId: UpdateConnectorConfigV2
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/ConnectorConfigResponse'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "The specified Connector Configuration is not provisioned"
          schema:
            type: string
        '409':
          description: "Incorrect revision number passed in to the Connector Configuration being updated"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ConnectorConfigUpdateRequest'
        - name: connectorId
          in: path
          required: true
          type: string
      tags:
        - TenantProvisioningServiceV2
    delete:
      summary: Delete a Tenant ConnectorConfig specified by the provided Connector Id.
      operationId: DeleteConnectorConfigV2
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/ConnectorConfigResponse'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "The specified Connector Configuration is not provisioned"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: connectorId
          in: path
          required: true
          type: string
      tags:
        - TenantProvisioningServiceV2
    
  /v2/connector-instances:
    post:
      summary: Create a ConnectorInstance for a Tenant.
      operationId: CreateConnectorInstanceV2
      consumes:
        - application/vnd.api+json
      produces:
        - application/vnd.api+json
      responses:
        '201':
          description: ''
          schema:
            $ref: '#/definitions/ConnectorInstanceResponse'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '409':
          description: "The Connector Instance being provisioned already exists"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ConnectorInstanceCreateRequest'
      tags:
        - TenantProvisioningServiceV2
    get:
      summary: Retrieve all ConnectorInstances for the specified Tenant.
      operationId: GetAllConnectorInstancesV2
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/ConnectorInstanceListResponse'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "No Connector Instances are provisioned"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      tags:
        - TenantProvisioningServiceV2
  /v2/connector-instances/{connectorInstanceId}:
    get:
      summary: Retrieve a Tenant ConnectorInstance by Id.
      operationId: GetConnectorInstanceV2
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/ConnectorInstanceResponse'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "The requested Connector Instance is not provisioned"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: connectorInstanceId
          in: path
          required: true
          type: string
      tags:
        - TenantProvisioningServiceV2
    patch:
      summary: Update a ConnectorInstance for a Tenant.
      operationId: UpdateConnectorInstanceV2
      consumes:
        - application/vnd.api+json
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/ConnectorInstanceResponse'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "The requested Connector Instance is not provisioned"
          schema:
            type: string
        '409':
          description: "Incorrect revision number passed in to the Connector Instance being updated"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ConnectorInstanceUpdateRequest'
        - name: connectorInstanceId
          in: path
          required: true
          type: string
      tags:
        - TenantProvisioningServiceV2
    delete:
      summary: Delete a Tenant ConnectorInstance specified by the provided Connector Instance Id.
      operationId: DeleteConnectorInstanceV2
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/ConnectorInstanceResponse'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "The requested Connector Instance is not provisioned"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: connectorInstanceId
          in: path
          required: true
          type: string
      tags:
        - TenantProvisioningServiceV2
  /v2/dashboards:
    post:
      summary: Create a Dashboard for a Tenant.
      operationId: CreateDashboardV2
      consumes:
        - application/vnd.api+json
      produces:
        - application/vnd.api+json
      responses:
        '201':
          description: ''
          schema:
            $ref: '#/definitions/DashboardResponse'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '409':
          description: "The Dashboard being provisioned already exists"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DashboardCreateRequest'
      tags:
        - TenantProvisioningServiceV2
    get:
      summary: Retrieve all Dashboards for the specified Tenant.
      operationId: GetAllDashboardsV2
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/DashboardListResponse'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "No Dashboards are provisioned"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: zone
          in: query
          required: false
          type: string
      tags:
        - TenantProvisioningServiceV2
  /v2/dashboards/{dashboardId}:
    get:
      summary: Retrieve a Tenant Dashboard by Id.
      operationId: GetDashboardV2
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/DashboardResponse'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "The specified Dashboard is not provisioned"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: dashboardId
          in: path
          required: true
          type: string
      tags:
        - TenantProvisioningServiceV2
    patch:
      summary: Update a Tenant Dashboard specified by the provided Dashboard Id.
      operationId: UpdateDashboardV2
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/DashboardResponse'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "The specified Dashboard is not provisioned"
          schema:
            type: string
        '409':
          description: "Incorrect revision number passed in to the Dashboard being updated"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DashboardUpdateRequest'
        - name: dashboardId
          in: path
          required: true
          type: string
      tags:
        - TenantProvisioningServiceV2
    delete:
      summary: Delete a Tenant Dashboard specified by the provided Dashboard Id.
      operationId: DeleteDashboardV2
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/DashboardResponse'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "The specified Dashboard is not provisioned"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: dashboardId
          in: path
          required: true
          type: string
      tags:
        - TenantProvisioningServiceV2

  /v2/cards:
    post:
      summary: Create a Card for a Tenant.
      operationId: CreateCardV2
      consumes:
        - application/vnd.api+json
      produces:
        - application/vnd.api+json
      responses:
        '201':
          description: ''
          schema:
            $ref: '#/definitions/CardResponse'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '409':
          description: "The Card being provisioned already exists"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/CardCreateRequest'
      tags:
        - TenantProvisioningServiceV2
    get:
      summary: Retrieve all Cards for the specified Tenant.
      operationId: GetAllCardsV2
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/CardListResponse'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "No Cardss are provisioned"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: zone
          in: query
          required: false
          type: string
      tags:
        - TenantProvisioningServiceV2
  /v2/cards/{cardId}:
    get:
      summary: Retrieve a Tenant Card by Id.
      operationId: GetCardV2
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/CardResponse'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "The specified Cards is not provisioned"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: cardId
          in: path
          required: true
          type: string
      tags:
        - TenantProvisioningServiceV2
    patch:
      summary: Update a Tenant Card specified by the provided Card Id.
      operationId: UpdateCardV2
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/CardResponse'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "The specified Cards is not provisioned"
          schema:
            type: string
        '409':
          description: "Incorrect revision number passed in to the Cards being updated"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/CardUpdateRequest'
        - name: cardId
          in: path
          required: true
          type: string
      tags:
        - TenantProvisioningServiceV2
    delete:
      summary: Delete a Tenant Card specified by the provided Card Id.
      operationId: DeleteCardV2
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/CardResponse'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "The specified Cards is not provisioned"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: cardId
          in: path
          required: true
          type: string
      tags:
        - TenantProvisioningServiceV2
  /v2/data-cleaning-profiles:
    post:
      summary: Provides ability to Create a Tenant Data Cleaning Profile
      operationId: CreateDataCleaningProfile
      consumes:
        - application/vnd.api+json
      produces:
        - application/vnd.api+json
      responses:
        '201':
          description: "Profile creation completed successfully"
          schema:
            $ref: '#/definitions/DataCleaningProfileResponse'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '409':
          description: "There was a conflict when creating the record"
          schema:
            type: string
        '422':
          description: "The provided request did not pass validation"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DataCleaningProfileCreateRequest'
      tags:
        - TenantProvisioningServiceV2
    get:
      summary: Retrieve all Data Cleaning Profiles for a Tenant.
      operationId: GetDataCleaningProfiles
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: "Fetch completed successfully"
          schema:
            $ref: '#/definitions/DataCleaningProfileListResponse'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "Record not found"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      tags:
        - TenantProvisioningServiceV2
  /v2/data-cleaning-profiles/{profileId}:
    get:
      summary: Retrieve a Data Cleaning Profiles for a Tenant.
      operationId: GetDataCleaningProfile
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: "Fetch completed successfully"
          schema:
            $ref: '#/definitions/DataCleaningProfileResponse'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "No records found"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: profileId
          in: path
          required: true
          type: string
      tags:
        - TenantProvisioningServiceV2
    patch:
      summary: Provides ability to Update a Tenant Data Cleaning Profile
      operationId: UpdateDataCleaningProfile
      consumes:
        - application/vnd.api+json
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: "Update completed successfully"
          schema:
            $ref: '#/definitions/DataCleaningProfileResponse'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "No records found"
          schema:
            type: string
        '409':
          description: "There was a conflict when updating the record"
          schema:
            type: string
        '422':
          description: "The provided request did not pass validation"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: profileId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DataCleaningProfileUpdateRequest'
      tags:
        - TenantProvisioningServiceV2
    delete:
      summary: Delete a Data Cleaning Profile for a Tenant.
      operationId: DeleteDataCleaningProfile
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: "Deletion completed successfully"
          schema:
            $ref: '#/definitions/DataCleaningProfileResponse'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "No records found"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: profileId
          in: path
          required: true
          type: string
      tags:
        - TenantProvisioningServiceV2

  /v2/data-cleaning-history:
    get:
      summary: Retrieve data cleaning event history for a given monitored object and time period.
      operationId: GetDataCleaningHistory
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: "Fetch completed successfully"
          schema:
            $ref: '#/definitions/DataCleaningHistoryResponse'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "No records found"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: monitoredObjectId
          in: query
          required: true
          type: string
        - name: interval
          description: "ISO-8601 Interval"
          in: query
          required: true
          type: string
      tags:
        - TenantProvisioningServiceV2
  /v2/distribution/download-roadrunner:
    get:
      summary: Download a roadrunner tarball ready for installing
      operationId: DownloadRoadrunner
      produces:
        - application/octet-stream
      responses:
        '200':
          description: 'download roadrunner archive'
          schema:
            type: string
            format: binary
          headers:
            Content-Disposition:
              type: string
              default: "attachment; filename=DataHubConnector.tar.gz;"
            Content-Type:
              type: string
              default: "application/octet-stream"
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: zone
          in: query
          required: true
          type: string
      tags:
        - TenantProvisioningServiceV2
  /v2/ingestion-profiles:
    post:
      summary: Create an Ingestion Profile for a Tenant.
      operationId: CreateIngestionProfileV2
      consumes:
        - application/vnd.api+json
      produces:
        - application/vnd.api+json
      responses:
        '201':
          description: ''
          schema:
            $ref: '#/definitions/IngestionProfileResponse'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '409':
          description: "The ingestion profile already exists"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/IngestionProfileCreateRequest'
      tags:
        - TenantProvisioningServiceV2
    get:
      summary: Get all Tenant Ingestion Profiles
      operationId: GetAllIngestionProfilesV2
      consumes:
        - application/vnd.api+json
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/IngestionProfileListResponse'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "No Ingestion Profile is provisioned"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      tags:
        - TenantProvisioningServiceV2
    
  /v2/ingestion-profiles/{ingestionProfileId}:
    get:
      summary: Retrieve a Tenant Ingestion Profile by id.
      operationId: GetIngestionProfileV2
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/IngestionProfileResponse'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "The specified Ingestion Profile is not provisioned"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: ingestionProfileId
          in: path
          required: true
          type: string
      tags:
        - TenantProvisioningServiceV2
    patch:
      summary: Update a Tenant Ingestion Profile
      operationId: UpdateIngestionProfileV2
      consumes:
        - application/vnd.api+json
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/IngestionProfileResponse'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "The specified Ingestion Profile is not provisioned"
          schema:
            type: string
        '409':
          description: "Incorrect revision provided for th update request"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: ingestionProfileId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/IngestionProfileUpdateRequest'
      tags:
        - TenantProvisioningServiceV2
    delete:
      summary: Delete a Tenant Ingestion Profile specified by the provided Ingestion Profile Id.
      operationId: DeleteIngestionProfileV2
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/IngestionProfileResponse'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "The specified Ingestion Profile is not provisioned"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: ingestionProfileId
          in: path
          required: true
          type: string
      tags:
        - TenantProvisioningServiceV2
  /v2/metadata-configs:
    post:
      summary: Create a Metadata Configuration for a Tenant.
      operationId: CreateMetadataConfigV2
      consumes:
        - application/vnd.api+json
      produces:
        - application/vnd.api+json
      responses:
        '201':
          description: ''
          schema:
            $ref: '#/definitions/MetadataConfigResponse'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '409':
          description: "The Metadata Configuration already exists"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/MetadataConfigCreateRequest'
      tags:
        - TenantProvisioningServiceV2
    get:
      summary: Get all Tenant Metadata Configurations
      operationId: GetAllMetadataConfigsV2
      consumes:
        - application/vnd.api+json
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/MetadataConfigListResponse'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "No Metadata Configuration is provisioned"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      tags:
        - TenantProvisioningServiceV2
    
  /v2/metadata-configs/{MetadataConfigId}:
    get:
      summary: Retrieve a Tenant Metadata Configuration by id.
      operationId: GetMetadataConfigV2
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/MetadataConfigResponse'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "The specified Metadata Configuration is not provisioned"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: MetadataConfigId
          in: path
          required: true
          type: string
      tags:
        - TenantProvisioningServiceV2
    patch:
      summary: Update a Tenant Metadata Configuration
      operationId: UpdateMetadataConfigV2
      consumes:
        - application/vnd.api+json
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/MetadataConfigResponse'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "The specified Metadata Configuration is not provisioned"
          schema:
            type: string
        '409':
          description: "Incorrect revision provided for th update request"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: MetadataConfigId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/MetadataConfigUpdateRequest'
      tags:
        - TenantProvisioningServiceV2
    delete:
      summary: Delete a Tenant Metadata Configuration specified by the provided Metadata Configuration Id.
      operationId: DeleteMetadataConfigV2
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/MetadataConfigResponse'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "The specified Metadata Configuration is not provisioned"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: MetadataConfigId
          in: path
          required: true
          type: string
      tags:
        - TenantProvisioningServiceV2
  /v2/metric-baselines:
    patch:
      summary: Update multiple Tenant Metric Baselines for multiple Monitored Objects
      operationId: BulkUpdateMetricBaselinesV2
      consumes:
        - application/vnd.api+json
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: 'Response body indicating the bulk update request has been received successfully and will be completed'
          schema:
            type: string
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/MetricBaselineBulkUpdateRequest'
      tags:
        - TenantProvisioningServiceV2
    post:
      summary: Create an Metric Baseline for a Tenant.
      operationId: CreateMetricBaselineV2
      consumes:
        - application/vnd.api+json
      produces:
        - application/vnd.api+json
      responses:
        '201':
          description: ''
          schema:
            $ref: '#/definitions/MetricBaselineResponse'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '409':
          description: "The Metric Baseline already exists"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/MetricBaselineCreateRequest'
      tags:
        - TenantProvisioningServiceV2
    get:
      summary: Get all Tenant Metric Baselines
      operationId: GetAllMetricBaselinesV2
      consumes:
        - application/vnd.api+json
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/MetricBaselineListResponse'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "No Metric Baseline is provisioned"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: objectId
          description: "Provides ability to retrieve a Metric Baseline object for the provided objectId"
          in: query
          required: false
          type: string
      tags:
        - TenantProvisioningServiceV2
  /v2/metric-baselines/{metricBaselineId}:
    get:
      summary: Retrieve a Tenant Metric Baseline by id.
      operationId: GetMetricBaselineV2
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/MetricBaselineResponse'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "The specified Metric Baseline is not provisioned"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: metricBaselineId
          in: path
          required: true
          type: string
      tags:
        - TenantProvisioningServiceV2
    patch:
      summary: Update a Tenant Metric Baseline
      operationId: UpdateMetricBaselineV2
      consumes:
        - application/vnd.api+json
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/MetricBaselineResponse'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "The specified Metric Baseline is not provisioned"
          schema:
            type: string
        '409':
          description: "Incorrect revision provided for th update request"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: metricBaselineId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/MetricBaselineUpdateRequest'
      tags:
        - TenantProvisioningServiceV2
    delete:
      summary: Delete a Tenant Metric Baseline specified by the provided Metric Baseline Id.
      operationId: DeleteMetricBaselineV2
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/MetricBaselineResponse'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "The specified Metric Baseline is not provisioned"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: metricBaselineId
          in: path
          required: true
          type: string
      tags:
        - TenantProvisioningServiceV2
  /v2/metric-baselines/by-monitored-object/{monitoredObjectId}:
    get:
      summary: Retrieve all Tenant Metric Baselines for a single Monitored Object.
      operationId: GetMetricBaselineByMonitoredObjectIdV2
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/MetricBaselineListResponse'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "The specified Metric Baseline is not provisioned"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: monitoredObjectId
          in: path
          required: true
          type: string
      tags:
        - TenantProvisioningServiceV2
    delete:
      summary: Deletes (or resets) all Metric Baselines for a Monitored Object
      operationId: DeleteMetricBaselineByMonitoredObjectIdV2
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: 'A confirmation message of successful deletion or resetting'
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "The specified Metric Baseline is not provisioned"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: monitoredObjectId
          in: path
          required: true
          type: string
        - name: reset
          in: query
          required: true
          default: false
          type: boolean
          description: "If true, will only reset all Metric Baselines for the Monitored Object. If false, will delete all Metric Baseline records for the monitored object"
      tags:
        - TenantProvisioningServiceV2
  /v2/metric-baselines/by-monitored-object/{monitoredObjectId}/hour-of-week/{hourOfWeek}:
    patch:
      summary: Update a Tenant Metric Baseline for a specific Metric for a specific hour of the week
      operationId: UpdateMetricBaselineForHourOfWeekV2
      consumes:
        - application/vnd.api+json
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/MetricBaselineResponse'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "The specified Metric Baseline is not provisioned"
          schema:
            type: string
        '409':
          description: "Incorrect revision provided for th update request"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: hourOfWeek
          in: path
          required: true
          type: integer
          format: int32
        - name: monitoredObjectId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/MetricBaselineUpdateHourRequest'
      tags:
        - TenantProvisioningServiceV2
    get:
      summary: Retrieve a Tenant Metric Baselines by monitoredObjectId for a specific hour of the week.
      operationId: GetMetricBaselineByMonitoredObjectIdForHourOfWeekV2
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/MetricBaselineResponse'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "The specified Metric Baseline is not provisioned"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: monitoredObjectId
          in: path
          required: true
          type: string
        - name: hourOfWeek
          in: path
          required: true
          type: integer
          format: int32
      tags:
        - TenantProvisioningServiceV2
  
  /v2/metrics/threshold-crossing-by-monitored-object-top-n:
    post:
      summary: Retrieve the Top N threshold crossing events using the given threshold profile and the specified metric filters
      operationId: GetThresholdCrossingByMonitoredObjectTopNV2
      consumes:
        - application/vnd.api+json
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: "Top N threshold crossing by monitored object successfully processed"
          schema:
            $ref: '#/definitions/JsonApiThresholdCrossingByMOTopNResponse'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "Missing provisioned data"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/JsonApiThresholdCrossingByMOTopNRequest'
      tags:
        - MetricsServiceV2
  
  /v2/metrics/generate-sla-report:
    post:
      summary: Retrieve an SLA report for given time range and parameters
      operationId: GenerateSLAReportV2
      consumes:
        - application/vnd.api+json
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: "SLA report successfully processed"
          schema:
            $ref: '#/definitions/JsonApiSLAReportResponse'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "Missing provisioned data"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/JsonApiSLAReportRequest'
      tags:
        - MetricsServiceV2

  /v2/metrics/histogram:
    post:
      summary: Retrieve a histogram of measurements using custom buckets specified in the request
      operationId: GetHistogramV2
      consumes:
        - application/vnd.api+json
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: "Histogram request successfully processed"
          schema:
            $ref: '#/definitions/JsonApiHistogramResponse'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "Missing provisioned data"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/JsonApiHistogramRequest'
      tags:
        - MetricsServiceV2

  /v2/metrics/topn-metrics:
    post:
      summary: Retrieve the Top-N for the specified set of metrics
      operationId: GetTopNForMetricV2
      consumes:
        - application/vnd.api+json
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: "Top N request successfully processed"
          schema:
            $ref: '#/definitions/JsonApiTopNForMetricResponse'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "Missing provisioned data"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/JsonApiTopNForMetricRequest'
      tags:
        - MetricsServiceV2

  /v2/metrics/threshold-crossing:
    post:
      summary: Retrieve threshold crossing events for the given threshold profile
      operationId: QueryThresholdCrossingV2
      consumes:
        - application/vnd.api+json
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: "Threshold crossings successfully processed"
          schema:
            $ref: '#/definitions/JsonApiThresholdCrossingResponse'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "Threshold profile not found"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/JsonApiThresholdCrossingRequest'
      tags:
        - MetricsServiceV2

  /v2/metrics/aggregated-metrics:
    post:
      summary: Retrieve a variety of aggregation types against the specified metric filters
      operationId: QueryAggregateMetricsV2
      consumes:
        - application/vnd.api+json
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: "Aggregation request successfully processed"
          schema:
            $ref: '#/definitions/JsonApiAggregationResponse'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "Missing provisioned data from request parameters"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/JsonApiAggregationRequest'
      tags:
        - MetricsServiceV2

  /v2/raw-metrics:
    post:
      summary: Returns raw metric entries from the metrics datastore based on the provided metric filters
      operationId: GetFilteredRawMetricsV2
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: "Raw metric request successfully processed"
          schema:
            type: object
            additionalProperties:
              type: object
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/FilteredRawMetricsRequestObject'
      tags:
        - MetricsServiceV2
  /v2/monitored-objects:
    get:
      summary: Retrieve all Monitored Objects for a Tenant.
      operationId: GetAllMonitoredObjectsV2
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: "Fetch completed successfully"
          schema:
            $ref: '#/definitions/MonitoredObjectListResponse'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "No Monitored objects are provisioned"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: start_key
          in: query
          type: string
          description: "The name of the Monitored Object from which the result set will begin"
        - name: limit
          in: query
          type: integer
          description: "The maximum number of records to return for a single page"
      tags:
        - TenantProvisioningServiceV2
    post:
      summary: Create a Monitored Object for a Tenant.
      operationId: CreateMonitoredObjectV2
      consumes:
        - application/vnd.api+json
      produces:
        - application/vnd.api+json
      responses:
        '201':
          description: ''
          schema:
            $ref: '#/definitions/MonitoredObjectResponse'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '409':
          description: "A Monitored Object with this objectId is already provisioned"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/MonitoredObjectCreateRequest'
      tags:
        - TenantProvisioningServiceV2
  /v2/monitored-objects/id-list:
    post:
      summary: Retrieve a list of monitored objects based on the provided filter criteria
      operationId: GetFilteredMonitoredObjectListV2
      consumes:
        - application/json
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: 'Response list containing all monitored object IDs that match the provided meta filter criteria'
          schema:
            $ref: '#/definitions/MonitoredObjectFilteredListResponse'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/MonitoredObjectFilteredListRequest'
      tags:
        - TenantProvisioningServiceV2
  /v2/monitored-objects/{monObjId}:
    get:
      summary: Retrieve a Tenant Monitored Object by id.
      operationId: GetMonitoredObjectV2
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/MonitoredObjectResponse'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "The requested Monitored Object is not provisioned"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: monObjId
          in: path
          required: true
          type: string
      tags:
        - TenantProvisioningServiceV2
    patch:
      summary: Update a Tenant Monitored Object
      operationId: UpdateMonitoredObjectV2
      consumes:
        - application/vnd.api+json
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/MonitoredObjectResponse'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "The requested Monitored Object is not provisioned"
          schema:
            type: string
        '409':
          description: "Incorrect revision provided for the update request to the Monitored Object"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: monObjId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/MonitoredObjectUpdateRequest'
      tags:
        - TenantProvisioningServiceV2
    delete:
      summary: Delete a Tenant Monitored Object specified by the provided id.
      operationId: DeleteMonitoredObjectV2
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/MonitoredObjectResponse'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "The requested Monitored Object is not provisioned"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: monObjId
          in: path
          required: true
          type: string
      tags:
        - TenantProvisioningServiceV2
  /v2/bulk/insert/monitored-objects:
    post:
      summary: Create one or more Monitored Objects in a single API request.
      operationId: BulkInsertMonitoredObjectsV2
      produces:
        - application/json        
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/BulkOperationResponseV2'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: body
          in: body
          required: true
          schema:
              $ref: '#/definitions/BulkMonitoredObjectCreateRequest'
      tags:
        - TenantProvisioningServiceV2
    put:
      summary: Update one or more Monitored Objects in a single API request. Note that this is a PUT operation for each Monitored Object. This means that all properties must be explicitly provided
      operationId: BulkUpdateMonitoredObjectsV2
      produces:
        - application/json        
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/BulkOperationResponseV2'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: body
          in: body
          required: true
          schema:
              $ref: '#/definitions/BulkMonitoredObjectUpdateRequest'
      tags:
        - TenantProvisioningServiceV2
        
  /v2/bulk/insert/monitored-objects/meta:
    post:
      summary: Update the metadata of one or more Monitored Objects in a single API request.
      operationId: BulkInsertMonitoredObjectsMetaV2
      produces:
        - application/json        
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/BulkOperationResponseV2'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: body
          in: body
          required: true
          schema:
              $ref: '#/definitions/BulkMonitoredObjectMetaCreateRequest'
      tags:
        - TenantProvisioningServiceV2
  /v2/reports/{reportID}:
    get:
      summary: Retrieve a Tenant SLA report by id.
      operationId: GetSLAReportV2
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/gathergrpcJSONAPIObject'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "The requested Report is not provisioned in Datahub"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: reportID
          in: path
          required: true
          type: string
      tags:
        - TenantProvisioningServiceV2
  /v2/reports:
    get:
      summary: Retrieve all SLA reports for the specified Tenant.
      operationId: GetAllSLAReportsV2
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/gathergrpcJSONAPIObjectList'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "No Reports are provisioned in Datahub"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      tags:
        - TenantProvisioningServiceV2
  /v2/report-schedule-configs:
    post:
      summary: Create a report schedule configuration for a Tenant.
      operationId: CreateReportScheduleConfigV2
      consumes:
        - application/vnd.api+json
      produces:
        - application/vnd.api+json
      responses:
        '201':
          description: ''
          schema:
            $ref: '#/definitions/ReportScheduleConfigResponse'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '409':
          description: "The Report Schedule Configuration is already provisioned"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ReportScheduleConfigCreateRequest'
      tags:
        - TenantProvisioningServiceV2
    get:
      summary: Retrieve all report schedule configs for the specified Tenant.
      operationId: GetAllReportScheduleConfigsV2
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/ReportScheduleConfigListResponse'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "No Report Schedule Configurations are provisioned"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      tags:
        - TenantProvisioningServiceV2
  /v2/report-schedule-configs/{configId}:
    get:
      summary: Retrieve a report schedule configuration for a Tenant by configuration Id.
      operationId: GetReportScheduleConfigV2
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/ReportScheduleConfigResponse'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "The requested Report Schedule Configuration is not provisioned"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: configId
          in: path
          required: true
          type: string
      tags:
        - TenantProvisioningServiceV2
    patch:
      summary: Update a Report Schedule Configuration for a Tenant.
      operationId: UpdateReportScheduleConfigV2
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/ReportScheduleConfigResponse'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "Requested Report Schedule Configuration is not provisioned"
          schema:
            type: string
        '409':
          description: "Incorrect revision provided for this update request"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: configId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ReportScheduleConfigUpdateRequest'
      tags:
        - TenantProvisioningServiceV2
    delete:
      summary: Delete a report schedule configuration for a Tenant by configuration Id.
      operationId: DeleteReportScheduleConfigV2
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/ReportScheduleConfigResponse'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "Requested Report Schedule Configuration is not provisioned"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: configId
          in: path
          required: true
          type: string
      tags:
        - TenantProvisioningServiceV2
    
  /v2/threshold-profiles:
    post:
      summary: Create a Threshold Profile for a Tenant.
      operationId: CreateThresholdProfileV2
      consumes:
        - application/vnd.api+json
      produces:
        - application/vnd.api+json
      responses:
        '201':
          description: ''
          schema:
            $ref: '#/definitions/ThresholdProfileResponse'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '409':
          description: "The record is already provisioned"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ThresholdProfileCreateRequest'
      tags:
        - TenantProvisioningServiceV2
    get:
      summary: Retrieve all Threshold Profiles for the specified Tenant.
      operationId: GetAllThresholdProfilesV2
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/ThresholdProfileListResponse'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "There are no Threshold Profiles provisioned"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      tags:
        - TenantProvisioningServiceV2
  /v2/threshold-profiles/{thrPrfId}:
    get:
      summary: Retrieve a Tenant Threshold Profile by id.
      operationId: GetThresholdProfileV2
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/ThresholdProfileResponse'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "The requested Threshold Profile is not provisioned"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: thrPrfId
          in: path
          required: true
          type: string
      tags:
        - TenantProvisioningServiceV2
    patch:
      summary: Update a Tenant Threshold Profile
      operationId: UpdateThresholdProfileV2
      consumes:
        - application/vnd.api+json
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/ThresholdProfileResponse'
        '400':
          description: "Request data does not pass validation"
          schema:
            type: string
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "The requested Threshold Profile is not provisioned"
          schema:
            type: string
        '409':
          description: "Incorrect revision provided in Threshold Profile update request"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: thrPrfId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ThresholdProfileUpdateRequest'
      tags:
        - TenantProvisioningServiceV2
    delete:
      summary: Delete a Tenant Threshold Profile specified by the provided id.
      operationId: DeleteThresholdProfileV2
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/ThresholdProfileResponse'
        '403':
          description: "Requestor does not have authorization to perform this action"
          schema:
            type: string
        '404':
          description: "The requested Threshold Profile is not provisioned"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: thrPrfId
          in: path
          required: true
          type: string
      tags:
        - TenantProvisioningServiceV2
  /v1/auth/users:
    post:
      summary: Create a new User in Skylight AAA
      operationId: CreateUser
      consumes:
        - application/vnd.api+json
      produces:
        - application/vnd.api+json
      responses:
        '201':
          description: "User was successfully created in Skylight AAA"
          schema:
            $ref: '#/definitions/JsonApiAAAUser'
        '403':
          description: "Requestor does not have permission to perform this action"
          schema:
            type: string
        '409':
          description: "Attempt to provision a User that is already provisioned"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/JsonApiAAAUser'
      tags:
        - AuthService
    get:
      summary: Retrieve a list of Users known to Skylight AAA
      operationId: GetAllUsers
      consumes:
        - application/json
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: "Returns a list of known Users to Skylight AAA"
          schema:
            $ref: '#/definitions/JsonApiAAAUserList'
        '403':
          description: "Requestor does not have permission to perform this action"
          schema:
            type: string
        '404':
          description: "No Users provisioned"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      tags:
        - AuthService
  /v1/auth/users/{userId}:
    put:
      summary: Update an existing User in Skylight AAA. Does not update User email or Password.
      operationId: UpdateUser
      consumes:
        - application/vnd.api+json
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: "User was successfully updated in Skylight AAA"
          schema:
            $ref: '#/definitions/JsonApiAAAUser'
        '403':
          description: "Requestor does not have permission to perform this action"
          schema:
            type: string
        '404':
          description: "Attempt to update user but the user does not exist"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/JsonApiAAAUser'
        - name: userId
          in: path
          required: true
          type: integer
          format: int64
          description: "The unique identifier of the User to be updated."
      tags:
        - AuthService
    patch:
      summary: Update properties of an existing User in Skylight AAA. Does not update User email or Password.
      operationId: UpdateUserProperties
      consumes:
        - application/vnd.api+json
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: "User was successfully updated in Skylight AAA"
          schema:
            $ref: '#/definitions/JsonApiAAAUser'
        '400':
          description: "Attempt to update user but there is something wrong with the request data"
          schema:
            type: string
        '403':
          description: "Requestor does not have permission to perform this action"
          schema:
            type: string
        '404':
          description: "Attempt to update user but the user does not exist"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/JsonApiAAAUser'
        - name: userId
          in: path
          required: true
          type: integer
          format: int64
          description: "The unique identifier of the User to be updated."
      tags:
        - AuthService
    get:
      summary: Retrieve a single User by its known Id.
      operationId: GetUser
      consumes:
        - application/json
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: "Returns a known User to Skylight AAA"
          schema:
            $ref: '#/definitions/JsonApiAAAUser'
        '403':
          description: "Requestor does not have permission to perform this action"
          schema:
            type: string
        '404':
          description: "User not found"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: userId
          in: path
          required: true
          type: integer
          format: int64
          description: "The unique identifier of the User to be returned."
      tags:
        - AuthService
    delete:
      summary: Delete a single User by its known Id.
      operationId: DeleteUser
      consumes:
        - application/json
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: "Returns the now deleted User from Skylight AAA"
          schema:
            $ref: '#/definitions/JsonApiAAAUser'
        '403':
          description: "Requestor does not have permission to perform this action"
          schema:
            type: string
        '404':
          description: "User not found"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: userId
          in: path
          required: true
          type: integer
          format: int64
          description: "The unique identifier of the User to be deleted."
      tags:
        - AuthService
  /v1/auth/users/{userId}/password:
    patch:
      summary: Reset a pasword for a User provisioned in Skylight AAA.
      operationId: ResetPassword
      consumes:
        - application/json
      produces:
        - text/plain
      responses:
        '200':
          description: "Returns the onboarding URL for the user"
          schema:
            type: "string"
        '403':
          description: "Requestor does not have permission to perform this action"
          schema:
            type: string
        '404':
          description: "User not found"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: userId
          in: path
          required: true
          type: integer
          format: int64
          description: "The unique identifier of the User to reset the password."
      tags:
        - AuthService
  /v1/auth/users/{userId}/email:
    patch:
      summary: Change the email address of a User provisioned in Skylight AAA.
      operationId: ChangeEmailAddress
      consumes:
        - application/json
      produces:
        - text/plain
      responses:
        '200':
          description: "The email address of the user has been changed"
          schema:
            type: "string"
        '403':
          description: "Requestor does not have permission to perform this action"
          schema:
            type: string
        '404':
          description: "User not found"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: userId
          in: path
          required: true
          type: integer
          format: int64
          description: "The unique identifier of the User which is changing email address"
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/EmailChangeRequest'
      tags:
        - AuthService
  /v1/auth/me:
    patch:
      summary: Update properties of the currently authenticated User in Skylight AAA. Does not update User email or Password.
      operationId: UpdateAuthenticatedUserProperties
      consumes:
        - application/vnd.api+json
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: "User was successfully updated in Skylight AAA"
          schema:
            $ref: '#/definitions/JsonApiAAAUser'
        '400':
          description: "Attempt to update user but there is something wrong with the request data"
          schema:
            type: string
        '401':
          description: "Attempt to update user but there is something wrong with the authentication parameters"
          schema:
            type: string
        '404':
          description: "Attempt to update user but the user does not exist"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/JsonApiAAAUser'
      tags:
        - AuthService
    get:
      summary: Retrieve the currently Authenticated User.
      operationId: GetAuthenticatedUser
      consumes:
        - application/json
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: "Returns the currently Authenticated User"
          schema:
            $ref: '#/definitions/JsonApiAAAUser'
        '401':
          description: "Attempt to fetch a user but there is something wrong with the authentication parameters"
          schema:
            type: string
        '404':
          description: "User not found"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      tags:
        - AuthService
    delete:
      summary: Delete the currently Authenticated User.
      operationId: DeleteAuthenticatedUser
      consumes:
        - application/json
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: "Returns the now deleted User from Skylight AAA"
          schema:
            $ref: '#/definitions/JsonApiAAAUser'
        '401':
          description: "Attempt to delete a user but there is something wrong with the authentication parameters"
          schema:
            type: string
        '404':
          description: "User not found"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      tags:
        - AuthService
  /v1/auth/me/password:
    patch:
      summary: Updates the password of the currently Authenticated User.
      operationId: UpdateAuthenticatedUserPassword
      consumes:
        - application/json
      produces:
        - text/plain
      responses:
        '200':
          description: "Password was successfully updated"
          schema:
            type: string
        '400':
          description: "Attempt to update user but there is something wrong with the request data"
          schema:
            type: string
        '401':
          description: "Attempt to update user password but there is an error evaluating the authentication token"
          schema:
            type: string
        '404':
          description: "Attempt to update user but the user does not exist"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/PasswordChangeRequest'
      tags:
        - AuthService
  /v1/auth/me/email:
    patch:
      summary: Change the email address of the currently Authenticated User.
      operationId: ChangeAuthenticatedUserEmailAddress
      consumes:
        - application/json
      produces:
        - text/plain
      responses:
        '200':
          description: "The email address of the Authenticated User has been changed"
          schema:
            type: "string"
        '400':
          description: "Attempt to update user email address but there is something wrong with the request data"
          schema:
            type: string
        '401':
          description: "Attempt to update user email address but there is an error evaluating the authentication token"
          schema:
            type: string
        '404':
          description: "User not found"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/EmailChangeRequest'
      tags:
        - AuthService
  /v1/onboarding/{onboardingToken}:
    get:
      summary: Retrieve the User mapped to the onboarding token.
      operationId: GetUserByToken
      consumes:
        - application/json
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: "Returns the User mapped to the onboarding token"
          schema:
            $ref: '#/definitions/JsonApiAAAUser'
        '404':
          description: "User not found"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: onboardingToken
          in: path
          required: true
          type: string
          description: "The one-time use token provided to access the password set operation"
      tags:
        - AuthService
  /v1/onboarding/password:
    post:
      summary: Sets the password of a User that has had their password reset.
      operationId: SetUserPassword
      consumes:
        - application/json
      produces:
        - text/plain
      responses:
        '200':
          description: "The password has been set"
          schema:
            type: string
        '400':
          description: "Attempt to update password, but the request has bad data"
          schema:
            type: string
        '404':
          description: "Attempt to update password, but the user no longer exists"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/SetPasswordRequest'
      tags:
        - AuthService
  /v1/auth/login:
    post:
      summary: Login a Skylight User
      operationId: Login
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: "Returns the Authenticated User"
          schema:
            $ref: '#/definitions/JsonApiAAAUser'
        '401':
          description: "Unauthorized access attempt"
          schema:
            type: string
        '404':
          description: "User not found"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: username
          in: formData
          description: Unique identifier of the User requesting access
          required: true
          type: string
        - name: password
          in: formData
          description: Password for the username of the User requesting access
          required: true
          type: string
      tags:
        - AuthService
  /v1/auth/logout:
    post:
      summary: Logout a Skylight User
      operationId: Logout
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: "Successfully logged out a Skylight User"
          schema:
            type: string
        '404':
          description: "Session not found"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      tags:
        - AuthService
  /v1/auth/session:
    get:
      summary: Validate an active Skylight Session and return User data
      operationId: Validate
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: "Returns the Authenticated User"
          schema:
            $ref: '#/definitions/JsonApiAAAUser'
        '401':
          description: "Session not Authorized"
          schema:
            type: string
        '403':
          description: "Session not Valid"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      tags:
        - AuthService
  /v1/auth/validate:
    get:
      summary: Validate an active Skylight Session. Sets headers for proxy requests to have access to user data.
      operationId: ValidateSessionForProxy
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - text/plain
      responses:
        '200':
          description: "Sets Headers X-Forwarded-User-Id, X-Forwarded-User-Username, and X-Forwarded-User-Roles which contain the Id, Username, and Role respectively of the User for the valid session"
          schema:
            type: string
          headers:
            X-Forwarded-User-Id:
              type: string
              description: Unique identifier of the User in Skylight AAA.
            X-Forwarded-User-Username:
              type: string
              description: The Username of the User in Skylight-AAA.
            X-Forwarded-User-Roles:
              type: string
              description: The Roles associated with this User in Skylight-AAA.
            X-Forwarded-Tenant-Id:
              type: string
              description: The TenantId associated with this request in Skylight-AAA.
        '401':
          description: "Session not Authorized"
          schema:
            type: string
        '403':
          description: "Session not Valid"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      tags:
        - AuthService
  /v1/auth/service:
    post:
      summary: Create a new Service in Skylight AAA. This function is only available to Skylight Admin users.
      operationId: CreateService
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - text/plain
      responses:
        '201':
          description: "Service was successfully created in Skylight AAA"
          schema:
            type: string
        '401':
          description: "User creating the Service is not Authorized to do so"
          schema:
            type: string
        '403':
          description: "User does not have authorization to perform this operation"
          schema:
            type: string
        '409':
          description: "Attempt to provision a Service that is already provisioned"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: serviceName
          in: formData
          description: Unique identifier of the Service to be added
          required: true
          type: string
      tags:
        - AuthService
  /v1/onboarding/tenant-info:
    get:
      summary: Retrieves the generic identifyiong information for a customer.
      operationId: GetTenantInfo
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: "Successfully retrieved tenant info"
          schema:
            $ref: '#/definitions/JsonApiTenantInfo'
        '404':
          description: "No branding found for this tenant"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      tags:
        - AuthService
  /v1/onboarding/tenant-identity:
    put:
      summary: Adds tenant identifying information which is retreived in the 'onboarding/tenant-info' call. Operation is only available to Skylight Administrators.
      operationId: SetTenantIdentity
      consumes:
        - application/vnd.api+json
      produces:
        - application/vnd.api+json
      responses:
        '201':
          description: "Successfully updated tenant identifying information"
          schema:
            $ref: '#/definitions/JsonApiTenantInfo'
        '400':
          description: "The request data is not in the proper format"
          schema:
            type: string
        '401':
          description: "User is not authorized to perform this operation"
          schema:
            type: string
        '403':
          description: "Requestor does not have permission to perform this action"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/JsonApiTenantInfo'
      tags:
        - AuthService
  /v1/onboarding/tenant-identity/{subdomain}:
    delete:
      summary: Deletes tenant identifying information. Operation is only available to Skylight Administrators.
      operationId: DeleteTenantIdentity
      consumes:
        - text/plain
      produces:
        - application/vnd.api+json
      responses:
        '200':
          description: "Successfully deleted tenant identifying information"
          schema:
            $ref: '#/definitions/JsonApiTenantInfo'
        '400':
          description: "The request data is not in the proper format"
          schema:
            type: string
        '401':
          description: "User is not authorized to perform this operation"
          schema:
            type: string
        '403':
          description: "Requestor does not have permission to perform this action"
          schema:
            type: string
        '404':
          description: "Tenant identity record not found"
          schema:
            type: string
        '500':
          description: "Unexpected error processing request"
          schema:
            type: string
      parameters:
        - name: subdomain
          in: path
          description: Unique identifier of the Subdomain to delete the tenant mapping
          required: true
          type: string
      tags:
        - AuthService
  
definitions:
  JsonApiTenant:
    type: "object"
    properties:
      data:
        $ref: '#/definitions/Tenant'
  JsonApiTenantList:
    type: "object"
    properties:
      data:
        type: "array"
        items:
           $ref: '#/definitions/Tenant'

  JsonApiIngestionDictionary:
    type: "object"
    properties:
      data:
        type: "object"
        properties:
          type: 
            type: "string"
            enum: [ingestionDictionaries]
          id:
            type: "string"
          attributes:
            type: "object"
            properties:
              _id:
                type: "string"
              _rev:
                type: "string"
              datatype:
                type: "string"
              createdTimestamp:
                type: "integer"
              lastModifiedTimestamp:
                type: "integer"
              metrics:
                type: "object"
                additionalProperties:               
                  type: "object"
                  properties:
                    ui:
                      type: "object"
                      properties:
                        metricGroups:
                          type: "array"
                          items: 
                              type: "string"
                    metricMap:
                      type: "object"
                      additionalProperties:
                        type: "object"
                        properties:
                          monitoredObjectTypes:
                            type: "array"
                            items:
                              type: "object"
                              properties:
                                key:
                                  type: "string"
                                rawMetricId:
                                  type: "string"
                                units:
                                  type: "array"
                                  items:
                                    type: "string"
                                directions:
                                  type: "array"
                                  items:
                                    type: "string"
                          ui:
                            type: "object"
                            properties:
                              group:
                                type: "string"
                              position:
                                type: "string"


  TenantSummary:
    type: "object"
    properties:
      id: 
        type: "string"
      alias:
        type: "string"

  JsonApiValidTypes:
    type: "object"
    properties:
      data:
        $ref: '#/definitions/ValidTypes'
  ValidTypes:
    type: "object"
    properties:
      type: 
        type: "string"
        enum: [validTypes]
      id:
        type: "string"
      attributes:
        $ref: '#/definitions/ValidTypesAttr'
  ValidTypesAttr:
    type: "object"
    properties:
      _id:
        type: "string"
      _rev:
        type: "string"
      datatype:
        type: "string"
      monitoredObjectTypes:
        type: "object"
        additionalProperties:
          type: "string"
      monitoredObjectDeviceTypes:
        type: "object"
        additionalProperties:
          type: "string"
      createdTimestamp:
        type: "integer"
      lastModifiedTimestamp:
        type: "integer"

  JsonApiRelationship:
    type: "object"
    properties:
      data: 
        type: "array"
        items:
          $ref: '#/definitions/JsonApiRelationshipData'
  JsonApiSingleRelationship:
    type: "object"
    properties:
      data: 
        $ref: '#/definitions/JsonApiRelationshipData'

          
  JsonApiRelationshipData:
    type: "object"
    properties:
      type: 
        type: "string"
      id:
        type: "string"

  JsonApiTenantConnectorConfig:
    type: "object"
    properties:
      data:
        $ref: '#/definitions/TenantConnectorConfig'
  JsonApiTenantConnectorInstance:
    type: "object"
    properties:
      data:
        $ref: '#/definitions/TenantConnectorInstance'
  JsonApiTenantConnectorConfigList:
    type: "object"
    properties:
      data:
        type: "array"
        items:
           $ref: '#/definitions/TenantConnectorConfig'
  JsonApiTenantConnectorInstanceList:
    type: "object"
    properties:
      data:
        type: "array"
        items:
           $ref: '#/definitions/TenantConnectorInstance'
  TenantConnectorConfig:
    type: "object"
    properties:
      type: 
        type: "string"
        enum: [connectorConfigs]
      id:
        type: "string"
      attributes:
        $ref: '#/definitions/TenantConnectorConfigAttr'
  TenantConnectorConfigAttr:
    type: "object"
    properties:
      _id:
        type: "string"
      _rev:
        type: "string"
      datatype:
        type: "string"
      tenantId:
        type: "string"
      name:
        type: "string"
      url: 
        type: "string"
      port:
        type: "integer"
      pollingFrequency:
        type: "integer"
      username:
        type: "string"
      password:
        type: "string"
      exportGroup:
        type: "string"
      datahubHeartbeatFrequency:
        type: "integer"
      datahubConnectionRetryFrequency:
        type: "integer"
      type:
        type: "string"
      createdTimestamp:
        type: "integer"
      lastModifiedTimestamp:
        type: "integer"
  TenantConnectorInstance:
    type: "object"
    properties:
      type: 
        type: "string"
        enum: [connectorInstances]
      id:
        type: "string"
      attributes:
        $ref: '#/definitions/TenantConnectorInstanceAttr'
  TenantConnectorInstanceAttr:
    type: "object"
    properties:
      _id:
        type: "string"
      _rev:
        type: "string"
      datatype:
        type: "string"
      tenantId:
        type: "string"
      status:
        type: "string"
      hostname: 
        type: "string"
      createdTimestamp:
        type: "integer"
      lastModifiedTimestamp:
        type: "integer"
  JsonApiTenantDomain:
    type: "object"
    properties:
      data:
        $ref: '#/definitions/TenantDomain'
  JsonApiTenantDomainList:
    type: "object"
    properties:
      data:
        type: "array"
        items:
           $ref: '#/definitions/TenantDomain'
  TenantDomain:
    type: "object"
    properties:
      type: 
        type: "string"
        enum: [domains]
      id:
        type: "string"
      attributes:
        $ref: '#/definitions/TenantDomainAttr'

  TenantDomainAttr:
    type: "object"
    properties:
      _id:
        type: "string"
      _rev:
        type: "string"
      datatype:
        type: "string"
      tenantId:
        type: "string"
      name:
        type: "string"
      color: 
        type: "string"
      createdTimestamp:
        type: "integer"
      lastModifiedTimestamp:
        type: "integer"

  JsonApiTenantMonitoredObject:
    type: "object"
    properties:
      data:
        $ref: '#/definitions/TenantMonitoredObject'
  JsonApiTenantMonitoredObjectList:
    type: "object"
    properties:
      data:
        type: "array"
        items:
           $ref: '#/definitions/TenantMonitoredObject'
  TenantMonitoredObject:
    type: "object"
    properties:
      type: 
        type: "string"
        enum: [monitoredObjects]
      id:
        type: "string"
      attributes:
        $ref: '#/definitions/TenantMonitoredObjectAttr'
      relationships:
        $ref: '#/definitions/TenantMonitoredObjectRelationships'
  TenantMonitoredObjectAttr:
    type: "object"
    properties:
      _id:
        type: "string"
      _rev:
        type: "string"
      datatype:
        type: "string"
      tenantId:
        type: "string"
      objectId:
        type: "string"
      actuatorName: 
        type: "string"
      actuatorType: 
        type: "string"
        enum: [unknown, accedian-nid, accedian-vnid]
      reflectorName: 
        type: "string"
      reflectorType: 
        type: "string"
        enum: [unknown, accedian-nid, accedian-vnid]
      objectName: 
        type: "string"
      objectType: 
        type: "string"
        enum: [unknown, flowmeter, twamp-pe, twamp-sf, twamp-sl]
      meta:
        type: "object"
        additionalProperties:
          type: "string"
      createdTimestamp:
        type: "integer"
      lastModifiedTimestamp:
        type: "integer"
  TenantMonitoredObjectRelationships:
    type: "object"
    properties:
      domains:
        $ref: '#/definitions/JsonApiRelationship'

  BulkMonitoredObjectRequest:
    type: array
    items:
      $ref: '#/definitions/CreateTenantMonitoredObjectRequest'

  CreateTenantMonitoredObjectRequest:
    type: "object"
    properties:
      _id:
        type: "string"
      _rev:
        type: "string"
      tenantId:
        type: "string"
      objectId:
        type: "string"
      actuatorName: 
        type: "string"
      actuatorType: 
        type: "string"
        enum: [unknown, accedian-nid, accedian-vnid]
      reflectorName: 
        type: "string"
      reflectorType: 
        type: "string"
        enum: [unknown, accedian-nid, accedian-vnid]
      objectName: 
        type: "string"
      objectType: 
        type: "string"
        enum: [unknown, flowmeter, twamp-pe, twamp-sf, twamp-sl]
      meta:
        type: "object"
        additionalProperties:
          type: "string"
        example:
          "region": "paris"
          "wgs87_x": "-45.7123912"
          "wgs87_y": "-74.2130912"
      domainSet:
        type: "array"
        items: 
          type: "string"

  BulkMonitoredObjectMetaRequest:
    type: "object"
    properties:
      items:
        type: array
        items:
          $ref: '#/definitions/MonitoredObjectMetadataItem'

  MonitoredObjectMetadataItem:
    type: "object"
    properties:
      keyName:
        type: "string"
      metadataKey:
        type: "string"
      metadata:
        type: "object"
        additionalProperties: 
          type: "string"

  MonitoredObjectCountByDomainRequest:
    type: "object"
    properties:
      byCount: 
        type: "boolean"
      domainSet:
        type: "array"
        items: 
          type: "string"
  MonitoredObjectCountByDomainResponse:
    type: "object"
    properties:
      domainToMonitoredObjectCountMap:
        type: "object"
        additionalProperties:
          type: "integer"
      domainToMonitoredObjectSetMap:
        type: "object"
        additionalProperties:
          type: "array"
          items: 
            type: "string"

  BulkOperationResponse:
    type: "array"
    items:
      $ref: '#/definitions/BulkOperationResult'

  BulkOperationResult:
    type: "object"
    properties:
      ok:
        type: "boolean"
      id:
        type: "string"
      rev:
        type: "string"
      error:
        type: "string"
      reason:
        type: "string"
    required:
      - ok
  JsonApiTenantIngestionProfile:
    type: "object"
    properties:
      data:
        $ref: '#/definitions/TenantIngestionProfile'
  TenantIngestionProfile:
    type: "object"
    properties:
      type: 
        type: "string"
        enum: [ingestionProfiles]
      id:
        type: "string"
      attributes:
        $ref: '#/definitions/TenantIngestionProfileAttr'
  TenantIngestionProfileAttr:
    type: "object"
    properties:
      tenantId:
        type: "string"
      _id:
        type: "string"
      _rev:
        type: "string"
      datatype:
        type: "string"
      metrics:
        $ref: '#/definitions/TenantIngestionProfileVendorMap'
      createdTimestamp:
        type: "integer"
      lastModifiedTimestamp:
        type: "integer"
  TenantIngestionProfileVendorMap:
    type: "object"
    properties:
      vendorMap:
        type: "object"
        additionalProperties:
          $ref: '#/definitions/TenantIngestionProfileVendorMapMonitoredObjectTypeMap'
  TenantIngestionProfileVendorMapMonitoredObjectTypeMap:
    type: "object"
    properties:
      monitoredObjectTypeMap:
        type: "object"
        additionalProperties:
          $ref: '#/definitions/TenantIngestionProfileVendorMapMonitoredObjectTypeMapMetricMap'
  TenantIngestionProfileVendorMapMonitoredObjectTypeMapMetricMap:
    type: "object"
    additionalProperties:
      type: "boolean"
  JsonApiTenantReportScheduleConfig:
    type: "object"
    properties:
      data:
        $ref: '#/definitions/TenantReportScheduleConfig'
  JsonApiTenantReportScheduleConfigList:
    type: "object"
    properties:
      data:
        type: "array"
        items:
           $ref: '#/definitions/TenantReportScheduleConfig'
  TenantReportScheduleConfig:
    type: "object"
    properties:
      type: 
        type: "string"
        enum: [reportScheduleConfigs]
      id:
        type: "string"
      attributes:
        $ref: '#/definitions/TenantReportScheduleConfigAttr'
  TenantReportScheduleConfigAttr:
    type: "object"
    properties:
      _id:
        type: "string"
      _rev:
        type: "string"
      datatype:
        type: "string"
      tenantId:
        type: "string"
      timeRangeDuration: 
        type: "string"
      meta: 
        type: "object"
        additionalProperties:
          type: "array"
          items:
            type: "string"
      thresholdProfile: 
        type: "string"
      granularity: 
        type: "string"
      timeout: 
        type: "integer"
      timezone: 
        type: "string"
      name: 
        type: "string"
      reportType:
        type: "string"
      minute: 
        type: "string"
      hour: 
        type: "string"
      dayMonth: 
        type: "string"
      month: 
        type: "string"
      dayWeek: 
        type: "string"
      active:
        type: "boolean"
      createdTimestamp:
        type: "integer"
      lastModifiedTimestamp:
        type: "integer"
  JsonApiTenantThresholdProfile:
    type: "object"
    properties:
      data:
        $ref: '#/definitions/TenantThresholdProfile'
  JsonApiTenantThresholdProfileList:
    type: "object"
    properties:
      data:
        type: "array"
        items:
           $ref: '#/definitions/TenantThresholdProfile'
  TenantThresholdProfile:
    type: "object"
    properties:
      type: 
        type: "string"
        enum: [thresholdProfiles]
      id:
        type: "string"
      attributes:
        $ref: '#/definitions/TenantThresholdProfileAttr'
  TenantThresholdProfileAttr:
    type: "object"
    properties:
      tenantId:
        type: "string"
      _id:
        type: "string"
      _rev:
        type: "string"
      datatype:
        type: "string"
      name:
        type: "string"
      thresholds:
        $ref: '#/definitions/TenantThresholdProfileVendorMap'
      createdTimestamp:
        type: "integer"
      lastModifiedTimestamp:
        type: "integer"
  TenantThresholdProfileVendorMap:
    type: "object"
    properties:
      vendorMap:
        type: "object"
        additionalProperties:
          $ref: '#/definitions/TenantThresholdProfileMetric'
  TenantThresholdProfileMetric:
    type: "object"
    properties:
      metricMap:
        type: "object"
        additionalProperties:
          $ref: '#/definitions/TenantThresholdProfileUIEventAttrMap'
      monitoredObjectTypeMap:
        type: "object"
        additionalProperties:
          $ref: '#/definitions/TenantThresholdProfileMonitoredObjectTypeMapMetricMap'
  TenantThresholdProfileUIEventAttrMap:
    type: "object"
    properties:
      eventAttrMap:
        type: "object"
        additionalProperties:
          type: "string"
  TenantThresholdProfileMonitoredObjectTypeMapMetricMap:
    type: "object"
    properties:
      metricMap:
        type: "object"
        additionalProperties:
          $ref: '#/definitions/TenantThresholdProfileMonitoredObjectTypeMapMetricMapDirectionMap'
  TenantThresholdProfileMonitoredObjectTypeMapMetricMapDirectionMap:
    type: "object"
    properties:
      directionMap:
        type: "object"
        additionalProperties:
          $ref: '#/definitions/TenantThresholdProfileMonitoredObjectTypeMapMetricMapDirectionMapEventMap'
  TenantThresholdProfileMonitoredObjectTypeMapMetricMapDirectionMapEventMap:
    type: "object"
    properties:
      eventMap:
        type: "object"
        additionalProperties:
          $ref: '#/definitions/TenantThresholdProfileMonitoredObjectTypeMapMetricMapDirectionMapEventMapEventAttrMap'
  TenantThresholdProfileMonitoredObjectTypeMapMetricMapDirectionMapEventMapEventAttrMap:
    type: "object"
    properties:
      eventAttrMap:
        type: "object"
        additionalProperties:
          type: "string"

  JsonApiTenantMetadata:
    type: "object"
    properties:
      data:
        $ref: '#/definitions/TenantMetadata'
  TenantMetadata:
    type: "object"
    properties:
      type: 
        type: "string"
        enum: [tenantMetadata]
      id:
        type: "string"
      attributes:
        $ref: '#/definitions/TenantMetadataAttr'
      relationships:
        $ref: '#/definitions/TenantMetadataRelationships'
  TenantMetadataAttr:
    type: "object"
    properties:
      tenantId:
        type: "string"
      _id:
        type: "string"
      _rev:
        type: "string"
      datatype:
        type: "string"
      tenantName:
        type: "string"
      createdTimestamp:
        type: "integer"
      lastModifiedTimestamp:
        type: "integer"
  TenantMetadataRelationships:
    type: "object"
    properties:
      defaultThresholdProfile:
        $ref: '#/definitions/JsonApiRelationship'
  TopNMetricsAPIRequestObject:
    type: object
    required:
      - tenantId
      - interval
      - aggregator
      - metric
    properties:
      tenantId:
        type: string
        description: the tenant identifier
        example: 8501f157-b7f5-41c3-aaba-c75e0566c54c
      meta:
        type: object
        description: set of domains identifiers to use for filtering
        additionalProperties:
          type: string
      monitoredObjects:
        type: array
        description: set of monitored objects identifiers to use for filtering
        items:
          type: string
        example: 
          - 7c3d3280-628c-c778-92ec-4e9b83fcbb4d
          - 41f1b537-b7f5-41c3-a1b2-a75e1536c54e
      interval:
        type: string
        description: ISO-8601 interval
        example: 2018-04-08T14:00:00/2018-04-09T15:00:00
      timeout:
        type: integer
        description: query timeout in milliseconds
        example: 30000
      aggregator:
        type: string
        description: The type of aggregation (avg/min/max)
        example: "avg"
      numResults:
        type: integer
        description: Number of results to return
      metric:
        $ref: '#/definitions/MetricIdentifier'
      metricsView:
        type: array
        items:
          $ref: '#/definitions/MetricViewObject'
  MetricBucketObject:
    type: object
    properties:
      index:
        type: string
      lower:
        type: number
        format: float
      upper:
        type: number
        format: float
  MetricBucketRequest:
    type: object
    properties:
      vendor:
        type: string
      objectType:
        type: string
      direction:
        type: string
      name:
        type: string
      buckets:
        type: array
        items:
          $ref: '#/definitions/MetricBucketObject'
  HistogramRequestObject:
    type: object
    required:
      - tenantId
      - interval
      - meta
    properties:
      tenantId:
        type: string
        description: the tenant identifier
        example: 8501f157-b7f5-41c3-aaba-c75e0566c54c
      meta:
        type: object
        description: set of meta keys and list of values for the purposes of filtering
        additionalProperties:
          type: array
          items:
            type: string
      interval:
        type: string
        description: ISO-8601 interval
        example: 2018-04-08T14:00:00/2018-04-09T15:00:00
      timeout:
        type: integer
        description: query timeout in milliseconds
        example: 30000
      granularity:
        type: string
        description: the granularity for timeseries in ISO-8601 duration format, or ALL
        example: PT1H
      metrics:
        type: array
        items:
          $ref: '#/definitions/MetricBucketRequest'
  MetricViewObject:
    type: object
    required:
      - metric
      - aggregator 
      - name
    properties:
      metric:
        type: string
        example: delayP95_max
      aggregator:
        type: string
        example: min/max/sum/
      name:
        type: string
        example: delayP95

  AggregateMetricsAPIRequestObject:
    type: object
    required:
      - tenantId
      - interval
      - aggregation
      - metrics
    properties:
      tenantId:
        type: string
        description: the tenant identifier
        example: 8501f157-b7f5-41c3-aaba-c75e0566c54c
      meta:
        type: object
        description: set of meta keys and list of values for the purposes of filtering
        additionalProperties:
          type: array
          items:
            type: string
      interval:
        type: string
        description: ISO-8601 interval
        example: 2018-04-08T14:00:00/2018-04-09T15:00:00
      granularity:
        type: string
        description: the granularity for timeseries in ISO-8601 duration format, or ALL
        example: PT1H
      timeout:
        type: integer
        description: query timeout in milliseconds
        example: 30000
      aggregation:
        type: object
        description: the aggregation function
        properties:
          name:
            type: string
            example: avg
      metrics:
        type: array
        items:
          $ref: '#/definitions/MetricIdentifier'

  ThresholdCrossingAPIRequestObject:
    type: object
    required:
      - tenantId
      - interval
    properties:
      tenantId:
        type: string
        description: the tenant identifier
        example: 8501f157-b7f5-41c3-aaba-c75e0566c54c
      meta:
        type: object
        description: set of meta keys and list of values for the purposes of filtering
        additionalProperties:
          type: array
          items:
            type: string
      interval:
        type: string
        description: ISO-8601 interval
        example: 2018-04-08T14:00:00/2018-04-09T15:00:00
      granularity:
        type: string
        description: the granularity for timeseries in ISO-8601 duration format, or ALL
        example: PT1H
      thresholdProfileId:
        type: string
        description: ID of the threshold profile that is used to select metrics and events
        example: d1988d68-7444-4098-91eb-bd5a987397cb
      timeout:
        type: integer
        description: query timeout in milliseconds
        example: 30000
      metrics:
        type: array
        description: limits the results to include only metrics in the whitelist
        items:
          $ref: '#/definitions/MetricIdentifier'
  ThresholdCrossingByMOTopNAPIRequestObject:
    type: object
    required:
      - tenantId
      - interval
    properties:
      tenantId:
        type: string
        description: the tenant identifier
        example: 8501f157-b7f5-41c3-aaba-c75e0566c54c
      interval:
        type: string
        description: ISO-8601 interval
        example: 2018-04-08T14:00:00/2018-04-09T15:00:00
      meta:
        type: object
        description: set of domains identifiers to use for filtering
        additionalProperties:
          type: array
          items:
            type: string
      thresholdProfileId:
        type: string
        description: ID of the threshold profile that is used to select metrics and events
        example: d1988d68-7444-4098-91eb-bd5a987397cb
      granularity:
        type: string
        description: the granularity for timeseries in ISO-8601 duration format, or ALL
        example: PT1H
      timeout:
        type: integer
        description: query timeout in milliseconds
        example: 30000
      numResults:
        type: integer
        format: int32
        description: query timeout in milliseconds
        example: 30000
      metric:
        $ref: '#/definitions/MetricIdentifier'
        description: the metric to be used for the top N query
  SLAReportRequestObject:
    type: object
    required:
      - tenantId
      - interval
    properties:
      tenantId:
        type: string
        description: the tenant identifier
        example: 8501f157-b7f5-41c3-aaba-c75e0566c54c
      interval:
        type: string
        description: ISO-8601 interval
        example: 2018-04-08T14:00:00/2018-04-09T15:00:00
      meta:
        type: object
        description: set of domains identifiers to use for filtering
        additionalProperties:
          type: array
          items:
            type: string
      thresholdProfileId:
        type: string
        description: ID of the threshold profile that is used to select metrics and events
        example: d1988d68-7444-4098-91eb-bd5a987397cb
      granularity:
        type: string
        description: the granularity for timeseries in ISO-8601 duration format, or ALL
        example: PT1H
      timeout:
        type: integer
        description: query timeout in milliseconds
        example: 30000
      timezone: 
        type: "string"
        description: timezone used for time-based buckets (e.g. hour of day buckets) see http://joda-time.sourceforge.net/timezones.html

  MetricResultsResponseObject:
    type: object
    properties:
      results:
        type: array
        items: 
          type: object

  # Here down are Metrics Service object definitions that are currently carried over from the 
  # Protobuf definitions we were using. Until we clean this up with the jsonapi implementation
  # this will remain
  gathergrpcJSONAPIObject:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/gathergrpcData'
      errors:
        type: array
        items:
          $ref: '#/definitions/gathergrpcError'
      metadata:
        type: object
        additionalProperties:
          type: string
      jsonapi:
        type: object
        additionalProperties:
          type: string
      links:
        $ref: '#/definitions/gathergrpcLinks'
      included:
        type: array
        items:
          $ref: '#/definitions/gathergrpcResource'
  gathergrpcLinks:
    type: object
    properties:
      related:
        $ref: '#/definitions/LinksRelated'
      self:
        type: string
      first:
        type: string
      next:
        type: string
      prev:
        type: string
      last:
        type: string
      about:
        type: string
      article:
        type: string
    description: |-
      Links technically allow any valid json string as a key,
      we obviously can't do this, so we have to stick to the following.
  LinksRelated:
    type: object
    properties:
      href:
        type: string
      metadata:
        type: object
        additionalProperties:
          type: string
  gathergrpcResource:
    type: object
    properties:
      id:
        type: string
      type:
        type: string
      attributes:
        type: object
        additionalProperties:
          type: string
      links:
        $ref: '#/definitions/gathergrpcLinks'
      metadata:
        type: object
        additionalProperties:
          type: string
      relationships:
        $ref: '#/definitions/gathergrpcRelationships'
  gathergrpcRelationships:
    type: object
    properties:
      links:
        $ref: '#/definitions/gathergrpcLinks'
      data:
        $ref: '#/definitions/protobufAny'
      metadata:
        type: object
        additionalProperties:
          type: string
  protobufAny:
    type: object
    properties:
      type_url:
        type: string
        description: |-
          A URL/resource name whose content describes the type of the
          serialized protocol buffer message.

          For URLs which use the scheme `http`, `https`, or no scheme, the
          following restrictions and interpretations apply:

          * If no scheme is provided, `https` is assumed.
          * The last segment of the URL's path must represent the fully
            qualified name of the type (as in `path/google.protobuf.Duration`).
            The name should be in a canonical form (e.g., leading "." is
            not accepted).
          * An HTTP GET on the URL must yield a [google.protobuf.Type][]
            value in binary format, or produce an error.
          * Applications are allowed to cache lookup results based on the
            URL, or have them precompiled into a binary to avoid any
            lookup. Therefore, binary compatibility needs to be preserved
            on changes to types. (Use versioned type names to manage
            breaking changes.)

          Schemes other than `http`, `https` (or the empty scheme) might be
          used with implementation et semantics.
      value:
        type: string
        format: byte
        description: Must be a valid serialized protocol buffer of the above specified type.
    description: |-
      `Any` contains an arbitrary serialized protocol buffer message along with a
      URL that describes the type of the serialized message.

      Protobuf library provides support to pack/unpack Any values in the form
      of utility functions or additional generated methods of the Any type.

      Example 1: Pack and unpack a message in C++.

          Foo foo = ...;
          Any any;
          any.PackFrom(foo);
          ...
          if (any.UnpackTo(&foo)) {
            ...
          }

      Example 2: Pack and unpack a message in Java.

          Foo foo = ...;
          Any any = Any.pack(foo);
          ...
          if (any.is(Foo.class)) {
            foo = any.unpack(Foo.class);
          }

       Example 3: Pack and unpack a message in Python.

          foo = Foo(...)
          any = Any()
          any.Pack(foo)
          ...
          if any.Is(Foo.DESCRIPTOR):
            any.Unpack(foo)
            ...

       Example 4: Pack and unpack a message in Go

           foo := &pb.Foo{...}
           any, err := ptypes.MarshalAny(foo)
           ...
           foo := &pb.Foo{}
           if err := ptypes.UnmarshalAny(any, foo); err != nil {
             ...
           }

      The pack methods provided by protobuf library will by default use
      'type.googleapis.com/full.type.name' as the type URL and the unpack
      methods only use the fully qualified type name after the last '/'
      in the type URL, for example "foo.bar.com/x/y.z" will yield type
      name "y.z".


      JSON
      ====
      The JSON representation of an `Any` value uses the regular
      representation of the deserialized, embedded message, with an
      additional field `@type` which contains the type URL. Example:

          package google.profile;
          message Person {
            string first_name = 1;
            string last_name = 2;
          }

          {
            "@type": "type.googleapis.com/google.profile.Person",
            "firstName": <string>,
            "lastName": <string>
          }

      If the embedded message type is well-known and has a custom JSON
      representation, that representation will be embedded adding a field
      `value` which holds the custom JSON in addition to the `@type`
      field. Example (for message [google.protobuf.Duration][]):

          {
            "@type": "type.googleapis.com/google.protobuf.Duration",
            "value": "1.212s"
          }
  gathergrpcData:
    type: object
    properties:
      id:
        type: string
      type:
        type: string
      attributes:
        $ref: '#/definitions/protobufAny'
  gathergrpcError:
    type: object
    properties:
      id:
        type: string
      links:
        $ref: '#/definitions/gathergrpcLinks'
      status:
        type: string
      code:
        type: string
      title:
        type: string
      detail:
        type: string
      metadata:
        type: object
        additionalProperties:
          type: string
      source:
        type: object
        additionalProperties:
          type: string
  gathergrpcJSONAPIObjectList:
    type: "object"
    properties:
      data:
        type: "array"
        items:
           $ref: '#/definitions/gathergrpcJSONAPIObject'
  TenantCreationRequest:
    type: "object"
    required: ["data"]
    description: "The request used when creating a new Tenant in Datahub"
    properties:
      data:
        $ref: '#/definitions/TenantCreationObject'

  TenantUpdateRequest:
    type: "object"
    required: ["data"]
    description: "The request used when updating an existing Tenant in Datahub"
    properties:
      data:
        $ref: '#/definitions/TenantUpdateObject'

  TenantResponse:
    type: "object"
    required: ["data"]
    description: "The response returned for a single Tenant from Datahub"
    properties:
      data:
        $ref: '#/definitions/Tenant'
  
  TenantListResponse:
    type: "object"
    required: ["data"]
    description: "The response returned for multiple Tenants from Datahub"
    properties:
      data:
        type: "array"
        items:
          $ref: '#/definitions/Tenant'

  TenantCreationObject:
    type: "object"
    required: ["type", "attributes"]
    properties:
      type: 
        type: "string"
        enum: [tenants]
      id:
        type: "string"
      attributes:
        type: "object"
        required: ["name", "urlSubdomain", "state"]
        properties:
          name:
            type: "string"
            description: "The name of the Tenant"
          urlSubdomain:
            type: "string"
            description: "The subdomain used in the URL for accessing the Tenant's portal in Datahub"
          state:
            type: "string"
            enum: [USER_UNKNOWN, INVITED, ACTIVE, SUSPENDED, PENDING_DELETE]
            description: "The current state of the Tenant"

  TenantUpdateObject:
    type: "object"
    required: ["type", "id", "attributes"]
    properties:
      type: 
        type: "string"
        enum: [tenants]
      id:
        type: "string"
      attributes:
        type: "object"
        required: ["_rev"]
        properties:
          _rev:
            type: "string"
            description: "The current version of this record. Used to guarantee updates are made in the proper order"
          name:
            type: "string"
            description: "The name of the Tenant"
          urlSubdomain:
            type: "string"
            description: "The subdomain used in the URL for accessing the Tenant's portal in Datahub"
          state:
            type: "string"
            enum: [USER_UNKNOWN, INVITED, ACTIVE, SUSPENDED, PENDING_DELETE]
            description: "The current state of the Tenant"
  
  Tenant:
    type: "object"
    required: ["type", "id", "attributes"]
    properties:
      type: 
        type: "string"
        enum: [tenants]
      id:
        type: "string"
      attributes:
        type: "object"
        required: ["_rev", "name", "urlSubdomain", "state", "createdTimestamp", "lastModifiedTimestamp"]
        properties:
          _rev:
            type: "string"
            description: "The current version of this record. Used to guarantee updates are made in the proper order"
          name:
            type: "string"
            description: "The name of the Tenant"
          urlSubdomain:
            type: "string"
            description: "The subdomain used in the URL for accessing the Tenant's portal in Datahub"
          state:
            type: "string"
            enum: [USER_UNKNOWN, INVITED, ACTIVE, SUSPENDED, PENDING_DELETE]
            description: "The current state of the Tenant"
          createdTimestamp:
            type: "integer"
            format: "int64"
            description: "The timestamp at which this record was created in Datahub"
          lastModifiedTimestamp:
            type: "integer"
            format: "int64"
            description: "The timestamp of the last update to this record in Datahub"

  IngestionDictionaryListResponse:
    type: "object"
    description: "Provides a listing of all metric values supported by Datahub"
    properties:
      data:
        type: "array"
        items:
          type: "object"
          properties:
            type: 
              type: "string"
              enum: [ingestionDictionaries]
            id:
              type: "string"
            attributes:
              type: "object"
              required: ["metrics"]
              properties:
                metricGroups:
                  description: "This property will be deprecated in the next API version."
                  type: "array"
                  items:
                    type: "object"
                    properties:
                      vendor:
                        type: "string"
                      groups:
                        type: "array"
                        items:
                            type: "string"
                metricList:
                  description: "Provides an array of objects that describe the possible metric combinations that may be retained by Datahub"
                  type: "array"
                  items:
                    type: "object"
                    description: "Describes a single Metric available in Datahub"
                    properties:
                      vendor:
                        description: "The name of the Vendor from which this Metric originates"
                        type: "string"
                      monitoredObjectType:
                        description: "The name of the type of Monitored Object for which this Metric is applicable"
                        type: "string"
                      metric:
                        description: "The name of the Metric"
                        type: "string"
                      rawMetricId:
                        description: "The name of the Metric as it is reported during measurments"
                        type: "string"
                      directions:
                        type: "array"
                        items:
                          type: "string"
                        description: "Describes the possible directions of the test (i.e. actuator to reflector) versus another (i.e. round trip)"
                      dimensions:
                        description: "Provides data properties by which the Metric may be filtered and/or aggregated"
                        type: "object"
                        additionalProperties:
                          type: "array"
                          items:
                            type: "string"
                      unit:
                        description: "The unit of measurement used when capturing the value for this Metric"
                        type: "string"
                      ui:
                        type: "object"
                        description: "This property will be deprecated in the next API version."
                        properties:
                          group:
                            type: "string"
                          position:
                            type: "string"
                metrics:
                  description: "Metrics will be deprecated in the next API version. Please use the 'metricList' property instead"
                  type: "object"
                  additionalProperties:               
                    type: "object"
                    properties:
                      ui:
                        type: "object"
                        properties:
                          metricGroups:
                            type: "array"
                            items: 
                                type: "string"
                      metricMap:
                        type: "object"
                        additionalProperties:
                          type: "object"
                          properties:
                            monitoredObjectTypes:
                              type: "array"
                              items:
                                type: "object"
                                properties:
                                  key:
                                    type: "string"
                                  rawMetricId:
                                    type: "string"
                                  units:
                                    type: "array"
                                    items:
                                      type: "string"
                                  directions:
                                    type: "array"
                                    items:
                                      type: "string"
                            ui:
                              type: "object"
                              properties:
                                group:
                                  type: "string"
                                position:
                                  type: "string"

  ValidTypesListResponse:
    type: "object"
    description: "Provides known values mappings for Datahub"
    properties:
      data:
        type: "array"
        items:
          type: "object"
          properties:
            type: 
              type: "string"
              enum: [validTypes]
            id:
              type: "string"
            attributes:
              type: "object"
              required: ["monitoredObjectTypes", "monitoredObjectDeviceTypes"]
              properties:
                monitoredObjectTypes:
                  type: "object"
                  description: "Lists the known Monitored Object Types as well as known alias values for Monitored Object types"
                  additionalProperties:
                    type: "string"
                monitoredObjectDeviceTypes:
                  type: "object"
                  description: "Lists the known Monitored Object Device Types as well as known alias values for Monitored Object Device types"
                  additionalProperties:
                    type: "string"

  TenantSummaryResponse:
    type: "object"
    description: "Contains the mapping of an alias to a Tenant ID"
    properties:
      data:
        type: "object"
        properties:
          type: 
            type: "string"
            enum: [tenantSummaries]
          id:
            type: "string"
          attributes:
            type: "object"
            properties:
              id: 
                type: "string"
                description: "The unique identifier of the Tenant in Datahub"
              alias:
                type: "string"
                description: "A known alias for the Tenant in Datahub"
  BrandingCreateRequest:
    type: "object"
    required: ["data"]
    properties:
      data:
        type: "object"
        required: ["type", "attributes"]
        properties:
          type: 
            type: "string"
            enum: [brandings]
          id:
            type: "string"
          attributes:
            type: "object"
            properties:
              color:
                type: "string"
                description: "The primary colour used for the Datahub UI"
              logo: 
                $ref: '#/definitions/BrandingLogo'
                description: "The image used for the Branding logo"
              
  BrandingUpdateRequest:
    type: "object"
    required: ["data"]
    properties:
      data:
        type: "object"
        required: ["type", "attributes", "id"]
        properties:
          type: 
            type: "string"
            enum: [brandings]
          id:
            type: "string"
          attributes:
            type: "object"
            required: ["_rev"]
            properties:
              _rev:
                type: "string"
                description: "Value used to ensure updates to this object are handled in order."
              color:
                type: "string"
                description: "The primary colour used for the Datahub UI"
              logo: 
                $ref: '#/definitions/BrandingLogo'
                description: "The image used for the Branding logo"
  
  BrandingResponse:
    type: "object"
    required: ["data"]
    properties:
      data:
        $ref: '#/definitions/Branding'
  BrandingListResponse:
    type: "object"
    required: ["data"]
    properties:
      data:
        type: "array"
        items:
           $ref: '#/definitions/Branding'
  
  Branding:
    type: "object"
    required: ["type", "id", "attributes"]
    properties:
      type: 
        type: "string"
        enum: [brandings]
      id:
        type: "string"
      attributes:
        type: "object"
        required: ["_rev", "datatype", "color", "logo", "createdTimestamp", "lastModifiedTimestamp"]
        properties:
          _rev:
            type: "string"
            description: "Value used to ensure updates to this object are handled in order."
          datatype:
            type: "string"
          tenantId:
            type: "string"
          color:
            description: "The primary colour used for the Datahub UI"
            type: "string"
          logo: 
            description: "The image used for the Branding logo"
            $ref: '#/definitions/BrandingLogo'
          createdTimestamp:
            type: "integer"
            format: "int64"
            description: "Time since epoch at which this object was instantiated."
          lastModifiedTimestamp:
            type: "integer"
            format: "int64"
            description: "Time since epoch at which this object was last altered."

  BrandingLogo:
    type: "object"
    description: "Describes the information used to display the branding logo image on the Datahub UI"
    properties: 
      file: 
        type: "object"
        properties:
          content_type:
            type: "string"
            description: "Describes the media type of the document stored"
          data:
            type: "string"
            description: "Contains the image data for the uploaded branding logo"

  LocaleCreateRequest:
    type: "object"
    required: ["data"]
    properties:
      data:
        type: "object"
        required: ["type", "attributes"]
        properties:
          type: 
            type: "string"
            enum: [locales]
          id:
            type: "string"
          attributes:
            type: "object"
            required: ["intl", "moment", "timezone"]
            properties:
              intl:
                type: "string"
                description: "The short-form code for the internationalization region"
              moment:
                type: "string"
              timezone:
                type: "string"
                description: "Timezone used to coordinate timestamps for the specified region"
              
  LocaleUpdateRequest:
    type: "object"
    required: ["data"]
    properties:
      data:
        type: "object"
        required: ["type", "attributes", "id"]
        properties:
          type: 
            type: "string"
            enum: [locales]
          id:
            type: "string"
          attributes:
            type: "object"
            required: ["_rev"]
            properties:
              _rev:
                type: "string"
                description: "Value used to ensure updates to this object are handled in order."
              intl:
                type: "string"
                description: "The short-form code for the internationalization region"
              moment:
                type: "string"
              timezone:
                type: "string"
                description: "Timezone used to coordinate timestamps for the specified region"
  
  LocaleResponse:
    type: "object"
    required: ["data"]
    properties:
      data:
        $ref: '#/definitions/Locale'
  LocaleListResponse:
    type: "object"
    required: ["data"]
    properties:
      data:
        type: "array"
        items:
           $ref: '#/definitions/Locale'
  
  Locale:
    type: "object"
    required: ["type", "id", "attributes"]
    properties:
      type: 
        type: "string"
        enum: [locales]
      id:
        type: "string"
      attributes:
        type: "object"
        required: ["_rev", "datatype", "intl", "moment", "timezone","createdTimestamp", "lastModifiedTimestamp"]
        properties:
          _rev:
            type: "string"
            description: "Value used to ensure updates to this object are handled in order."
          datatype:
            type: "string"
          tenantId:
            type: "string"
          intl:
            type: "string"
            description: "The short-form code for the internationalization region"
          moment:
            type: "string"
          timezone:
            type: "string"
            description: "Timezone used to coordinate timestamps for the specified region"
          createdTimestamp:
            type: "integer"
            format: "int64"
            description: "Time since epoch at which this object was instantiated."
          lastModifiedTimestamp:
            type: "integer"
            format: "int64"
            description: "Time since epoch at which this object was last altered."

  MetricIdentifierFilter:
    description: Filter object that identifies a specific metric within a monitored object by its key attributes
    type: object
    required: [vendor, objectType, metric]
    properties:
      vendor:
        description: Vendor name associated with the monitored object 
        type: string
        example: accedian-twamp
      objectType:
        description: Object types to be considered as part of the filter
        type: array
        example: 
          - ["twamp-pe"]
          - ["twamp-sl","twamp-sf"]
        items:
          type: string
      metric:
        description: Name that identifies the specific metric within a monitored object
        type: string
        example: delayP95
      direction:
        description: Set of one or more directions to be used by the filter to identify required metric records
        type: array
        example: 
          - ["0"]
          - ["0","1"]
        items:
          type: string
          
  MetricIdentifier:
    description: Identifies a specific metric within a monitored object based on key attributes
    type: object
    required: [vendor, objectType, metric]
    properties:
      vendor:
        description: Vendor name associated with the monitored object 
        type: string
        example: accedian-twamp
      objectType:
        description: Object type associated with the monitored object
        type: string
        example: twamp-pe
      metric:
        description: Name that identifies the specific metric within a monitored object
        type: string
        example: delayP95
      direction:
        description: Attributes that identifies the direction of a test associated with a particular metric
        type: string
        example: 
          - "0"
          - "1"
          - "2"

  MetaFilter:
    description: >
      An object that allows filtering on arbitrary metadata criteria and their values. 
      The keys in the map are associated with metadata categories and the value array 
      corresponds to a set of whitelist filter-in values for that category. The logical 
      semantics associated with this structure are conditional-AND across metadata
      criteria (keys) and conditional-OR across the values contained within the value
      array. For example, {"region":["montreal","ottawa"], "group":["radio"]} will match
      all records that are of group "radio" AND from the region "montreal" OR "ottawa"
    type: object
    example: {"region":["montreal","ottawa"], "group":["radio"]}
    additionalProperties:
      type: array
      items:
        type: string
  
  DimensionFilter:
    description: >
      An object that allows filtering on dimensions tracked against metric records during ingestion.
      The keys in the map are associated with the dimension name and the value array corresponds
      to a set of whitelist filter-in values for that dimension. The logical 
      semantics associated with this structure are conditional-AND across dimensions
      (keys) and conditional-OR across the values contained within the value
      array. For example, {"firmware":["v1.0.0","v1.0.1"], "state":["active"]} will match
      all records that have a state of "active" AND with firmware versions "v1.0.0" OR "v1.0.1"
    type: object
    example: {"firmware":["v1.0.0","v1.0.1"], "state":["active"]}
    additionalProperties:
      type: array
      items:
        type: string
  ConnectorConfigCreateRequest:
    type: "object"
    required: ["data"]
    properties:
      data:
        type: "object"
        required: ["type", "attributes"]
        properties:
          type: 
            type: "string"
            enum: [connectorConfigs]
          id:
            type: "string"
          attributes:
            type: "object"
            required: ["url", "pollingFrequency", "type"]
            properties:
              name:
                type: "string"
              url: 
                type: "string"
              port:
                type: "integer"
              pollingFrequency:
                type: "integer"
              username:
                type: "string"
              password:
                type: "string"
              exportGroup:
                type: "string"
              datahubHeartbeatFrequency:
                type: "integer"
              datahubConnectionRetryFrequency:
                type: "integer"
              type:
                type: "string"
              zone:
                type: "string"
              
  ConnectorConfigUpdateRequest:
    type: "object"
    required: ["data"]
    properties:
      data:
        type: "object"
        required: ["type", "attributes", "id"]
        properties:
          type: 
            type: "string"
            enum: [connectorConfigs]
          id:
            type: "string"
          attributes:
            type: "object"
            required: ["_rev"]
            properties:
              _rev:
                type: "string"
                description: "Value used to ensure updates to this object are handled in order."
              name:
                type: "string"
              url: 
                type: "string"
              port:
                type: "integer"
              pollingFrequency:
                type: "integer"
              username:
                type: "string"
              password:
                type: "string"
              exportGroup:
                type: "string"
              datahubHeartbeatFrequency:
                type: "integer"
              datahubConnectionRetryFrequency:
                type: "integer"
              type:
                type: "string"
              zone:
                type: "string"
  
  ConnectorConfigResponse:
    type: "object"
    required: ["data"]
    properties:
      data:
        $ref: '#/definitions/ConnectorConfig'
  ConnectorConfigListResponse:
    type: "object"
    required: ["data"]
    properties:
      data:
        type: "array"
        items:
           $ref: '#/definitions/ConnectorConfig'
  
  ConnectorConfig:
    type: "object"
    required: ["type", "id", "attributes"]
    properties:
      type: 
        type: "string"
        enum: [connectorConfigs]
      id:
        type: "string"
      attributes:
        type: "object"
        required: ["_rev", "url", "pollingFrequency", "type", "createdTimestamp", "lastModifiedTimestamp"]
        properties:
          _rev:
            type: "string"
            description: "Value used to ensure updates to this object are handled in order."
          datatype:
            type: "string"
          tenantId:
            type: "string"
          name:
            type: "string"
          url: 
            type: "string"
          port:
            type: "integer"
          pollingFrequency:
            type: "integer"
          username:
            type: "string"
          password:
            type: "string"
          exportGroup:
            type: "string"
          datahubHeartbeatFrequency:
            type: "integer"
          datahubConnectionRetryFrequency:
            type: "integer"
          type:
            type: "string"
          zone:
            type: "string"
          createdTimestamp:
            type: "integer"
            format: "int64"
            description: "Time since epoch at which this object was instantiated."
          lastModifiedTimestamp:
            type: "integer"
            format: "int64"
            description: "Time since epoch at which this object was last altered."

  ConnectorInstanceCreateRequest:
    type: "object"
    required: ["data"]
    properties:
      data:
        type: "object"
        required: ["type", "attributes"]
        properties:
          type: 
            type: "string"
            enum: [connectorInstances]
          id:
            type: "string"
          attributes:
            type: "object"
            required: ["status", "hostname"]
            properties:
              status:
                type: "string"
              hostname: 
                type: "string"

  ConnectorInstanceUpdateRequest:
    type: "object"
    required: ["data"]
    properties:
      data:
        type: "object"
        required: ["type", "attributes", "id"]
        properties:
          type: 
            type: "string"
            enum: [connectorInstances]
          id:
            type: "string"
          attributes:
            type: "object"
            required: ["_rev"]
            properties:
              _rev:
                type: "string"
                description: "Value used to ensure updates to this object are handled in order."
              status:
                type: "string"
              hostname: 
                type: "string"
              createdTimestamp:
                type: "integer"
                format: "int64"
                description: "Time since epoch at which this object was instantiated."
              lastModifiedTimestamp:
                type: "integer"
                format: "int64"
                description: "Time since epoch at which this object was last altered."

  ConnectorInstanceResponse:
    type: "object"
    required: ["data"]
    properties:
      data:
        $ref: '#/definitions/ConnectorInstance'

  ConnectorInstanceListResponse:
    type: "object"
    required: ["data"]
    properties:
      data:
        type: "array"
        items:
           $ref: '#/definitions/ConnectorInstance'

  ConnectorInstance:
    type: "object"
    required: ["type", "id", "attributes"]
    properties:
      type: 
        type: "string"
        enum: [connectorInstances]
      id:
        type: "string"
      attributes:
        type: "object"
        required: ["_rev", "datatype", "tenantId", "status", "hostname", "createdTimestamp", "lastModifiedTimestamp"]
        properties:
          _rev:
            type: "string"
            description: "Value used to ensure updates to this object are handled in order."
          datatype:
            type: "string"
          tenantId:
            type: "string"
          status:
            type: "string"
          hostname: 
            type: "string"
          createdTimestamp:
            type: "integer"
            format: "int64"
            description: "Time since epoch at which this object was instantiated."
          lastModifiedTimestamp:
            type: "integer"
            format: "int64"
            description: "Time since epoch at which this object was last altered."
  DashboardCreateRequest:
    type: "object"
    required: ["data"]
    description: "Object used to create a Dashboard in Datahub"
    properties:
      data:
        type: "object"
        required: ["type", "attributes"]
        properties:
          type: 
            type: "string"
            enum: [dashboards]
          id:
            type: "string"
          relationships:
            $ref: '#/definitions/DashboardRelationships'
          attributes:
            type: "object"
            required: ["name"]
            properties:
              name:
                type: "string"
                description: "User provided identifier for a Dashboard"
              category: 
                type: "string"
                description: "Name of the visual 'group' where this Dashboard will be displayed when looking at the list of all Dashboards in Datahub"
              metadataFilters:
                type: "array"
                items:
                  $ref: '#/definitions/MetadataFilter'
                description: "List of filters used to obtain a list of Monitoreed Objects which will be useds to provide metric data to the Dashboard"
              cardPositions:
                description: "Describes the locations of the Cards on the Dashboard in the Datahub UI"
                $ref: '#/definitions/CardPositions'
              
  DashboardUpdateRequest:
    type: "object"
    required: ["data"]
    description: "Object used to update a Dashboard in Datahub"
    properties:
      data:
        type: "object"
        required: ["type", "attributes", "id"]
        properties:
          type: 
            type: "string"
            enum: [dashboards]
          id:
            type: "string"
          relationships:
            $ref: '#/definitions/DashboardRelationships'
          attributes:
            type: "object"
            required: ["_rev"]
            properties:
              _rev:
                type: "string"
                description: "Value used to ensure updates to this object are handled in order."
              name:
                type: "string"
                description: "User provided identifier for a Dashboard"
              category: 
                type: "string"
                description: "Name of the visual 'group' where this Dashboard will be displayed when looking at the list of all Dashboards in Datahub"
              metadataFilters:
                type: "array"
                items:
                  $ref: '#/definitions/MetadataFilter'
                description: "List of filters used to obtain a list of Monitoreed Objects which will be useds to provide metric data to the Dashboard"
              cardPositions:
                description: "Describes the locations of the Cards on the Dashboard in the Datahub UI"
                $ref: '#/definitions/CardPositions'
  
  DashboardResponse:
    type: "object"
    required: ["data"]
    description: "A single object Dashboard response from Datahub"
    properties:
      data:
        $ref: '#/definitions/Dashboard'
  DashboardListResponse:
    type: "object"
    required: ["data"]
    description: "Response for one ore more Dashboards from Datahub"
    properties:
      data:
        type: "array"
        items:
           $ref: '#/definitions/Dashboard'
  
  Dashboard:
    type: "object"
    required: ["type", "id", "attributes"]
    description: "Represents a Dashboard used to display metric information on the Datahub UI"
    properties:
      type: 
        type: "string"
        enum: [dashboards]
      id:
        type: "string"
      relationships:
        $ref: '#/definitions/DashboardRelationships'
      attributes:
        type: "object"
        required: ["_rev", "name", "datatype", "port", "tenantId", "category", "metadataFilters", "cardPositions", "createdTimestamp", "lastModifiedTimestamp"]
        properties:
          _rev:
            type: "string"
            description: "Value used to ensure updates to this object are handled in order."
          datatype:
            description: "Name used to identify this type of record in Datahub"
            type: "string"
          tenantId:
            description: "Unique identifier of a Tenant in Datahub"
            type: "string"
          name:
            type: "string"
            description: "User provided identifier for a Dashboard"
          category: 
            type: "string"
            description: "Name of the visual 'group' where this Dashboard will be displayed when looking at the list of all Dashboards in Datahub"
          metadataFilters:
            description: "List of filters used to obtain a list of Monitoreed Objects which will be useds to provide metric data to the Dashboard"
            type: "array"
            items:
              $ref: '#/definitions/MetadataFilter'
          cardPositions:
            description: "Describes the locations of the Cards on the Dashboard in the Datahub UI"
            $ref: '#/definitions/CardPositions'
          createdTimestamp:
            type: "integer"
            format: "int64"
          lastModifiedTimestamp:
            type: "integer"
            format: "int64"
            description: "Time since epoch at which this object was last altered."

  CardPositions:
    type: "object"
    description: "Describes the locations of the Cards on the Dashboard in the Datahub UI"
    additionalProperties:
      type: "object"
      required: ["position"]
      properties:
        position: 
          type: "integer"
          description: "The placement order of this card on the Dashboard"
        dimensions:
          type: "object"
          description: "The amount of columns and rows this card will occupy"
          properties:
            columns: 
              type: "integer"
            rows: 
              type: "integer"

  MetadataFilter:
    type: "object"
    description: "Used to obtain a list of Monitoreed Objects which will be useds to provide metric data to the Dashboard"
    properties:
      key:
        type: "string"
      values:
        type: "array"
        items: 
          type: "string"

  DashboardRelationships:
    type: "object"
    properties:
      cards:
        description: "References the unique identifiers of the Cards that are used on this Dashboard in the Datahub UI"
        $ref: '#/definitions/JsonApiRelationship'
      thresholdProfile:
        description: "References the unique identifier of the Threshold Profile used to generate Threshold Crossing Events on this Dashboard in the Datahub UI"
        $ref: '#/definitions/JsonApiSingleRelationship'

  CardCreateRequest:
    type: "object"
    description: "Object used to create a Card in Datahub"
    required: ["data"]
    properties:
      data:
        type: "object"
        required: ["type", "attributes"]
        properties:
          type: 
            type: "string"
            enum: [cards]
          id:
            type: "string"
          attributes:
            type: "object"
            required: ["name", "state"]
            properties:
              name:
                type: "string"
              description: 
                type: "string"
              state: 
                type: "string"
                enum: [active, pending]
              visualization:
                $ref: '#/definitions/CardVisualization'
              metadataFilters:
                type: "array"
                items:
                  $ref: '#/definitions/MetadataFilter'
              metrics:
                type: "array"
                items:
                  $ref: '#/definitions/CardMetric'
              
  CardUpdateRequest:
    type: "object"
    description: "Object used to update a Card in Datahub"
    required: ["data"]
    properties:
      data:
        type: "object"
        required: ["type", "attributes", "id"]
        properties:
          type: 
            type: "string"
            enum: [cards]
          id:
            type: "string"
          attributes:
            type: "object"
            required: ["_rev"]
            properties:
              _rev:
                type: "string"
                description: "Value used to ensure updates to this object are handled in order."
              name:
                type: "string"
              description: 
                type: "string"
              state: 
                type: "string"
                enum: [active, pending]
              visualization:
                $ref: '#/definitions/CardVisualization'
              metadataFilters:
                type: "array"
                items:
                  $ref: '#/definitions/MetadataFilter'
              metrics:
                type: "array"
                items:
                  $ref: '#/definitions/CardMetric'
  
  CardResponse:
    type: "object"
    description: "A single object Card response from Datahub"
    required: ["data"]
    properties:
      data:
        $ref: '#/definitions/Card'
  CardListResponse:
    type: "object"
    description: "Response for one ore more Cards from Datahub"
    required: ["data"]
    properties:
      data:
        type: "array"
        items:
           $ref: '#/definitions/Card'
  
  Card:
    type: "object"
    description: "Models a single Card used by Dashboards in the Datahub UI"
    required: ["type", "id", "attributes"]
    properties:
      type: 
        type: "string"
        enum: [cards]
      id:
        type: "string"
      attributes:
        type: "object"
        required: ["_rev", "name", "datatype", "tenantId", "description", "state", "visualization", "metadataFilters", "metrics", "createdTimestamp", "lastModifiedTimestamp"]
        properties:
          _rev:
            type: "string"
            description: "Value used to ensure updates to this object are handled in order."
          datatype:
            type: "string"
            description: "Name used to identify this type of record in Datahub"
          tenantId:
            type: "string"
            description: "Unique identifier of a Tenant in Datahub"
          name:
            type: "string"
            description: "User provided identifier for a Card"
          description: 
            type: "string"
            description: "User provided description for a Card"
          state: 
            type: "string"
            enum: [active, pending]
          visualization:
            $ref: '#/definitions/CardVisualization'
            description: "Object which contains the components to display on this Card"
          metadataFilters:
              type: "array"
              items:
                $ref: '#/definitions/MetadataFilter'
          metrics:
            type: "array"
            description: "A list of the data which will be displayed in the Card visualization"
            items:
              $ref: '#/definitions/CardMetric'
          createdTimestamp:
            type: "integer"
            description: "Time since epoch at which this object was instantiated."
          lastModifiedTimestamp:
            type: "integer"
            description: "Time since epoch at which this object was last altered."

  CardVisualization:
    type: "object"
    properties:
      key:
        type: "string"
        description: "Label referencing the type of visualization to be displayed"
      label:
        type: "string"
        description: "User provided identifier for a Visualization"
      category:
        type: "string"
      icon:
        type: "string"
      component:
        type: "string"
      availability:
        type: "object"
        properties:
          count: 
            type: "integer"
          type:
            type: "array"
            items:
              type: "string"
      defaultDimensions:
        type: "object"
        properties:
          columns: 
            type: "integer"
          rows: 
            type: "integer"
  
  CardMetric:
    type: "object"
    properties:
      key: # DEPRECATE FOR V3
        type: "string"
      label: # DEPRECATE FOR V3
        type: "string"
      vendorLabel: # DEPRECATE FOR V3
        type: "string"
      vendorKey: # DEPRECATE FOR V3
        type: "string"
      vendor:
        type: "string"
      objectType: # DEPRECATE FOR V3
        type: "string"
      unit:
        type: "string"
      type: # DEPRECATE FOR V3
        type: "string"
      rawMetricId: # DEPRECATE FOR V3
        type: "string"
      metric:
        type: "string"
      metricKey: # DEPRECATE FOR V3
        type: "string"
      enabled: # DEPRECATE FOR V3
        type: "boolean"
      monitoredObjectTypes:
        type: "array"
        items:
          type: "string"
      directions:
        type: "array"
        x-omitempty: true
        items:
          type: "string"
      units: # DEPRECATE FOR V3
        type: "array"
        items:
          type: "string"
      options:
        type: "object"
        properties:
          useExplicitSeries: # DEPRECATE FOR V3
            type: "boolean"
          useBins: # DEPRECATE FOR V3
            type: "boolean"
          formatUnit: # DEPRECATE FOR V3
            type: "string"
          bins: # DEPRECATE FOR V3
            type: "array"
            items:
              type: "number"
              format: "double"
          series: # DEPRECATE FOR V3
            type: "array"
            items:
              type: "string"
          type:
            type: "string"
            enum: ["measure","events","bins"]
          directions:
            type: "array"
            x-omitempty: true
            items:
              type: "string"
          buckets:
            type: "array"
            x-omitempty: true
            items:
              type: "object"
              additionalProperties: true
          aggregation:
            type: "string"
            enum: ["none","sum"]
  DataCleaningProfileCreateRequest:
    type: "object"
    description: "Object used to create a Data Cleaning Profile in Datahub"
    required: ["data"]
    properties:
      data:
        type: "object"
        required: ["type", "attributes"]
        properties:
          type: 
            type: "string"
            enum: [dataCleaningProfiles]
            default: "dataCleaningProfiles"
          id:
            type: "string"
          attributes:
            type: "object"
            required: ["rules"]
            properties:
              rules:
                type: "array"
                items: 
                  $ref: '#/definitions/DataCleaningRule'
                description: "List of all the rules to evaluate for Data Cleaning"

  DataCleaningProfileUpdateRequest:
    type: "object"
    description: "Object used to update a Data Cleaning Profile in Datahub"
    required: ["data"]
    properties:
      data:
        type: "object"
        required: ["type", "id", "attributes"]
        properties:
          type: 
            type: "string"
            enum: [dataCleaningProfiles]
            default: "dataCleaningProfiles"
          id:
            type: "string"
          attributes:
            type: "object"
            required: ["_rev", "rules"]
            properties:
              _rev:
                type: "string"
                description: "Value used to ensure updates to this object are handled in order."
              rules:
                type: "array"
                items: 
                  $ref: '#/definitions/DataCleaningRule'
                description: "List of all the rules to evaluate for Data Cleaning"

  DataCleaningRule:
    type: "object"
    description: "Provides the logic used to determine when data should be ommitted from queries"
    required: ["metricVendor","metricLabel","triggerCondition","clearCondition"]
    properties:
      metricVendor:
        type: "string"
        description: "The name of the vendor which provides the metric used in the rule."
      metricLabel:
        type: "string"
        description: "The name of the metric used in the rule."
      triggerCondition:
        $ref: '#/definitions/DataCleaningCondition'
        description: "Object which determines when a rule will be triggered/applied"
      clearCondition:
        $ref: '#/definitions/DataCleaningCondition'
        description: "Object which determines when a rule will be cleared"

  DataCleaningCondition:
    type: "object"
    required: ["comparator", "value", "valueAggregate", "duration"]
    description: "A condition used to evalutate when a data cleaning rule should be triggered or cleared."
    properties:
      comparator:
        type: "string"
        enum: [gt,lt,gte,lte,eq]
        description: "Operand to use when evaluating the condition. [gt=greaterThan, lt=lessThan, gte=greaterThanOrEqual, lte=lessThanOrEqual, eq=equal]"
      value:
        type: "string"
        description: "The value against which the selected metric will be compared."
      valueAggregate:
        type: "string"
        enum: [min,max,avg]
        description: "The method of aggregation by which the selected metric will be aggregateds. [min=minimum, max=maximum, avg=average]"
      duration: 
        type: "string"
        description: "ISO-8601 interval over which this codition will be evaluated."

  DataCleaningProfileResponse:
    type: "object"
    description: "A single object Data Cleaning Profile response from Datahub"
    required: ["data"]
    properties:
      data:
        $ref: '#/definitions/DataCleaningProfile'
  
  DataCleaningProfileListResponse:
    type: "object"
    description: "Response for one ore more Data Cleaning Profiles from Datahub"
    required: ["data"]
    properties:
      data:
        type: "array"
        items:
          $ref: '#/definitions/DataCleaningProfile'

  DataCleaningProfile:
    type: "object"
    required: ["type", "id", "attributes"]
    properties:
      type: 
        type: "string"
        enum: [dataCleaningProfiles]
        default: "dataCleaningProfiles"
      id:
        type: "string"
      attributes:
        type: "object"
        required: ["_rev", "rules", "createdTimestamp", "lastModifiedTimestamp"]
        properties:
          _rev:
            type: "string"
            description: "Value used to ensure updates to this object are handled in order."
          rules:
            type: "array"
            items: 
              $ref: '#/definitions/DataCleaningRule'
            description: "List of all the rules to evaluate for Data Cleaning"
          createdTimestamp:
            type: "integer"
            format: "int64"
            description: "Time since epoch at which this object was instantiated."
          lastModifiedTimestamp:
            type: "integer"
            format: "int64"
            description: "Time since epoch at which this object was last altered."
            
  DataCleaningHistoryResponse:
    type: "object"
    required: ["data"]
    properties:
      data:
        $ref: '#/definitions/DataCleaningHistory'
  
  DataCleaningHistory:
    type: "object"
    required: ["type", "id", "attributes"]
    properties:
      type: 
        type: "string"
        enum: [dataCleaningHistory]
        default: "dataCleaningHistory"
      id:
        type: "string"
      attributes:  
        type: "object"
        required: ["events"]
        properties:
          transitions:
            type: "array"
            items: 
              $ref: '#/definitions/DataCleaningTransition'
            description: "List of data cleaning events"

  DataCleaningTransition:
    type: object
    properties:
      timestamp:
        type: "integer"
        format: "int64"
        description: "Time since epoch at which these transitions occurred."
      rulesRaised:
        type: array
        items:
          $ref: '#/definitions/DataCleaningTransitionRule'
      rulesCleared:
        type: array
        items:
          $ref: '#/definitions/DataCleaningTransitionRule'
      errorsRaised:
        type: array
        items:
          $ref: '#/definitions/DataCleaningTransitionError'
      errorsCleared:
        type: array
        items:
          $ref: '#/definitions/DataCleaningTransitionError'

  DataCleaningTransitionRule:
    type: object
    properties:
      direction:
        type: string
      rule:
        $ref: '#/definitions/DataCleaningRule'

  DataCleaningTransitionError:
    type: object
    properties:
      direction:
        type: string
      errorCode:
        type: string
  IngestionProfileCreateRequest:
    type: "object"
    description: "Object used to create an Ingestion Profile in Datahub"
    required: ["data"]
    properties:
      data:
        type: "object"
        required: ["type", "attributes"]
        properties:
          type: 
            type: "string"
            enum: [ingestionProfiles]
          id:
            type: "string"
          attributes:
            type: "object"
            required: ["metrics"]
            properties:
              metrics:
                description: "Metrics will be deprecated in the next API version. Please use the 'metricList' property instead"
                $ref: '#/definitions/IngestionProfileMetrics'
              metricList:
                $ref: '#/definitions/IngestionProfileMetricList'
                    
  IngestionProfileUpdateRequest:
    type: "object"
    description: "Object used to update an Ingestion Profile in Datahub"
    required: ["data"]
    properties:
      data:
        type: "object"
        required: ["type", "id", "attributes"]
        properties:
          type: 
            type: "string"
            enum: [ingestionProfiles]
          id:
            type: "string"
          attributes:
            type: "object"
            required: ["_rev"]
            properties:
              _rev:
                type: "string"
                description: "Value used to ensure updates to this object are handled in order."
              metrics:
                description: "Metrics will be deprecated in the next API version. Please use the 'metricList' property instead"
                $ref: '#/definitions/IngestionProfileMetrics'
              metricList:
                description: "A list of objects that allow customization on which Metrics will be available to query from Datahub"
                $ref: '#/definitions/IngestionProfileMetricList'
            
             
  IngestionProfileListResponse:
    type: "object"
    description: "Ingestion Profile response including one or more values"
    required: ["data"]
    properties:
      data:
        type: "array"
        items:
          $ref: '#/definitions/IngestionProfile'

  IngestionProfileResponse:
    type: "object"
    description: "A single object Ingestion Profile response from Datahub"
    required: ["data"]
    properties:
      data:
        $ref: '#/definitions/IngestionProfile'

  IngestionProfile:
    type: "object"
    required: ["type", "id", "attributes"]
    properties:
      type: 
        type: "string"
        enum: [ingestionProfiles]
      id:
        type: "string"
      attributes:
        type: "object"
        required: ["_id", "_rev", "tenantId", "dataType", "metrics", "createdTimestamp", "lastModifiedTimestamp"]
        properties:
          tenantId:
            type: "string"
            description: "Unique identifier of the Tenant in Datahub"
          _id:
            type: "string"
          _rev:
            type: "string"
            description: "Value used to ensure updates to this object are handled in order."
          datatype:
            description: "Name used to identify this type of record in Datahub"
            type: "string"
          metrics:
            description: "Metrics will be deprecated in the next API version. Please use the 'metricList' property instead"
            $ref: '#/definitions/IngestionProfileMetrics'
          metricList:
            description: "A collection of Metric descriptors that determine which metrics will be recorded by Datahub"
            $ref: '#/definitions/IngestionProfileMetricList'
          createdTimestamp:
            type: "integer"
            format: "int64"
            description: "Time since epoch at which this object was instantiated."
          lastModifiedTimestamp:
            type: "integer"
            format: "int64"
            description: "Time since epoch at which this object was last altered."

  IngestionProfileMetrics:
    type: "object"
    description: "This object will be deprecated in a future version of the Datahub API"
    properties:
      vendorMap:
        type: "object"
        additionalProperties:
          type: "object"
          properties:
            monitoredObjectTypeMap:
              type: "object"
              additionalProperties:
                type: "object"
                properties:
                  metricMap:
                    type: "object"
                    additionalProperties:
                      type: "boolean"

  IngestionProfileMetricList:
    description: "Provides an array of objects which outline the vendor/monitoredObjectType/metrics that are actively being stroed in Datahub"
    type: "array"
    items:
      type: "object"
      properties:
        vendor:
          description: "The name of the Vendor from which this Metric originates"
          type: "string"
        monitoredObjectType:
          description: "The name of the type of Monitored Object for which this Metric is applicable"
          type: "string"
        metric:
          type: "string"
          description: "The name of the Metric"
        enabled:
          description: "When true, this metric will be recorded by Datahub. When false, this metric is ommitted."
          type: "boolean"
        direction:
          type: "string"
          description: "Describes the direction of the test in case a Threshold needs to be different for one direction (i.e. actuator to reflector) versus another (i.e. round trip)"
        dimensions:
          type: "object"
          description: "Provides data properties by which the Metric may be filtered and/or aggregated"

  MetadataConfigCreateRequest:
    type: "object"
    description: "Object used to create a Metadata Configuration in Datahub"
    required: ["data"]
    properties:
      data:
        type: "object"
        required: ["type", "attributes"]
        properties:
          type: 
            type: "string"
            enum: [metadataConfigs]
          id:
            type: "string"
          attributes:
            type: "object"
            required: ["startPoint", "endPoint", "midPoints"]
            properties:
              startPoint:
                description: "The first point of a Logical Map"
                type: "string"
              endPoint:
                description: "The last point of a Logical Map"
                type: "string"
              midPoints: 
                description: "The points between the startPoint and endPoint of a logical map"
                type: "array"
                items:
                  type: "string"
                    
  MetadataConfigUpdateRequest:
    type: "object"
    description: "Object used to update a Metadata Configuration in Datahub"
    required: ["data"]
    properties:
      data:
        type: "object"
        required: ["type", "id", "attributes"]
        properties:
          type: 
            type: "string"
            enum: [metadataConfigs]
          id:
            type: "string"
          attributes:
            type: "object"
            required: ["_rev"]
            properties:
              _rev:
                type: "string"
                description: "Value used to ensure updates to this object are handled in order."
              startPoint:
                description: "The first point of a Logical Map"
                type: "string"
              endPoint:
                description: "The last point of a Logical Map"
                type: "string"
              midPoints: 
                description: "The points between the startPoint and endPoint of a logical map"
                type: "array"
                items:
                  type: "string"
            
             
  MetadataConfigListResponse:
    type: "object"
    description: "Metadata Configuration response including one or more values"
    required: ["data"]
    properties:
      data:
        type: "array"
        items:
          $ref: '#/definitions/MetadataConfig'

  MetadataConfigResponse:
    type: "object"
    description: "A single object Metadata Configuration response from Datahub"
    required: ["data"]
    properties:
      data:
        $ref: '#/definitions/MetadataConfig'

  MetadataConfig:
    type: "object"
    required: ["type", "id", "attributes"]
    properties:
      type: 
        type: "string"
        enum: [metadataConfigs]
      id:
        type: "string"
      attributes:
        type: "object"
        required: ["_id", "_rev", "tenantId", "dataType", "startPoint", "endPoint", "midPoints", "createdTimestamp", "lastModifiedTimestamp"]
        properties:
          tenantId:
            type: "string"
            description: "Unique identifier of the Tenant in Datahub"
          _id:
            type: "string"
          _rev:
            type: "string"
            description: "Value used to ensure updates to this object are handled in order."
          datatype:
            description: "Name used to identify this type of record in Datahub"
            type: "string"
          startPoint:
            description: "The first point of a Logical Map"
            type: "string"
          endPoint:
            description: "The last point of a Logical Map"
            type: "string"
          midPoints: 
            description: "The points between the startPoint and endPoint of a logical map"
            type: "array"
            items:
              type: "string"
          createdTimestamp:
            type: "integer"
            format: "int64"
            description: "Time since epoch at which this object was instantiated."
          lastModifiedTimestamp:
            type: "integer"
            format: "int64"
            description: "Time since epoch at which this object was last altered."
  MetricBaselineCreateRequest:
    type: "object"
    required: ["data"]
    description: "Object used to create a new Metric Baseline object in Datahub"
    properties:
      data:
        type: "object"
        required: ["type", "attributes"]
        properties:
          type: 
            type: "string"
            enum: [metricBaselines]
          id:
            type: "string"
          attributes:
            type: "object"
            properties:
              monitoredObjectId:
                type: "string"
                description: "Unique identifier of the Monitored Object for which these baselines are applicable"
              hourOfWeek:
                description: "Integer value of the day of the week and hour of day for which this baseline is calculated. Values are 0-167 which corresponds to each our of each day in one week"
                type: "integer"
                format: "int32"
                minimum: 0
                maximum: 167
              baselines:
                description: "Contains the dynamically calculated baseline values for the metrics collected by Datahub"
                type: "array"
                items:
                  $ref: '#/definitions/MetricBaselineData'
                    
  MetricBaselineUpdateRequest:
    type: "object"
    required: ["data"]
    description: "Object used to update an existing Metric Baseline object in Datahub"
    properties:
      data:
        type: "object"
        required: ["type", "id", "attributes"]
        properties:
          type: 
            type: "string"
            enum: [metricBaselines]
          id:
            type: "string"
          attributes:
            type: "object"
            required: ["_rev", "baselines"]
            properties:
              _rev:
                type: "string"
                description: "Value used to ensure updates to this object are handled in order."
              monitoredObjectId:
                type: "string"
                description: "Unique identifier of the Monitored Object for which these baselines are applicable"
              hourOfWeek:
                description: "Integer value of the day of the week and hour of day for which this baseline is calculated. Values are 0-167 which corresponds to each our of each day in one week"
                type: "integer"
                format: "int32"
                minimum: 0
                maximum: 167
              baselines:
                description: "Contains the dynamically calculated baseline values for the metrics collected by Datahub"
                type: "array"
                items:
                  $ref: '#/definitions/MetricBaselineData'

  MetricBaselineData:
    type: "object"
    properties:
      metric:
        description: "The name of the metric represented by this baseline"
        type: "string"
      direction:
        description: "The direction of the metric baseline"
        type: "string"
      sum:
        description: "The total sumation of all values recorded for this metric in datahub"
        type: "number"
        format: "double"
      count:
        description: "The total number of values recorded for this metric in datahub"
        type: "integer"
        format: "int64"
      average:
        description: "The calculated average of the Metric obtained via (sum/count)"
        type: "number"
        format: "double"
  
  MetricBaseline:
    type: "object"
    required: ["type", "id", "attributes"]
    properties:
      type: 
        type: "string"
        enum: [metricBaselines]
      id:
        type: "string"
      attributes:
        type: "object"
        required: ["tenantId", "_id", "_rev", "datatype", "baselines", "createdTimestamp", "lastModifiedTimestamp", "lastResetTimestamp"]
        properties:
          tenantId:
            type: "string"
            description: "Unique identifier of the Tenant in Datahub"
          _id:
            type: "string"
          _rev:
            type: "string"
            description: "Value used to ensure updates to this object are handled in order."
          datatype:
            type: "string"
            description: "Name used to identify this type of record in Datahub"
          monitoredObjectId:
            type: "string"
            description: "Unique identifier of the Monitored Object for which these baselines are applicable"
          hourOfWeek:
            description: "Integer value of the day of the week and hour of day for which this baseline is calculated. Values are 0-167 which corresponds to each our of each day in one week"
            type: "integer"
            format: "int32"
            minimum: 0
            maximum: 167
          baselines:
            description: "Contains the dynamically calculated baseline values for the metrics collected by Datahub"
            type: "array"
            items:
              $ref: '#/definitions/MetricBaselineData'
          createdTimestamp:
            type: "integer"
            format: "int64"
            description: "Time since epoch at which this object was instantiated."
          lastModifiedTimestamp:
            type: "integer"
            format: "int64"
            description: "Time since epoch at which this object was last altered."
          lastResetTimestamp:
            type: "integer"
            format: "int64"
            description: "Time since epoch at which this object was last reset to 0"
      
  MetricBaselineResponse:
    type: "object"
    description: "A Metric Baseline response from Datahub"
    required: ["data"]
    properties:
      data:
        $ref: '#/definitions/MetricBaseline'

  MetricBaselineListResponse:
    type: "object"
    description: "Metric Baseline response including one or more values"
    required: ["data"]
    properties:
      data:
        type: "array"
        items:
          $ref: '#/definitions/MetricBaseline'

  MetricBaselineDataWrapper:
    type: "object"
    required: ["type", "attributes"]
    properties:
      type: 
        type: "string"
        enum: [metricBaselineData]
      id:
        type: "string"
      attributes:
        $ref: '#/definitions/MetricBaselineData'

  MetricBaselineUpdateHourRequest:
    type: "object"
    required: ["data"]
    description: "Object used to update a single Metric Baseline for a Monitored Object in Datahub"
    properties:
      data:
        type: "object"
        required: ["type", "attributes"]
        properties:
          type: 
            type: "string"
            enum: [metricBaselineHourUpdate]
          id:
            type: "string"
          attributes:
            type: "object"
            properties:
              baselines:
                description: "Contains the dynamically calculated baseline values for the metrics collected by Datahub"
                type: "array"
                items:
                  $ref: '#/definitions/MetricBaselineData'

  MetricBaselineBulkUpdateRequest:
    type: "object"
    required: ["data"]
    description: "Object used to update Metric Baselines for multiple Monitored Objects in Datahub"
    properties:
      data:
        type: "object"
        required: ["type", "attributes"]
        properties:
          type: 
            type: "string"
            enum: [metricBaselineBulkUpdate]
          id:
            type: "string"
          attributes:
            type: "array"
            items:
              type: "object"
              properties:
                monitoredObjectId:
                  type: "string"
                  description: "Unique identifier of the Monitored Object for which these baselines are applicable"
                hourOfWeek:
                  description: "Integer value of the day of the week and hour of day for which this baseline is calculated. Values are 0-167 which corresponds to each our of each day in one week"
                  type: "integer"
                  format: "int32"
                  minimum: 0
                  maximum: 167
                baselines: 
                  description: "Contains the dynamically calculated baseline values for the metrics collected by Datahub"
                  type: "array"
                  items:
                    $ref: '#/definitions/MetricBaselineData'
   
  # THRESHOLD CROSSING BY MONITORED OBJECT TOPN REPORT DEFINITIONS
  ## REQUEST DEFINITION 
  JsonApiThresholdCrossingByMOTopNRequest:
    description: JSON API compliant wrapper for the threshold crossing by monitored object topn query
    type: object
    properties:
      data:
        type: object
        required: [type, attributes]
        properties:
          id: 
            type: string
          type: 
            type: string
            enum: [thresholdCrossingByMOTopNs]
          attributes:
            $ref: '#/definitions/ThresholdCrossingByMOTopNConfig'

  ## RESPONSE DEFINITION
  JsonApiThresholdCrossingByMOTopNResponse:
    description: JSON API compliant wrapper for the threshold crossing by monitored object topn response
    type: object
    properties:
      data:
        type: object
        required: [type]
        properties:
          id:
            type: string
          type: 
            type: string
            enum: [thresholdCrossingByMOTopNs]
          attributes:
            type: object
            allOf:
              - $ref: '#/definitions/ThresholdCrossingByMOTopNConfig'
              - properties:
                  result:
                    $ref: '#/definitions/ThresholdCrossingByMOTopNReport'

  ## ENTITY DEFINITIONS
  ThresholdCrossingByMOTopNConfig:
    description: The necessary request parameters for the metric api call
    type: object
    required: [interval, thresholdProfileId, numResults, metric]
    properties:
      aggregator:
        description: the type of aggregation to determine the top N result set
        type: string
        enum: [min, max, avg]
        example:
          - max
          - min
          - avg
      interval:
        description: Time boundary for the metrics under consideration using the ISO-8601 standard
        type: string
        example: 2018-04-08T14:00:00/2018-04-09T15:00:00
      meta:
        description: An object that allows filtering on arbitrary metadata criteria and their values. Refer to the MetaFilter object for additional details
        $ref: '#/definitions/MetaFilter'
        example: {"region":["montreal","ottawa"], "group":["radio"]}
      thresholdProfileId:
        description: ID of the threshold profile that is used to select metrics and events
        type: string
        example: d1988d68-7444-4098-91eb-bd5a987397cb
      timeout:
        description: Query timeout in milliseconds
        type: integer
        example: 30000
      ignoreCleaning:
        description: A value of true will have the aggregation request execute on all data regardless of whether it has been cleaned or not
        type: boolean
      sorted:
        type: string
        description: Indicates whether the response should return the topn in ascending or descending order. The default value is descending
        enum: [asc, desc]
        example:
          - asc
          - desc
      numResults:
        description: Query timeout in milliseconds
        type: integer
        format: int32
        example: 30000
      metric:
        description: The metric to be used for the top N query
        $ref: '#/definitions/MetricIdentifierFilter'
        
  
  ThresholdCrossingByMOTopNReport:
    description: The rendered response structure from the metric query
    type: array
    items:
      description: A set of entries detailing the number of event crossings per type ordered from most to least. Ranking is based on weighted criticality of each event type.
      type: object
      allOf:
        - $ref: '#/definitions/ResultEntryParameters'
        - properties:
            result:
              type: object
              properties:
                critical:
                  description: Number of critical event crossings for this metric
                  type: integer
                major:
                  description: Number of major event crossings for this metric
                  type: integer
                minor:
                  description: Number of minor event crossings for this metric
                  type: integer
                info:
                  description: Number of info event crossings for this metric
                  type: integer
                warn:
                  description: Number of warning event crossings for this metric
                  type: integer
                scored:
                  description: The score that determined the ranking of this specific entry within the topn
                  type: number
                  format: float
                total:
                  description: Total number of event crossings
                  type: integer

  # SLA REPORT DEFINITIONS
  ## REQUEST DEFINITION 
  JsonApiSLAReportRequest:
    description: JSON API compliant wrapper for the SLA report query
    type: object
    properties:
      data:
        type: object
        required: [type, attributes]
        properties:
          id: 
            type: string
          type: 
            type: string
            enum: [slaReports]
          attributes:
            $ref: '#/definitions/SLAReportConfig'

  ## RESPONSE DEFINITION
  JsonApiSLAReportResponse:
    description: JSON API compliant wrapper for the SLA report response
    type: object
    properties:
      data:
        type: object
        required: [type]
        properties:
          id:
            type: string
          type: 
            type: string
            enum: [slaReports]
          attributes:
            type: object
            properties:
              config:   
                $ref: '#/definitions/SLAReportConfig'
              result:
                $ref: '#/definitions/SLAReport'

  ## ENTITY DEFINITIONS
  SLAReportConfig:
    description: The necessary request parameters for the metric api call
    type: object
    required: [interval, thresholdProfileId]
    properties:
      interval:
        description: Time boundary for the metrics under consideration using the ISO-8601 standard
        type: string
        example: 2018-04-08T14:00:00/2018-04-09T15:00:00
      meta:
        description: An object that allows filtering on arbitrary metadata criteria and their values. Refer to the MetaFilter object for additional details
        $ref: '#/definitions/MetaFilter'
        example: {"region":["montreal","ottawa"], "group":["radio"]}
      thresholdProfileId:
        description: ID of the threshold profile that is used to select metrics and events
        type: string
        example: d1988d68-7444-4098-91eb-bd5a987397cb
      granularity:
        description: The granularity for timeseries in ISO-8601 duration format, or ALL
        type: string
        example: PT1H
      timeout:
        description: Query timeout in milliseconds
        type: integer
        example: 30000
      ignoreCleaning:
        description: A value of true will have the aggregation request execute on all data regardless of whether it has been cleaned or not
        type: boolean
      timezone: 
        description: timezone used for time-based buckets (e.g. hour of day buckets) see http://joda-time.sourceforge.net/timezones.html
        type: string

  SLAReportSummary:
    description: The rendered response structure from the metric query
    type: object
    properties:
      objectCount:
        type: integer
      totalDuration:
        type: integer
      totalViolationCount:
        type: integer
      totalViolationDuration:
        type: integer
      slaCompliancePercent:
        type: number
        format: float
      byGranularity:
        type: array
        x-omitempty: true
        items:
            $ref: '#/definitions/SLATotalsTimestamp'
    required: 
      - objectCount
      - totalDuration
      - totalViolationCount
      - totalViolationDuration
      - slaCompliancePercent
  SLATotalsTimestamp:
    type: object
    required:
      - timestamp
      - totalDuration
      - totalViolationCount
      - totalViolationDuration
    properties:
      timestamp:
        type: string
      totalDuration:
        type: integer
      totalViolationCount:
        type: integer
      totalViolationDuration:
        type: integer
  SLAReport:
    type: object
    properties:
      summary:
        $ref: '#/definitions/SLAReportSummary'
      metric:
        type: array
        items:
          $ref: '#/definitions/SLAReportMetric'
  SLAReportMetric:
    
    allOf:
    - $ref: '#/definitions/MetricIdentifier'
    - properties:
        byGranularity:
            type: array
            x-omitempty: true
            items:
                $ref: '#/definitions/SLAMetricEntryTimeStamp'
        byHourOfDay:
            type: array
            x-omitempty: true
            items:
                $ref: '#/definitions/SLAMetricByHourOfDay'
        byDayOfWeek:
            type: array
            x-omitempty: true
            items:
                $ref: '#/definitions/SLAMetricByDayOfWeek'
  SLAMetricByHourOfDay:
    type: object
    required: 
      - hourOfDay
      - violationCount
    properties:
      hourOfDay:
        type: string
      violationCount:
        type: integer
  SLAMetricByDayOfWeek:
    type: object
    required:
      - violationCount
      - dayOfWeek
    properties:
      dayOfWeek:
        type: string
      violationCount:
        type: integer

  SLAMetricEntryTimeStamp:
    type: object
    required:
      - timestamp
      - totalDuration
      - violationCount
      - violationDuration
    properties:
      timestamp:
        type: string
      totalDuration:
        type: integer
      violationCount:
        type: integer
      violationDuration:
        type: integer
  SLAMetricEntry:
    type: object
    required:
            - totalDuration
            - violationCount
            - violationDuration
    properties:
      totalDuration:
        type: integer
      violationCount:
        type: integer
      violationDuration:
        type: integer
  # RAW METRICS DEFINITIONS
  ## ENTITY DEFINITIONS
  FilteredRawMetricsRequestObject:
    type: object
    required: [tenantId, interval, objectType, metrics, directions]
    properties:
      tenantId:
        type: string
        description: The tenant identifier
        example: 8501f157-b7f5-41c3-aaba-c75e0566c54c
      meta:
        description: An object that allows filtering on arbitrary metadata criteria and their values. Refer to the MetaFilter object for additional details
        $ref: '#/definitions/MetaFilter'
        example: {"region":["montreal","ottawa"], "group":["radio"]}
      interval:
        description: Time boundary for the metrics under consideration using the ISO-8601 standard
        type: string
        example: 2018-04-08T14:00:00/2018-04-09T15:00:00
      timeout:
        description: Query timeout in milliseconds
        type: integer
        example: 30000
      metrics:
        description: Array of metric names to be used as a whitelist to be considered for the raw metrics request
        type: array
        items:
          type: string
      directions:
        description: Array of directions to be used as a whitelist to be considered for the raw metrics request
        type: array
        items:
          type: string
      objectType:
        description: The type of monitored object that we want to consider for the request
        type: string
        example: twamp-sf
      granularity:
        description: the granularity for timeseries in ISO-8601 duration format, or ALL
        type: string
        example: PT1H, all
          
  # AGGREGATION DEFINITIONS
  ## REQUEST DEFINITION
  JsonApiAggregationRequest:
    description: JSON API compliant wrapper for the aggregation query
    type: object
    properties:
      data:
        type: object
        required: [type, attributes]
        properties:
          id: 
            type: string
          type: 
            type: string
            enum: [aggregateMetrics]
          attributes:
            $ref: '#/definitions/AggregationConfig'

  ## RESPONSE DEFINITION
  JsonApiAggregationResponse:
    description: JSON API compliant wrapper for the aggregation response
    type: object
    properties:
      data:
        type: object
        required: [type]
        properties:
          id:
            type: string
          type: 
            type: string
            enum: [aggregateMetrics]
          attributes:
            type: object
            allOf:
              - $ref: '#/definitions/AggregationConfig'
              - properties:
                  result:
                    $ref: '#/definitions/AggregationReport'

  ## ENTITY DEFINITIONS
  AggregationConfig:
    description: The necessary request parameters for the metric api call
    type: object
    required: [interval, aggregation, metrics]
    properties:
      monitoredObjects:
        description: An optional array of monitored objects that we want to retrieve specific aggregations against. This attribute cannot be used if the meta attribute is also present in the request.
        x-omitempty: true
        type: array
        items:
          type: string
        example: 
          - 7c3d3280-628c-c778-92ec-4e9b83fcbb4d
          - 41f1b537-b7f5-41c3-a1b2-a75e1536c54e
      meta:
        description: An object that allows filtering on arbitrary metadata criteria and their values. This attribute cannot be used if the monitoredObjects attribute is also present in the request. Refer to the MetaFilter object for additional details
        $ref: '#/definitions/MetaFilter'
        example: {"region":["montreal","ottawa"], "group":["radio"]}
      interval:
        description: Time boundary for the metrics under consideration using the ISO-8601 standard
        type: string
        example: 2018-04-08T14:00:00/2018-04-09T15:00:00
      granularity:
        description: The granularity for timeseries in ISO-8601 duration format, or ALL
        type: string
        example: PT1H
      timeout:
        description: Query timeout in milliseconds
        type: integer
        example: 30000
      aggregation:
        description: The aggregation function to be used against the metrics filtered-in for the query
        type: string
        enum: [min, max, avg]
        example:
          - min
          - max
          - avg
      ignoreCleaning:
        description: A value of true will have the aggregation request execute on all data regardless of whether it has been cleaned or not
        type: boolean
      metrics:
        description: An array of identifiers that filter-in specifically identified metrics.
        type: array
        items:
          $ref: '#/definitions/MetricIdentifierFilter'
      dimensions:
        description: An array of metric dimensions that filter-in metrics that adhere to those dimensions. Refer to the DimensionFilter object for further information
        $ref: '#/definitions/DimensionFilter'

  AggregationReport:
    description: The rendered response structure from the metric query
    type: array
    items:
      $ref: '#/definitions/MetricResultSeries'

  # HISTOGRAM DEFINITIONS
  ## REQUEST DEFINITION
  JsonApiHistogramRequest:
    description: JSON API compliant wrapper for the histogram query
    type: object
    properties:
      data:
        type: object
        required: [type, attributes]
        properties:
          id: 
            type: string
          type: 
            type: string
            enum: [histograms]
          attributes:
            $ref: '#/definitions/HistogramConfig'

  ## RESPONSE DEFINITION
  JsonApiHistogramResponse:
    description: JSON API compliant wrapper for the histogram response
    type: object
    properties:
      data:
        type: object
        required: [type]
        properties:
          id:
            type: string
          type: 
            type: string
            enum: [histograms]
          attributes:
            type: object
            allOf:
              - $ref: '#/definitions/HistogramConfig'
              - properties:
                  result:
                    $ref: '#/definitions/HistogramReport'

  ## ENTITY DEFINITIONS
  HistogramConfig:
    description: The necessary request parameters for the metric api call
    type: object
    required: [interval, metrics]
    properties:
      meta:
        description: An object that allows filtering on arbitrary metadata criteria and their values. Refer to the MetaFilter object for additional details
        $ref: '#/definitions/MetaFilter'
        example: {"region":["montreal","ottawa"], "group":["radio"]}
      interval:
        description: Time boundary for the metrics under consideration using the ISO-8601 standard
        type: string
        example: 2018-04-08T14:00:00/2018-04-09T15:00:00
      timeout:
        description: Query timeout in milliseconds
        type: integer
        example: 30000
      ignoreCleaning:
        description: A value of true will have the aggregation request execute on all data regardless of whether it has been cleaned or not
        type: boolean
      granularity:
        description: The granularity for timeseries in ISO-8601 duration format, or ALL
        type: string
        example: PT1H
      metrics:
        description: A list of the requested metric identifiers and the histogram buckets associated with those identifiers
        type: array
        items:
          allOf:
            - $ref: '#/definitions/MetricIdentifierFilter'
            - properties:
                buckets:
                  description: An ordered set of histogram buckets that should be filled with the appropriate metric data
                  example: > 
                    "buckets":[{"lower":{"value":0},"upper":{"value":200}},{"lower":{"value":200},"upper":{"value":400}},{"lower":{"value":400},"upper":{"value":600}},{"lower":{"value":600}}]
                  type: array
                  items:
                    type: object
                    properties:
                      lower:
                        description: The specification for the lower boundary of the bucket
                        type: object
                        required: [value]
                        properties:
                          value:
                            description: The lower, positive number to be used to describe the lowest value of the bucket. Omitting this value assumes that this bucket includes anything lower than the defined "upper" value
                            type: number
                            format: float
                          strict:
                            description: If set to true, then the lower value is assumed to be exclusive. Otherwise a value of false or the absence of this value assumes that the lower value is to be taken inclusively
                            type: boolean
                      upper:
                        description: The specification for the upper boundary of the bucket
                        type: object
                        required: [value]
                        properties:
                          value:
                            description: The upper, positive number to be used to describe the highest value of the bucket. Omitting this value assumes that this bucket includes anything higher than the defined "lower" value
                            type: number
                            format: float
                          strict:
                            description: If set to true, then the upper value is assumed to be exclusive. Otherwise a value of false or the absence of this value assumes that the upper value is to be taken inclusively
                            type: boolean
      dimensions:
        description: An array of metric dimensions that filter-in metrics that adhere to those dimensions. Refer to the DimensionFilter object for further information
        $ref: '#/definitions/DimensionFilter'

  HistogramReport:
    description: The rendered response structure from the metric query
    type: array
    items:
      allOf:
        - $ref: '#/definitions/ResultEntryParameters'
        - properties:
            series:
              description: An ordered list of metric values corresponding to the buckets provided in the histogram request
              type: array
              items:
                type: object
                required: [values]
                properties:
                  timestamp:
                    type: string
                  values:
                    type: array
                    items:
                      type: integer

  # TOPNFORMETRIC DEFINITIONS
  ## REQUEST DEFINITIONS
  JsonApiTopNForMetricRequest:
    description: JSON API compliant wrapper for the topn query
    type: object
    properties:
      data:
        type: object
        required: [type, attributes]
        properties:
          id:
            type: string
          type: 
            type: string
            enum: [topNForMetrics]
          attributes:
            $ref: '#/definitions/TopNForMetricConfig'

  ## RESPONSE DEFINITIONS
  JsonApiTopNForMetricResponse:
    description: JSON API compliant wrapper for the topn response
    type: object
    properties:
      data:
        type: object
        required: [type]
        properties:
          id:
            type: string
          type: 
            type: string
            enum: [topNForMetrics]
          attributes:
            type: object
            allOf:
              - $ref: '#/definitions/TopNForMetricConfig'
              - properties:
                  result:
                    $ref: '#/definitions/TopNForMetricReport'

  ## ENTITY DEFINITIONS
  TopNForMetricConfig:
    description: The necessary request parameters for the metric api call
    type: object
    required: [interval, aggregator, metric]
    properties:
      meta:
        description: An object that allows filtering on arbitrary metadata criteria and their values. Refer to the MetaFilter object for additional details
        $ref: '#/definitions/MetaFilter'
        example: {"region":["montreal","ottawa"], "group":["radio"]}
      monitoredObjects:
        description: An optional array of monitored objects that we want to retrieve specific topn against. This attribute cannot be used if the meta attribute is also present in the request.
        x-omitempty: true
        type: array
        items:
          type: string
        example: 
          - 7c3d3280-628c-c778-92ec-4e9b83fcbb4d
          - 41f1b537-b7f5-41c3-a1b2-a75e1536c54e
      interval:
        description: Time boundary for the metrics under consideration using the ISO-8601 standard
        type: string
        example: 2018-04-08T14:00:00/2018-04-09T15:00:00
      timeout:
        description: Query timeout in milliseconds
        type: integer
        example: 30000
      ignoreCleaning:
        description: A value of true will have the aggregation request execute on all data regardless of whether it has been cleaned or not
        type: boolean
      sorted:
        type: string
        description: Indicates whether the response should return the topn in ascending or descending order. The default value is descending
        enum: [asc, desc]
        example:
          - asc
          - desc
      aggregator:
        type: string
        description: The type of aggregation (avg/min/max)
        enum: [min, max, avg]
        example:
          - min
          - max
          - avg
      numResults:
        description: Number of results to return
        type: integer
      metric:
        description: An identifier that considers one specific metric based on the provided information
        $ref: '#/definitions/MetricIdentifierFilter'
      dimensions:
        description: An array of metric dimensions that filter-in metrics that adhere to those dimensions. Refer to the DimensionFilter object for further information
        $ref: '#/definitions/DimensionFilter'
      metricsView:
        x-omitempty: true
        type: array
        items:
          $ref: '#/definitions/MetricView'

  MetricView:
    type: object
    required: [metric, aggregator, name]
    properties:
      metric:
        type: string
        example: delayP95_max
      aggregator:
        type: string
        example: min/max/sum/
      name:
        type: string
        example: delayP95

  TopNForMetricReport:
    description: The rendered response structure from the metric query
    type: array
    items:
      type: object
      allOf:
        - $ref: '#/definitions/ResultEntryParameters'
        - properties:
            result:
              description: Ranked list of top metric values for the specified criteria
              type: object
              required: [value]
              properties:
                count:
                  type: integer
                value:
                  type: number
                  format: float

  # THRESHOLD CROSSING DEFINITIONS
  ## REQUEST DEFINITION
  JsonApiThresholdCrossingRequest:
    description: JSON API compliant wrapper for the threshold crossing query
    type: object
    properties:
      data:
        type: object
        required: [type, attributes]
        properties:
          id:
            type: string
          type: 
            type: string
            enum: [thresholdCrossings]
          attributes:
            $ref: '#/definitions/ThresholdCrossingConfig'

  ## RESPONSE DEFINITION
  JsonApiThresholdCrossingResponse:
    description: JSON API compliant wrapper for the threshold crossing response
    type: object
    properties:
      data:
        type: object
        required: [type]
        properties:
          id:
            type: string
          type: 
            type: string
            enum: [thresholdCrossings]
          attributes:
            type: object
            properties:
              config:
                $ref: '#/definitions/ThresholdCrossingConfig'
              result:
                $ref: '#/definitions/ThresholdCrossingReport'
        
  ## ENTITY DEFINITIONS
  ThresholdCrossingConfig:
    description: The necessary request parameters for the metric api call
    type: object
    required: [interval, metrics]
    properties:
      meta:
        description: An object that allows filtering on arbitrary metadata criteria and their values. Refer to the MetaFilter object for additional details
        $ref: '#/definitions/MetaFilter'
        example: {"region":["montreal","ottawa"], "group":["radio"]}
      interval:
        description: Time boundary for the metrics under consideration using the ISO-8601 standard
        type: string
        example: 2018-04-08T14:00:00/2018-04-09T15:00:00
      granularity:
        description: the granularity for timeseries in ISO-8601 duration format, or ALL
        type: string
        example: PT1H
      thresholdProfileId:
        type: string
        description: ID of the threshold profile that is used to select metrics and events
        example: d1988d68-7444-4098-91eb-bd5a987397cb
      timeout:
        type: integer
        description: query timeout in milliseconds
        example: 30000
      ignoreCleaning:
        description: A value of true will have the aggregation request execute on all data regardless of whether it has been cleaned or not
        type: boolean
      metrics:
        type: array
        description: limits the results to include only metrics in the whitelist
        items:
          $ref: '#/definitions/MetricIdentifierFilter'

  ThresholdCrossingReport:
    type: object
    properties:
      metric:
        type: array
        items:
          $ref: '#/definitions/ThresholdCrossingReportMetric'

  ThresholdCrossingReportMetric:
    allOf: 
    - $ref: '#/definitions/MetricIdentifierFilter'
    - properties:
        critical:
            type: array
            items:
                $ref: '#/definitions/ThresholdCrossingViolations'
        major:
            type: array
            items:
                $ref: '#/definitions/ThresholdCrossingViolations'
        minor:
            type: array
            items:
                $ref: '#/definitions/ThresholdCrossingViolations'
        warning:
            type: array
            items:
                $ref: '#/definitions/ThresholdCrossingViolations'
        sla:
            type: array
            items:
                $ref: '#/definitions/ThresholdCrossingViolations'

  ThresholdCrossingViolations:
    type: object
    required:
      - violationCount
      - violationDuration
      - timestamp
    properties:
      timestamp:
        type: string
      violationCount:
        type: integer
      violationDuration:
        type: integer

  # COMMON METRIC ENTITIES
  ResultEntryParameters:
    description: Describes filtering criteria used for a particular query
    type: object
    required: [metric]
    properties:
      monitoredObjectIds:
        x-omitempty: true
        type: array
        items:
          type: string
      vendor:
        type: string
      objectType:
        x-omitempty: true
        type: array
        items:
          type: string
      metric:
        type: string
      direction:
        x-omitempty: true
        type: array
        items:
          type: string

  MetricResultSeries:
    description: Describes series data prefixed with the filter criteria that were used to generate the output
    type: object
    allOf:
      - $ref: '#/definitions/ResultEntryParameters'
      - properties:
          series:
            type: array
            items:
              $ref: '#/definitions/MetricResultEntry'
        required: [series]

  MetricResultEntry:
    description: A singular time series entry that contains the timestamp and value
    type: object
    required: [timestamp, value]
    properties:
      timestamp:
        type: string
      value:
        type: number
        format: double
  MonitoredObjectCreateRequest:
    type: "object"
    required: ["data"]
    description: "Object used to create a new Monitored Object in Datahub"
    properties:
      data:
        $ref: '#/definitions/MonitoredObjectCreate'
                    
  MonitoredObjectUpdateRequest:
    type: "object"
    required: ["data"]
    description: "Object used to update an existing Monitored Object in Datahub"
    properties:
      data:
        $ref: '#/definitions/MonitoredObjectUpdate'


  MonitoredObjectListResponse:
    type: "object"
    description: "Monitoerd Object response including one or more values"
    required: ["data"]
    properties:
      links:
        type: "object"
        additionalProperties:
          type: "string"
      data:
        type: "array"
        items:
          $ref: '#/definitions/MonitoredObject'

  MonitoredObjectResponse:
    type: "object"
    description: "A single object Monitored Object response from Datahub"
    required: ["data"]
    properties:
      links:
        type: "object"
        additionalProperties:
          type: "string"
      data:
        $ref: '#/definitions/MonitoredObject'

  MonitoredObject:
    type: "object"
    required: ["type", "id", "attributes"]
    properties:
      type: 
        type: "string"
        enum: [monitoredObjects]
      id:
        type: "string"
      attributes:
        type: "object"
        required: ["_rev", "attributes"]
        properties:
          _rev:
            type: "string"
            description: "Value used to ensure updates to this object are handled in order."
          datatype:
            type: "string"
            description: "Name used to identify this type of record in Datahub"
          tenantId:
            type: "string"
            description: "Unique identifier of the Tenant in Datahub"
          objectId:
            type: "string"
            description: "Unique identifier of the Monitored Object in Datahub"
          actuatorName: 
            type: "string"
            description: "Name of the origin of the Monitored Object"
          actuatorType: 
            type: "string"
            description: "Type of the origin of the Monitored Object"
            enum: [unknown, accedian-nid, accedian-vnid]
          reflectorName: 
            type: "string"
            description: "Name of the target of the Monitored Object"
          reflectorType: 
            type: "string"
            description: "Type of the target of the Monitored Object"
            enum: [unknown, accedian-nid, accedian-vnid]
          objectName: 
            type: "string"
            description: "Common name of the Monitored Object"
          objectType: 
            type: "string"
            description: "Type of the Monitored Object"
            enum: [unknown, flowmeter, twamp-pe, twamp-sf, twamp-sl]
          meta:
            type: "object"
            description: "Attributes added to a Monitored Object that help identify the Mlnitored Object as well as provide flitering/grouping properties"
            pattern: '^[a-z_]+$'
            additionalProperties:
              type: "string"
            example:
              "region": "paris"
              "wgs87_x": "-45.7123912"
              "wgs87_y": "-74.2130912"
          createdTimestamp:
            type: "integer"
            format: "int64"
            description: "Time since epoch at which this object was instantiated."
          lastModifiedTimestamp:
            type: "integer"
            format: "int64"
            description: "Time since epoch at which this object was last altered."

  BulkOperationResponseV2:
    type: "object"
    required: ["data"]
    properties:
      data:
        type: "array"
        items:
          type: "object"
          required: ["type", "id", "attributes"]
          properties:
            type: 
              type: "string"
              enum: [bulkOperationResponses]
            id:
              type: "string"
            attributes:
              description: "Provides the result of multiple operations that were issued in a single request to Datahub"
              type: "object"
              properties:
                ok:
                  type: "boolean"
                id:
                  type: "string"
                rev:
                  type: "string"
                error:
                  type: "string"
                reason:
                  type: "string"

  BulkMonitoredObjectCreateRequest:
    type: "object"
    required: ["data"]
    description: "Object used to create one or more Monitored Object in Datahub"
    properties:
      data:
        type: "array"
        items:
          $ref: '#/definitions/MonitoredObjectCreate'

  MonitoredObjectCreate:
    type: "object"
    required: ["type", "attributes"]
    properties:
      type: 
        type: "string"
        enum: [monitoredObjects]
      id:
        type: "string"
      attributes:
        type: "object"
        required: ["objectId"]
        properties:
          objectId:
            type: "string"
            description: "Unique identifier of the Monitored Object in Datahub"
          actuatorName: 
            type: "string"
            description: "Name of the origin of the Monitored Object"
          actuatorType: 
            type: "string"
            description: "Type of the origin of the Monitored Object"
            enum: [unknown, accedian-nid, accedian-vnid]
          reflectorName: 
            type: "string"
            description: "Name of the target of the Monitored Object"
          reflectorType: 
            type: "string"
            description: "Type of the target of the Monitored Object"
            enum: [unknown, accedian-nid, accedian-vnid]
          objectName: 
            type: "string"
            description: "Name of the Monitored Object"
          objectType: 
            type: "string"
            description: "Type of the Monitored Object"
            enum: [unknown, flowmeter, twamp-pe, twamp-sf, twamp-sl]
          meta:
            type: "object"
            description: "Attributes added to a Monitored Object that help identify the Mlnitored Object as well as provide flitering/grouping properties"
            additionalProperties:
              type: "string"
            example:
              "region": "paris"
              "wgs87_x": "-45.7123912"
              "wgs87_y": "-74.2130912"

  BulkMonitoredObjectMetaCreateRequest: 
    type: "object"
    required: ["data"]
    description: "Object used to update the meta information for one or more Monitored Objects in Datahub"
    properties:
      data:
        type: "object"
        required: ["type", "attributes"]
        properties:
          type: 
            type: "string"
            enum: [monitoredObjectsMeta]
          attributes:
            type: "object"
            properties:
              metadata-entries:
                type: "array"
                items:
                  type: "object"
                  required: ["objectName", "metadata"]
                  properties:
                    objectName:
                      type: "string"
                      description: "Name of the monitored object in the datastore"
                    metadata:
                      type: "object"
                      description: "Attributes added to a Monitored Object that help identify the Monitored Object as well as provide filtering/grouping properties"
                      additionalProperties:
                        type: "string"
                      example:
                        "region": "paris"
                        "wgs87_x": "-45.7123912"
                        "wgs87_y": "-74.2130912"
  

  BulkMonitoredObjectUpdateRequest:
    type: "object"
    description: "Object used to update one or more Monitored Objects in Datahub"
    required: ["data"]
    properties:
      data:
        type: "array"
        items:
          $ref: '#/definitions/MonitoredObjectUpdate'

  MonitoredObjectFilteredListRequest:
    type: "object"
    properties:
      meta:
        $ref: '#/definitions/MetaFilter'
  MonitoredObjectFilteredListResponse:
      type: "object"
      required: ["data"]
      properties:
        data:
          $ref: '#/definitions/MonitoredObjectFilteredList'
  MonitoredObjectFilteredList:
      type: "object"
      required: ["type", "attributes"]
      properties:
        id:
          type: "string"
        type: 
          type: "string"
          enum: ["filteredResourceIdentifierList"]
          default: "filteredResourceIdentifierList"
        attributes:
          type: "object"
          properties:
            resourceIdentifiers:
              type: "array"
              items:
                type: "string"

  MonitoredObjectUpdate:
    type: "object"
    required: ["type", "id", "attributes"]
    properties:
      type: 
        type: "string"
        enum: [monitoredObjects]
      id:
        type: "string"
      attributes:
        type: "object"
        required: ["_rev", "objectId", "actuatorName", "actuatorType", "reflectorName", "reflectorType", "objectName", "objectType", "createdTimestamp"]
        properties:
          _rev:
            type: "string"
            description: "Value used to ensure updates to this object are handled in order."
          objectId:
            type: "string"
            description: "Unique identifier of the Monitored Object in Datahub"
          actuatorName: 
            type: "string"
            description: "Name of the origin of the Monitored Object"
          actuatorType: 
            type: "string"
            description: "Type of the origin of the Monitored Object"
            enum: [unknown, accedian-nid, accedian-vnid]
          reflectorName: 
            type: "string"
            description: "Name of the target of the Monitored Object"
          reflectorType: 
            type: "string"
            description: "Type of the target of the Monitored Object"
            enum: [unknown, accedian-nid, accedian-vnid]
          objectName: 
            type: "string"
            description: "Name of the Monitored Object"
          objectType: 
            type: "string"
            description: "Type of the Monitored Object"
            enum: [unknown, flowmeter, twamp-pe, twamp-sf, twamp-sl]
          createdTimestamp:
            type: "integer"
            description: "Time since epoch at which this object was instantiated."
          meta:
            type: "object"
            description: "Attributes added to a Monitored Object that help identify the Mlnitored Object as well as provide flitering/grouping properties"
            additionalProperties:
              type: "string"
            example:
              "region": "paris"
              "wgs87_x": "-45.7123912"
              "wgs87_y": "-74.2130912"
  ReportScheduleConfigCreateRequest:
    type: "object"
    required: ["data"]
    description: "Object used to create a new Report Generation Schedule in Datahub"
    properties:
      data:
        type: "object"
        required: ["type", "attributes"]
        properties:
          type: 
            type: "string"
            enum: [reportScheduleConfigs]
          id:
            type: "string"
          relationships:
            $ref: '#/definitions/ReportScheduleConfigRelationships'
          attributes:
            type: "object"
            required: ["relationships", "name"]
            properties:
              timeRangeDuration: 
                type: "string"
                description: "Period of time for which the report will be generated"
              thresholdProfile: 
                type: "string"
                description: "The unique identifier of the Threshold Profile used to generate the report"
              granularity: 
                type: "string"
                description: "Time period for which individual results should be aggregated"
              timeout: 
                type: "integer"
                description: "Amount if time, in ms, before which the request to generate the report should be cancelled"
              timezone: 
                type: "string"
                description: "Timezone used to display the results in the generated report"
              name: 
                type: "string"
                description: "Identifying name for the report to be generated"
              reportType:
                type: "string"
                description: "The type of report this config will generate"
              minute: 
                type: "string"
                description: "Recurring minute when this report should be generated"
              hour: 
                type: "string"
                description: "Recurring hour when this report should be generated"
              dayMonth: 
                type: "string"
                description: "Recurring day of the month when this report should be generated"
              month: 
                type: "string"
                description: "Recurring month when this report should be generated"
              dayWeek: 
                type: "string"
                description: "Recurring day of the week when this report should be generated"
              active:
                type: "boolean"
                description: "When true, the report will be generated. When false, the report will not be generated"
              meta:
                type: "object"
                additionalProperties:
                  type: "array"
                  items:
                    type: "string"
                    
  ReportScheduleConfigUpdateRequest:
    type: "object"
    required: ["data"]
    description: "Object used to update an existing Report Genaration Schedule in Datahub"
    properties:
      data:
        type: "object"
        required: ["type", "id", "attributes"]
        properties:
          type: 
            type: "string"
            enum: [reportScheduleConfigs]
          id:
            type: "string"
          relationships:
            $ref: '#/definitions/ReportScheduleConfigRelationships'
          attributes:
            type: "object"
            required: ["_rev"]
            properties:
              _rev:
                type: "string"
                description: "Value used to ensure updates to this object are handled in order."
              timeRangeDuration: 
                type: "string"
                description: "Period of time for which the report will be generated"
              granularity: 
                type: "string"
                description: "Time period for which individual results should be aggregated"
              timeout: 
                type: "integer"
                description: "Amount if time, in ms, before which the request to generate the report should be cancelled"
              timezone: 
                type: "string"
                description: "Timezone used to display the results in the generated report"
              name: 
                type: "string"
                description: "Identifying name for the report to be generated"
              reportType:
                type: "string"
                description: "The type of report this config will generate"
              minute: 
                type: "string"
                description: "Recurring minute when this report should be generated"
              hour: 
                type: "string"
                description: "Recurring hour when this report should be generated"
              dayMonth: 
                type: "string"
                description: "Recurring day of the month when this report should be generated"
              month: 
                type: "string"
                description: "Recurring month when this report should be generated"
              dayWeek: 
                type: "string"
                description: "Recurring day of the week when this report should be generated"
              active:
                type: "boolean"
                description: "When true, the report will be generated. When false, the report will not be generated"
              meta:
                type: "object"
                additionalProperties:
                  type: "array"
                  items:
                    type: "string"
              

  ReportScheduleConfigResponse:
    type: "object"
    description: "A single object Report Schedule Configuration response from Datahub"
    properties:
      data:
        $ref: '#/definitions/ReportScheduleConfig'

  ReportScheduleConfigListResponse:
    type: "object"
    description: "Report Schedule Configuration response including one or more values"
    properties:
      data:
        type: "array"
        items:
           $ref: '#/definitions/ReportScheduleConfig'

  ReportScheduleConfig:
    type: "object"
    required: ["type", "id", "attributes"]
    properties:
      type: 
        type: "string"
        enum: [reportScheduleConfigs]
      id:
        type: "string"
      relationships:
            $ref: '#/definitions/ReportScheduleConfigRelationships'
      attributes:
        type: "object"
        required: ["_rev", "datatype", "tenantId", "timeRangeDuration", "granularity", "timeout", "timezone", "name", "reportType", "minute", "hour", "dayMonth", "month", "dayWeek", "active", "meta", "createdTimestamp", "lastModifiedTimestamp"]
        properties:
          _rev:
            type: "string"
            description: "Value used to ensure updates to this object are handled in order."
          datatype:
            type: "string"
            description: "Name used to identify this type of record in Datahub"
          tenantId:
            type: "string"
            description: "Unique identifier of the Tenant in Datahub"
          timeRangeDuration: 
            type: "string"
            description: "Period of time for which the report will be generated"
          granularity: 
            type: "string"
            description: "Time period for which individual results should be aggregated"
          timeout: 
            type: "integer"
            description: "Amount if time, in ms, before which the request to generate the report should be cancelled"
          timezone: 
            type: "string"
            description: "Timezone used to display the results in the generated report"
          name: 
            type: "string"
            description: "Identifying name for the report to be generated"
          reportType:
            type: "string"
            description: "The type of report this config will generate"
          minute: 
            type: "string"
            description: "Recurring minute when this report should be generated"
          hour: 
            type: "string"
            description: "Recurring hour when this report should be generated"
          dayMonth: 
            type: "string"
            description: "Recurring day of the month when this report should be generated"
          month: 
            type: "string"
            description: "Recurring month when this report should be generated"
          dayWeek: 
            type: "string"
            description: "Recurring day of the week when this report should be generated"
          active:
            type: "boolean"
            description: "When true, the report will be generated. When false, the report will not be generated"
          meta:
            type: "object"
            additionalProperties:
              type: "array"
              items:
                type: "string"
          createdTimestamp:
            type: "integer"
            format: "int64"
            description: "Time since epoch at which this object was instantiated."
          lastModifiedTimestamp:
            type: "integer"
            format: "int64"
            description: "Time since epoch at which this object was last altered."

  ReportScheduleConfigRelationships:
    type: "object"
    required: ["thresholdProfile"]
    properties:
      thresholdProfile:
        description: "References the unique identifier of the Threshold Profile used to generate Threshold Crossing Events for this report"
        $ref: '#/definitions/JsonApiSingleRelationship'

  ThresholdProfileCreateRequest:
    type: "object"
    required: ["data"]
    description: "Object used to create a new Threshold Profile in Datahub"
    properties:
      data:
        type: "object"
        required: ["type", "attributes"]
        properties:
          type: 
            type: "string"
            enum: [thresholdProfiles]
          id:
            type: "string"
          attributes:
            type: "object"
            required: ["name"]
            properties:
              name:
                type: "string"
              thresholds:
                description: "Thresholds will be deprecated in the next API version. Please use the 'thresholdList' property instead"
                $ref: '#/definitions/ThresholdsObject'
              thresholdList:
                $ref: '#/definitions/ThresholdList'
                description: "A collection of objects that describe Thresholds which when crossed will trigger events in Datahub"
                    
  ThresholdProfileUpdateRequest:
    type: "object"
    required: ["data"]
    description: "Object used to update an existing Threshold Profile in Datahub"
    properties:
      data:
        type: "object"
        required: ["type", "id", "attributes"]
        properties:
          type: 
            type: "string"
            enum: [thresholdProfiles]
          id:
            type: "string"
          attributes:
            type: "object"
            required: ["_rev"]
            properties:
              _rev:
                type: "string"
                description: "Value used to ensure updates to this object are handled in order."
              name:
                type: "string"
              thresholds:
                description: "Thresholds will be deprecated in the next API version. Please use the 'thresholdList' property instead"
                $ref: '#/definitions/ThresholdsObject'
              thresholdList:
                $ref: '#/definitions/ThresholdList'
                description: "A collection of objects that describe Thresholds which when crossed will trigger events in Datahub"
  
  ThresholdProfileListResponse:
    type: "object"
    description: "Threshold Profile response including one or more values"
    required: ["data"]
    properties:
      data:
        type: "array"
        items:
          $ref: '#/definitions/ThresholdProfile'

  ThresholdProfileResponse:
    type: "object"
    description: "A single object Threshold Profile response from Datahub"
    required: ["data"]
    properties:
      data:
        $ref: '#/definitions/ThresholdProfile'

  ThresholdProfile:
    type: "object"
    required: ["type", "id", "attributes"]
    properties:
      type: 
        type: "string"
        enum: [thresholdProfiles]
      id:
        type: "string"
      attributes:
        type: "object"
        required: ["tenantId", "_id", "_rev", "datatype", "name", "createdTimestamp", "lastModifiedTimestamp", "thresholds"]
        properties:
          tenantId:
            type: "string"
            description: "Unique identifier of the Tenant in Datahub"
          _id:
            type: "string"
          _rev:
            type: "string"
            description: "Value used to ensure updates to this object are handled in order."
          datatype:
            type: "string"
            description: "Name used to identify this type of record in Datahub"
          name:
            type: "string"
            description: "Identifying name of a Threshold Profile"
          createdTimestamp:
            type: "integer"
            format: "int64"
            description: "Time since epoch at which this object was instantiated."
          lastModifiedTimestamp:
            type: "integer"
            format: "int64"
            description: "Time since epoch at which this object was last altered."
          thresholds:
            description: "Thresholds will be deprecated in the next API version. Please use the 'thresholdList' property instead"
            $ref: '#/definitions/ThresholdsObject'
          thresholdList:
            $ref: '#/definitions/ThresholdList'

  ThresholdList:
    description: "Contains an array of objects that outline thresholds per vendor/monitoredObjectType/direction which, when crossed, will generate events"
    type: "array"
    items:
      type: "object"
      properties:
        vendor:
          type: "string"
          description: "The name of the Vendor from which this Metric originates"
        monitoredObjectType:
          type: "string"
          description: "The name of the type of Monitored Object for which this Metric is applicable"
        metric:
          type: "string"
          description: "The name of the Metric"
        direction:
          type: "string"
          description: "Describes the direction of the test in case a Threshold needs to be different for one direction (i.e. actuator to reflector) versus another (i.e. round trip)"
        enabled:
          type: "string"
          description: "When true, Threshold Crossing for this Metric will be reported. When false, Threshold Crossings for this Metric are not reported."
        dimensions:
          type: "object"
          description: "Provides data properties by which the Metric may be filtered and/or aggregated"
        events:
          description: "A collection of objects that describe the properties of a Threshold for a Metric"
          type: "array"
          items:
            type: "object"
            additionalProperties:
              type: "string"

  ThresholdsObject:
    type: "object"
    properties:
      vendorMap:
        type: "object"
        additionalProperties:
          type: "object"
          properties:
            metricMap:
              type: "object"
              additionalProperties:
                type: "object"
                properties:
                  eventAttrMap:
                    type: "object"
                    additionalProperties:
                      type: "string"
            monitoredObjectTypeMap:
              type: "object"
              additionalProperties:
                type: "object"
                properties:
                  metricMap:
                    type: "object"
                    additionalProperties:
                      type: "object"
                      properties:
                        directionMap:
                          type: "object"
                          additionalProperties:
                            type: "object"
                            properties:
                              eventMap:
                                type: "object"
                                additionalProperties:
                                  type: "object"
                                  properties:
                                    eventAttrMap:
                                      type: "object"
                                      additionalProperties:
                                        type: "string"
  
  ValidationResponse:
    type: "object"
    properties:
      serviceResponse:
        $ref: '#/definitions/ServiceResponse'
  ServiceResponse:
    type: "object"
    properties:
      authenticationSuccess:
        $ref: '#/definitions/ServiceResponseAuthenticationSuccess'
      authenticationFailure:
        $ref: '#/definitions/ServiceResponseAuthenticationFailure'
  ServiceResponseAuthenticationSuccess:
    type: "object"
    properties:
      user:
        type: "string"
      attributes:
        $ref: '#/definitions/ServiceResponseAuthenticationSuccessAttributes'
  ServiceResponseAuthenticationSuccessAttributes:
    type: "object"
    properties:
      credentialType:
        type: "string"
      isFromNewLogin:
        type: "array"
        items:
          type: "boolean"
      authenticationDate:
        type: "array"
        items:
          type: "number"
          format: "double"
      authenticationMethod:
        type: "string"
      roles:
        type: "array"
        items:
          type: "string"
      isPasswordSet:
        type: "array"
        items:
          type: "string"
      isRegisteredForEmail:
        type: "array"
        items:
          type: "string"
      name:
        type: "array"
        items:
          type: "string"
      tenants:
        type: "array"
        items:
          type: "string"
      id:
        type: "array"
        items:
          type: "string"
      onboardingToken:
        type: "array"
        items:
          type: "string"
      successfulAuthenticationHandlers:
        type: "array"
        items:
          type: "string"
      longTermAuthenticationRequestTokenUsed:
        type: "array"
        items:
          type: "boolean"
  ServiceResponseAuthenticationFailure:
    type: "object"
    properties:
      code:
        type: "string"
      description:
        type: "string"
  
  JsonApiAAAUser:
    type: "object"
    properties:
      data:
        $ref: '#/definitions/AAAUser'
  JsonApiAAAUserList:
    type: "object"
    properties:
      data:
        type: "array"
        items:
           $ref: '#/definitions/AAAUser'
  AAAUser:
    type: "object"
    properties:
      type: 
        type: "string"
        enum: [users]
        default: "users"
      id:
        type: "string"
      attributes:
        $ref: '#/definitions/AAAUserAttr'
  AAAUserAttr:
    type: "object"
    properties:
      tenants:
        type: "array"
        items:
          type: "string"
          maxLength: 256
      emailAddress:
        type: "string"
        format: "email"
        maxLength: 256
      password: 
        type: "string"
        minLength: 8
        maxLength: 64
      name:
        type: "string"
        maxLength: 64
      roles: 
        type: "array"
        items:
          type: "string"
          minLength: 7
          maxLength: 256
          enum: [unknown, skylight-admin, tenant-admin, tenant-user]
          default: "tenant-user"
      isPasswordSet: 
        type: "boolean"
        default: false
      isRegisteredForEmail: 
        type: "boolean"
        default: false
      onboardingToken:
        type: "string"
        maxLength: 256

  EmailChangeRequest:
    type: "object"
    required: ["oldEmailAddress", "newEmailAddress"]
    properties:
      oldEmailAddress:
        type: "string"
        format: "email"
        maxLength: 256
      newEmailAddress: 
        type: "string"
        format: "email"
        maxLength: 256

  SetPasswordRequest:
    type: "object"
    required: ["password", "onboardingToken"]
    properties:
      password: 
        type: "string"
        minLength: 8
        maxLength: 64
      onboardingToken:
        type: "string"
        maxLength: 256

  PasswordChangeRequest:
    type: "object"
    required: ["oldPassword", "newPassword"]
    properties:
      oldPassword:
        type: "string"
        minLength: 8
        maxLength: 64
      newPassword: 
        type: "string"
        minLength: 8
        maxLength: 64
  
  JsonApiTenantInfo:
    type: "object"
    properties:
      data:
        $ref: '#/definitions/TenantInfo'
  TenantInfo:
    type: "object"
    properties:
      type: 
        type: "string"
        enum: [tenant-info]
        default: "tenant-info"
      id:
        type: "string"
        description: "The subdomain of the tenant"
      attributes:
        $ref: '#/definitions/TenantInfoAttr'
  TenantInfoAttr:
    type: "object"
    properties:
      tenantName:
        type: "string"
        maxLength: 256
      tenantId:
        type: "string"
        maxLength: 256

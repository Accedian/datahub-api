{
  "swagger": "2.0",
  "host": "example.com",
  "info": {
    "title": "DataHub API documentation",
    "version": "1.0.0",
    "contact": {
      "email": "info@accedian.net"
    },
    "description": "Here is Datahub's API documentation.\n# Introduction\nThis API is documented in **Open API format v2**. You can download the full API spec above, and use it with\ncompatible code generators to generate the client stubs.\n# Quick setup\n(Almost) every endpoint require a [valid user authentication](/#tag/AuthService), so this is probably where you should start.\nDepending on the access rights associated with your account, some endpoints may not be authorized. When such restriction exists,\nthe API documentation will outline which acess rights are required to access or modify a given resource.\n\n## Authenticate to obtain an Authorized Token\nYou must optain an `Authorization Bearer` (for subsequent API calls) or a set-cookie, for browser related calls. Both \nof these can be obtained by the [auth/login](/#tag/AuthService) endpoint.\n\n```bash\ncurl -X POST \\\n   https://tenant-url.npav.accedian.net/api/v1/auth/login \\\n   -H 'Cache-Control: no-cache' \\\n   -H 'Content-Type: application/x-www-form-urlencoded' \\\n   -d 'username=tenantUsername&password=tenantUserPassword'\n```\n> Pro-tip: Replace \"tenant-url\" by your tenant name\n\nThe response will contained an authorized header and a set-cookie header\n\n```bash\nHTTP/2 200\ncontent-type: application/vnd.api+json\ncontent-length: 208\nauthorization: Bearer MTUzNTAyNDg[...]\nset-cookie: skylight-aaa=MTUzNTAyNDg[...]\n{\n  \"data\": {\n    \"attributes\":{\n      \"emailAddress\":\"tenantUsername\",\n      \"isPasswordSet\":true,\n      \"isRegisteredForEmail\":false,\n      \"name\":\"tenantName\",\n      \"roles\":[\"tenant-role\"],\n      \"tenants\":[\"tenantName\"]},\n      \"id\":\"1\",\n      \"type\":\"users\"\n      }\n}\n```\n\n## Making an authorized API request - (RAW metrics API query)\n\nOnce you have optained an `Authorization bearer` token, you can make a query to retrieve [RAW metrics](/#operation/GetRawMetrics). \n\n```bash\ncurl -X POST https://accedian-dh2.npav.accedian.net/api/v2/raw-metrics \\\n  -d \"\\\n    {'tenantId':'tenant12345',\\\n     'interval':'2018-08-08T11%3A12%3A53-04%3A00%2F2018-08-09T11%3A12%3A53-04%3A00',\\\n     'granularity':'PT78.545S',\\\n     'meta':{'colors':['orange']},\\\n     'timeout':30000,\\\n     'metrics':['jitterP95'],\\\n     'directions':['0','1','2'],\\\n     'objectType':'twamp-sf'\\\n    }\" -H 'Cache-Control: no-cache' -H 'Authorization:  MTUzNTAyNDg[...]'\n\n``` \n"
  },
  "basePath": "/api",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json",
    "application/vnd.api+json"
  ],
  "produces": [
    "application/json",
    "application/vnd.api+json"
  ],
  "paths": {
    "/v1/auth/users": {
      "post": {
        "summary": "Create a new User in Skylight AAA",
        "operationId": "CreateUser",
        "consumes": [
          "application/vnd.api+json"
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "201": {
            "description": "User was successfully created in Skylight AAA",
            "schema": {
              "$ref": "#/definitions/JsonApiAAAUser"
            }
          },
          "403": {
            "description": "Requestor does not have permission to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "409": {
            "description": "Attempt to provision a User that is already provisioned",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JsonApiAAAUser"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      },
      "get": {
        "summary": "Retrieve a list of Users known to Skylight AAA",
        "operationId": "GetAllUsers",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "Returns a list of known Users to Skylight AAA",
            "schema": {
              "$ref": "#/definitions/JsonApiAAAUserList"
            }
          },
          "403": {
            "description": "Requestor does not have permission to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "No Users provisioned",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "tags": [
          "AuthService"
        ]
      }
    },
    "/v1/auth/users/{userId}": {
      "put": {
        "summary": "Update an existing User in Skylight AAA. Does not update User email or Password.",
        "operationId": "UpdateUser",
        "consumes": [
          "application/vnd.api+json"
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "User was successfully updated in Skylight AAA",
            "schema": {
              "$ref": "#/definitions/JsonApiAAAUser"
            }
          },
          "403": {
            "description": "Requestor does not have permission to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Attempt to update user but the user does not exist",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JsonApiAAAUser"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier of the User to be updated."
          }
        ],
        "tags": [
          "AuthService"
        ]
      },
      "patch": {
        "summary": "Update properties of an existing User in Skylight AAA. Does not update User email or Password.",
        "operationId": "UpdateUserProperties",
        "consumes": [
          "application/vnd.api+json"
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "User was successfully updated in Skylight AAA",
            "schema": {
              "$ref": "#/definitions/JsonApiAAAUser"
            }
          },
          "400": {
            "description": "Attempt to update user but there is something wrong with the request data",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "Requestor does not have permission to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Attempt to update user but the user does not exist",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JsonApiAAAUser"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier of the User to be updated."
          }
        ],
        "tags": [
          "AuthService"
        ]
      },
      "get": {
        "summary": "Retrieve a single User by its known Id.",
        "operationId": "GetUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "Returns a known User to Skylight AAA",
            "schema": {
              "$ref": "#/definitions/JsonApiAAAUser"
            }
          },
          "403": {
            "description": "Requestor does not have permission to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier of the User to be returned."
          }
        ],
        "tags": [
          "AuthService"
        ]
      },
      "delete": {
        "summary": "Delete a single User by its known Id.",
        "operationId": "DeleteUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "Returns the now deleted User from Skylight AAA",
            "schema": {
              "$ref": "#/definitions/JsonApiAAAUser"
            }
          },
          "403": {
            "description": "Requestor does not have permission to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier of the User to be deleted."
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/v1/auth/users/{userId}/password": {
      "patch": {
        "summary": "Reset a pasword for a User provisioned in Skylight AAA.",
        "operationId": "ResetPassword",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "Returns the onboarding URL for the user",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "Requestor does not have permission to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier of the User to reset the password."
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/v1/auth/users/{userId}/email": {
      "patch": {
        "summary": "Change the email address of a User provisioned in Skylight AAA.",
        "operationId": "ChangeEmailAddress",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "The email address of the user has been changed",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "Requestor does not have permission to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier of the User which is changing email address"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EmailChangeRequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/v1/auth/me": {
      "patch": {
        "summary": "Update properties of the currently authenticated User in Skylight AAA. Does not update User email or Password.",
        "operationId": "UpdateAuthenticatedUserProperties",
        "consumes": [
          "application/vnd.api+json"
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "User was successfully updated in Skylight AAA",
            "schema": {
              "$ref": "#/definitions/JsonApiAAAUser"
            }
          },
          "400": {
            "description": "Attempt to update user but there is something wrong with the request data",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Attempt to update user but there is something wrong with the authentication parameters",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Attempt to update user but the user does not exist",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JsonApiAAAUser"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      },
      "get": {
        "summary": "Retrieve the currently Authenticated User.",
        "operationId": "GetAuthenticatedUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "Returns the currently Authenticated User",
            "schema": {
              "$ref": "#/definitions/JsonApiAAAUser"
            }
          },
          "401": {
            "description": "Attempt to fetch a user but there is something wrong with the authentication parameters",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "tags": [
          "AuthService"
        ]
      },
      "delete": {
        "summary": "Delete the currently Authenticated User.",
        "operationId": "DeleteAuthenticatedUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "Returns the now deleted User from Skylight AAA",
            "schema": {
              "$ref": "#/definitions/JsonApiAAAUser"
            }
          },
          "401": {
            "description": "Attempt to delete a user but there is something wrong with the authentication parameters",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "tags": [
          "AuthService"
        ]
      }
    },
    "/v1/auth/me/password": {
      "patch": {
        "summary": "Updates the password of the currently Authenticated User.",
        "operationId": "UpdateAuthenticatedUserPassword",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "Password was successfully updated",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Attempt to update user but there is something wrong with the request data",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Attempt to update user password but there is an error evaluating the authentication token",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Attempt to update user but the user does not exist",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PasswordChangeRequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/v1/auth/me/email": {
      "patch": {
        "summary": "Change the email address of the currently Authenticated User.",
        "operationId": "ChangeAuthenticatedUserEmailAddress",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "The email address of the Authenticated User has been changed",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Attempt to update user email address but there is something wrong with the request data",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Attempt to update user email address but there is an error evaluating the authentication token",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EmailChangeRequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/v1/onboarding/{onboardingToken}": {
      "get": {
        "summary": "Retrieve the User mapped to the onboarding token.",
        "operationId": "GetUserByToken",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "Returns the User mapped to the onboarding token",
            "schema": {
              "$ref": "#/definitions/JsonApiAAAUser"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "onboardingToken",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The one-time use token provided to access the password set operation"
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/v1/onboarding/password": {
      "post": {
        "summary": "Sets the password of a User that has had their password reset.",
        "operationId": "SetUserPassword",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "The password has been set",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Attempt to update password, but the request has bad data",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Attempt to update password, but the user no longer exists",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SetPasswordRequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/v1/auth/login": {
      "post": {
        "summary": "Login a Skylight User",
        "operationId": "Login",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "Returns the Authenticated User",
            "schema": {
              "$ref": "#/definitions/JsonApiAAAUser"
            }
          },
          "401": {
            "description": "Unauthorized access attempt",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "username",
            "in": "formData",
            "description": "Unique identifier of the User requesting access",
            "type": "string"
          },
          {
            "name": "password",
            "in": "formData",
            "description": "Password for the username of the User requesting access",
            "type": "string"
          },
          {
            "name": "token",
            "in": "formData",
            "description": "Signed JWT issues by Accedian. Can be used instead of username/password",
            "type": "string"
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/v1/auth/logout": {
      "post": {
        "summary": "Logout a Skylight User",
        "operationId": "Logout",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "Successfully logged out a Skylight User",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Session not found",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "tags": [
          "AuthService"
        ]
      }
    },
    "/v1/auth/session": {
      "get": {
        "summary": "Validate an active Skylight Session and return User data",
        "operationId": "Validate",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "Returns the Authenticated User",
            "schema": {
              "$ref": "#/definitions/JsonApiAAAUser"
            }
          },
          "401": {
            "description": "Session not Authorized",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "Session not Valid",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "tags": [
          "AuthService"
        ]
      }
    },
    "/v1/auth/validate": {
      "get": {
        "summary": "Validate an active Skylight Session. Sets headers for proxy requests to have access to user data.",
        "operationId": "ValidateSessionForProxy",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "Sets Headers X-Forwarded-User-Id, X-Forwarded-User-Username, X-Forwarded-Usergroups, and X-Forwarded-User-Roles which contain the Id, Username, and Role respectively of the User for the valid session",
            "schema": {
              "type": "string"
            },
            "headers": {
              "X-Forwarded-User-Id": {
                "type": "string",
                "description": "Unique identifier of the User in Skylight AAA."
              },
              "X-Forwarded-User-Username": {
                "type": "string",
                "description": "The Username of the User in Skylight-AAA."
              },
              "X-Forwarded-User-Roles": {
                "type": "string",
                "description": "The Roles associated with this User in Skylight-AAA."
              },
              "X-Forwarded-Usergroups": {
                "type": "string",
                "description": "The Usergroups associated with this User in Skylight-AAA."
              },
              "X-Forwarded-Tenant-Id": {
                "type": "string",
                "description": "The TenantId associated with this request in Skylight-AAA."
              }
            }
          },
          "401": {
            "description": "Session not Authorized",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "Session not Valid",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "tags": [
          "AuthService"
        ]
      }
    },
    "/v1/auth/service": {
      "post": {
        "summary": "Create a new Service in Skylight AAA. This function is only available to Skylight Admin users.",
        "operationId": "CreateService",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "text/plain"
        ],
        "responses": {
          "201": {
            "description": "Service was successfully created in Skylight AAA",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "User creating the Service is not Authorized to do so",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "User does not have authorization to perform this operation",
            "schema": {
              "type": "string"
            }
          },
          "409": {
            "description": "Attempt to provision a Service that is already provisioned",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "serviceName",
            "in": "formData",
            "description": "Unique identifier of the Service to be added",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/v1/onboarding/tenant-info": {
      "get": {
        "summary": "Retrieves the generic identifyiong information for a customer.",
        "operationId": "GetTenantInfo",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved tenant info",
            "schema": {
              "$ref": "#/definitions/JsonApiTenantInfo"
            }
          },
          "404": {
            "description": "No branding found for this tenant",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "tags": [
          "AuthService"
        ]
      }
    },
    "/v1/onboarding/tenant-identity": {
      "put": {
        "summary": "Adds tenant identifying information which is retreived in the 'onboarding/tenant-info' call. Operation is only available to Skylight Administrators.",
        "operationId": "SetTenantIdentity",
        "consumes": [
          "application/vnd.api+json"
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "201": {
            "description": "Successfully updated tenant identifying information",
            "schema": {
              "$ref": "#/definitions/JsonApiTenantInfo"
            }
          },
          "400": {
            "description": "The request data is not in the proper format",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "User is not authorized to perform this operation",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "Requestor does not have permission to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JsonApiTenantInfo"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/v1/onboarding/tenant-identity/{subdomain}": {
      "delete": {
        "summary": "Deletes tenant identifying information. Operation is only available to Skylight Administrators.",
        "operationId": "DeleteTenantIdentity",
        "consumes": [
          "text/plain"
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted tenant identifying information",
            "schema": {
              "$ref": "#/definitions/JsonApiTenantInfo"
            }
          },
          "400": {
            "description": "The request data is not in the proper format",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "User is not authorized to perform this operation",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "Requestor does not have permission to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Tenant identity record not found",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "subdomain",
            "in": "path",
            "description": "Unique identifier of the Subdomain to delete the tenant mapping",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/v1/auth/tokens": {
      "post": {
        "summary": "Create a new web token for authentication/authorization",
        "operationId": "CreateToken",
        "consumes": [
          "application/vnd.api+json"
        ],
        "produces": [
          "text/plain"
        ],
        "responses": {
          "201": {
            "description": "Token was successfully created in Skylight AAA",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "Requestor does not have permission to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JsonApiJWT"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      },
      "get": {
        "summary": "Retrieve a list of Tokens known to Skylight AAA",
        "operationId": "GetAllTokens",
        "consumes": [
          "application/vnd.api+json"
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "Returns a list of tokens known to Skylight AAA",
            "schema": {
              "$ref": "#/definitions/JsonApiJWTList"
            }
          },
          "403": {
            "description": "Requestor does not have permission to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "No Tokens provisioned",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "tags": [
          "AuthService"
        ]
      }
    },
    "/v1/auth/tokens/{tokenId}": {
      "get": {
        "summary": "Retrieve a single Token by its known Id.",
        "operationId": "GetToken",
        "consumes": [
          "application/vnd.api+json"
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "Returns a known Token to Skylight AAA",
            "schema": {
              "$ref": "#/definitions/JsonApiJWT"
            }
          },
          "403": {
            "description": "Requestor does not have permission to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Token not found",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "tokenId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier of the Token to be returned."
          }
        ],
        "tags": [
          "AuthService"
        ]
      },
      "patch": {
        "summary": "Update an existing Token in Skylight AAA.",
        "operationId": "UpdateToken",
        "consumes": [
          "application/vnd.api+json"
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "Token was successfully updated in Skylight AAA",
            "schema": {
              "$ref": "#/definitions/JsonApiJWT"
            }
          },
          "403": {
            "description": "Requestor does not have permission to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Attempt to update token but it does not exist",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JsonApiJWT"
            }
          },
          {
            "name": "tokenId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier of the Token to be updated."
          }
        ],
        "tags": [
          "AuthService"
        ]
      },
      "delete": {
        "summary": "Delete a single Token by its known Id.",
        "operationId": "DeleteToken",
        "consumes": [
          "application/vnd.api+json"
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "Returns the now deleted Token from Skylight AAA",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "Requestor does not have permission to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Token not found",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "tokenId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier of the Token to be deleted."
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/v1/auth/method/{emailAddress}": {
      "get": {
        "summary": "Returns a method for authentication given an email address",
        "operationId": "GetAuthenticationMethod",
        "consumes": [
          "application/vnd.api+json"
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "Returns authentication method for existing user",
            "schema": {
              "$ref": "#/definitions/AuthMethod"
            }
          },
          "204": {
            "description": "Returns an empty response to indicate that no openID has been provisioned for this tenant"
          },
          "404": {
            "description": "User with provided email does not exist",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "emailAddress",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Email address of the user trying to authenticate"
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/v1/auth/usergroups": {
      "post": {
        "summary": "Create a new Usergroup in Skylight AAA",
        "operationId": "CreateUsergroup",
        "consumes": [
          "application/vnd.api+json"
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "201": {
            "description": "Usergroup was successfully created in Skylight AAA",
            "schema": {
              "$ref": "#/definitions/JsonApiUsergroup"
            }
          },
          "403": {
            "description": "Requestor does not have permission to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "409": {
            "description": "Attempt to provision a Usergroup that is already provisioned",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JsonApiUsergroup"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      },
      "get": {
        "summary": "Retrieve a list of Usergroups known to Skylight AAA",
        "operationId": "GetAllUsergroups",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "Returns a list of known Usergroups to Skylight AAA",
            "schema": {
              "$ref": "#/definitions/JsonApiUsergroupList"
            }
          },
          "403": {
            "description": "Requestor does not have permission to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "No Usergroups provisioned",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "tags": [
          "AuthService"
        ]
      }
    },
    "/v1/auth/usergroups/{usergroupId}": {
      "get": {
        "summary": "Retrieve a single Usergroup by its known Id.",
        "operationId": "GetUsergroup",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "Returns a known Usergroup to Skylight AAA",
            "schema": {
              "$ref": "#/definitions/JsonApiUsergroup"
            }
          },
          "403": {
            "description": "Requestor does not have permission to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Usergroup not found",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "usergroupId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier of the Usergroup to be returned."
          }
        ],
        "tags": [
          "AuthService"
        ]
      },
      "patch": {
        "summary": "Update an existing Usergroup in Skylight AAA.",
        "operationId": "UpdateUsergroup",
        "consumes": [
          "application/vnd.api+json"
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "Usergroup was successfully updated in Skylight AAA",
            "schema": {
              "$ref": "#/definitions/JsonApiUsergroup"
            }
          },
          "403": {
            "description": "Requestor does not have permission to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Attempt to update usergroup but the user does not exist",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JsonApiUsergroup"
            }
          },
          {
            "name": "usergroupId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier of the Usergroup to be updated."
          }
        ],
        "tags": [
          "AuthService"
        ]
      },
      "delete": {
        "summary": "Delete a single Usergroup by its known Id.",
        "operationId": "DeleteUsergroup",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "Returns the now deleted Usergroup from Skylight AAA",
            "schema": {
              "$ref": "#/definitions/JsonApiUsergroup"
            }
          },
          "403": {
            "description": "Requestor does not have permission to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Usergroup not found",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "usergroupId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier of the Usergroup to be deleted."
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/v1/generate-sla-report": {
      "post": {
        "deprecated": true,
        "summary": "Generate an SLA Report.",
        "operationId": "GenSLAReport",
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/gathergrpcJSONAPIObject"
            }
          },
          "400": {
            "description": "Request data does not pass validation",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Components of the request parameters were not in the provisioning database",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SLAReportRequestObject"
            }
          }
        ],
        "tags": [
          "MetricsService"
        ]
      }
    },
    "/v2/metrics/threshold-crossing-by-monitored-object-top-n": {
      "post": {
        "deprecated": true,
        "summary": "Retrieve the Top N threshold crossing events using the given threshold profile and the specified metric filters",
        "operationId": "GetThresholdCrossingByMonitoredObjectTopNV2",
        "consumes": [
          "application/vnd.api+json"
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "Top N threshold crossing by monitored object successfully processed",
            "schema": {
              "$ref": "#/definitions/JsonApiThresholdCrossingByMOTopNResponse"
            }
          },
          "400": {
            "description": "Request data does not pass validation",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Missing provisioned data",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JsonApiThresholdCrossingByMOTopNRequest"
            }
          },
          {
            "name": "useMetaExplicitly",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "tags": [
          "MetricsServiceV2"
        ]
      }
    },
    "/v2/metrics/generate-sla-report": {
      "post": {
        "deprecated": true,
        "summary": "Retrieve an SLA report for given time range and parameters",
        "operationId": "GenerateSLAReportV2",
        "consumes": [
          "application/vnd.api+json"
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "SLA report successfully processed",
            "schema": {
              "$ref": "#/definitions/JsonApiSLAReportResponse"
            }
          },
          "400": {
            "description": "Request data does not pass validation",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Missing provisioned data",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JsonApiSLAReportRequest"
            }
          },
          {
            "name": "useMetaExplicitly",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "tags": [
          "MetricsServiceV2"
        ]
      }
    },
    "/v2/metrics/histogram": {
      "post": {
        "deprecated": true,
        "summary": "Retrieve a histogram of measurements using custom buckets specified in the request",
        "operationId": "GetHistogramV2",
        "consumes": [
          "application/vnd.api+json"
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "Histogram request successfully processed",
            "schema": {
              "$ref": "#/definitions/JsonApiHistogramResponse"
            }
          },
          "400": {
            "description": "Request data does not pass validation",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Missing provisioned data",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JsonApiHistogramRequest"
            }
          },
          {
            "name": "useRollupData",
            "description": "If set to true, the queries will use pre-rolled up data when returning results",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "useMetaExplicitly",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "tags": [
          "MetricsServiceV2"
        ]
      }
    },
    "/v2/metrics/topn-metrics": {
      "post": {
        "deprecated": true,
        "summary": "Retrieve the Top-N for the specified set of metrics",
        "operationId": "GetTopNForMetricV2",
        "consumes": [
          "application/vnd.api+json"
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "Top N request successfully processed",
            "schema": {
              "$ref": "#/definitions/JsonApiTopNForMetricResponse"
            }
          },
          "400": {
            "description": "Request data does not pass validation",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Missing provisioned data",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JsonApiTopNForMetricRequest"
            }
          },
          {
            "name": "useMetaExplicitly",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "tags": [
          "MetricsServiceV2"
        ]
      }
    },
    "/v2/metrics/threshold-crossing": {
      "post": {
        "deprecated": true,
        "summary": "Retrieve threshold crossing events for the given threshold profile",
        "operationId": "QueryThresholdCrossingV2",
        "consumes": [
          "application/vnd.api+json"
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "Threshold crossings successfully processed",
            "schema": {
              "$ref": "#/definitions/JsonApiThresholdCrossingResponse"
            }
          },
          "400": {
            "description": "Request data does not pass validation",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Threshold profile not found",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JsonApiThresholdCrossingRequest"
            }
          },
          {
            "name": "useMetaExplicitly",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "tags": [
          "MetricsServiceV2"
        ]
      }
    },
    "/v2/metrics/aggregated-metrics": {
      "post": {
        "deprecated": true,
        "summary": "Retrieve a variety of aggregation types against the specified metric filters",
        "operationId": "QueryAggregateMetricsV2",
        "consumes": [
          "application/vnd.api+json"
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "Aggregation request successfully processed",
            "schema": {
              "$ref": "#/definitions/JsonApiAggregationResponse"
            }
          },
          "400": {
            "description": "Request data does not pass validation",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Missing provisioned data from request parameters",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JsonApiAggregationRequest"
            }
          },
          {
            "name": "useRollupData",
            "description": "If set to true, the queries will use pre-rolled up data when returning results",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "useMetaExplicitly",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "tags": [
          "MetricsServiceV2"
        ]
      }
    },
    "/v2/metrics/threshold-crossing-duration": {
      "post": {
        "deprecated": true,
        "summary": "Retrieve time spent in violation of a threshold crossing for the given threshold profile",
        "operationId": "QueryThresholdCrossingDurationV2",
        "consumes": [
          "application/vnd.api+json"
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "Threshold crossing durations successfully processed",
            "schema": {
              "$ref": "#/definitions/ThresholdCrossingDurationResponse"
            }
          },
          "400": {
            "description": "Request data does not pass validation",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Threshold profile not found",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ThresholdCrossingDurationRequest"
            }
          },
          {
            "name": "useMetaExplicitly",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "tags": [
          "MetricsServiceV2"
        ]
      }
    },
    "/v3/metrics/groupBy": {
      "post": {
        "summary": "Retrieves specified aggregation grouped by the provided fields and filtered by the metadata specification",
        "operationId": "GetGroupByV3",
        "consumes": [
          "application/vnd.api+json"
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "Group by successfully processed",
            "schema": {
              "$ref": "#/definitions/JsonApiGroupByResponse"
            }
          },
          "400": {
            "description": "Request data does not pass validation",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Missing provisioned data",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JsonApiGroupByRequest"
            }
          }
        ],
        "tags": [
          "MetricsServiceV3"
        ]
      }
    },
    "/v3/metrics/aggregate": {
      "post": {
        "summary": "Aggregates the provided metrics and filters them based on the provided criteria",
        "operationId": "GetAggregateV3",
        "consumes": [
          "application/vnd.api+json"
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "Aggregate query successfully processed",
            "schema": {
              "$ref": "#/definitions/JsonApiAggregateV3Response"
            }
          },
          "400": {
            "description": "Request data does not pass validation",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Missing provisioned data",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JsonApiAggregateV3Request"
            }
          }
        ],
        "tags": [
          "MetricsServiceV3"
        ]
      }
    },
    "/v2/alerts/monitoredObjectIds/{monitoredObjectId}": {
      "get": {
        "summary": "Retrieve the alerts for a given monitoredObjectId over an interval",
        "operationId": "getAlertsForMonitoredObject",
        "responses": {
          "200": {
            "description": "Retrieved alerts successfully",
            "schema": {
              "$ref": "#/definitions/AlertsPayloadListResponse"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "monitoredObjectId",
            "type": "string",
            "description": "The monitored object id",
            "required": true
          },
          {
            "in": "query",
            "name": "interval",
            "type": "string",
            "description": "The interval in ISO 6801 standard but with the '/' replaced with '_'",
            "required": true
          },
          {
            "in": "query",
            "name": "alertState",
            "type": "string",
            "enum": [
              "raised",
              "cleared",
              "activeAndCleared"
            ],
            "description": "Filter on a particular condition. If left empty, both raised and clears will be returned."
          },
          {
            "name": "policyId",
            "in": "query",
            "type": "string",
            "description": "The Policy ID"
          }
        ],
        "tags": [
          "TenantAlertServiceV2"
        ]
      }
    },
    "/v2/alerts/active/monitoredObjectIds/{monitoredObjectId}": {
      "get": {
        "summary": "Retrieve active alerts for the provided monitoredObjectId",
        "operationId": "getActiveAlertsForMonitoredObject",
        "responses": {
          "200": {
            "description": "Retrieved active alerts successfully",
            "schema": {
              "$ref": "#/definitions/ActiveAlertsListResponse"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "monitoredObjectId",
            "type": "string",
            "description": "The monitored object id",
            "required": true
          },
          {
            "in": "query",
            "name": "policyId",
            "type": "string",
            "description": "The policyId"
          }
        ],
        "tags": [
          "TenantAlertServiceV2"
        ]
      },
      "delete": {
        "summary": "Delete Active Alerts for the provided monitoredObjectId",
        "operationId": "deleteActiveAlertsForMonitoredObject",
        "responses": {
          "200": {
            "description": "Deleted active alerts successfully",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "monitoredObjectId",
            "type": "string",
            "description": "The monitored object id",
            "required": true
          },
          {
            "in": "query",
            "name": "policyId",
            "type": "string",
            "description": "The policyId"
          }
        ],
        "tags": [
          "TenantAlertServiceV2"
        ]
      }
    },
    "/v2/alerts/active/monitoredObjectIds": {
      "post": {
        "summary": "Create active alerts for the provided monitoredObjectId",
        "operationId": "createActiveAlertForMonitoredObject",
        "responses": {
          "200": {
            "description": "Created active alerts successfully",
            "schema": {
              "$ref": "#/definitions/ActiveAlert"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "description": "The Active Alert",
            "schema": {
              "$ref": "#/definitions/ActiveAlert"
            }
          }
        ],
        "tags": [
          "TenantAlertServiceV2"
        ]
      }
    },
    "/v2/alerts/active/policies/{policyId}": {
      "get": {
        "summary": "Retrieve active alerts for the provided policyId",
        "operationId": "getActiveAlertsForPolicy",
        "responses": {
          "200": {
            "description": "Delete active alerts successfully",
            "schema": {
              "$ref": "#/definitions/ActiveAlertsListResponse"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "policyId",
            "type": "string",
            "description": "The policyId",
            "required": true
          }
        ],
        "tags": [
          "TenantAlertServiceV2"
        ]
      },
      "delete": {
        "summary": "Delete Active Alerts for the provided policyId",
        "operationId": "deleteActiveAlertsForPolicy",
        "responses": {
          "200": {
            "description": "Deleted active alerts successfully",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "policyId",
            "type": "string",
            "description": "The policyId",
            "required": true
          },
          {
            "in": "query",
            "name": "monitoredObjectId",
            "type": "string",
            "description": "The monitored object id"
          }
        ],
        "tags": [
          "TenantAlertServiceV2"
        ]
      }
    },
    "/v2/alerts/active/groupBy": {
      "post": {
        "summary": "Retrieves specified aggregation grouped by the provided fields and filtered by the metadata specification",
        "operationId": "getActiveAlertGroupBy",
        "consumes": [
          "application/vnd.api+json"
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "Group by successfully processed",
            "schema": {
              "$ref": "#/definitions/JsonApiActiveAlertGroupByResponse"
            }
          },
          "400": {
            "description": "Request data does not pass validation",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Missing provisioned data",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JsonApiActiveAlertGroupByRequest"
            }
          }
        ],
        "tags": [
          "TenantAlertServiceV2"
        ]
      }
    },
    "/v2/alerts/active": {
      "post": {
        "summary": "Retrieve Active Alerts based on the provided filter criterea",
        "operationId": "getActiveAlertsForMetaFilter",
        "responses": {
          "200": {
            "description": "A List of active alerts based on the provided filter criterea",
            "schema": {
              "$ref": "#/definitions/ActiveAlertsListResponse"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ActiveAlertsFilteredListRequest"
            }
          }
        ],
        "tags": [
          "TenantAlertServiceV2"
        ]
      }
    },
    "/v2/analytics": {
      "post": {
        "summary": "Request Analytical analysis from Datahub",
        "operationId": "CreateAnalyticsV2",
        "consumes": [
          "application/vnd.api+json"
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/AnalyticsResponse"
            }
          },
          "400": {
            "description": "Request data does not pass validation",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AnalyticsRequest"
            }
          }
        ],
        "tags": [
          "TenantProvisioningServiceV2"
        ]
      },
      "get": {
        "summary": "Get all currently stored Analytics Result Objects",
        "operationId": "GetAllAnalyticsV2",
        "consumes": [
          "application/vnd.api+json"
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/AnalyticsListResponse"
            }
          },
          "400": {
            "description": "Request data does not pass validation",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "No Analytics results found",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "tags": [
          "TenantProvisioningServiceV2"
        ]
      }
    },
    "/v2/analytics/{analyticsId}": {
      "get": {
        "summary": "Retrieve an Analytics result by Id.",
        "operationId": "GetAnalyticsV2",
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/AnalyticsResponse"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "The specified Analytics Result is not provisioned",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "analyticsId",
            "description": "Unique identifier of an Analytics request in Datahub",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TenantProvisioningServiceV2"
        ]
      },
      "delete": {
        "summary": "Delete an Analytics result by Id.",
        "operationId": "DeleteAnalyticsV2",
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/AnalyticsResponse"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "The specified Analytics Result is not provisioned",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "analyticsId",
            "description": "Unique identifier of an Analytics request in Datahub",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TenantProvisioningServiceV2"
        ]
      }
    },
    "/v2/connector-configs": {
      "post": {
        "summary": "Create a ConnectorConfig for a Tenant.",
        "operationId": "CreateConnectorConfigV2",
        "consumes": [
          "application/vnd.api+json"
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ConnectorConfigResponse"
            }
          },
          "400": {
            "description": "Request data does not pass validation",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "409": {
            "description": "The Connector being provisioned already exists",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ConnectorConfigCreateRequest"
            }
          }
        ],
        "tags": [
          "TenantProvisioningServiceV2"
        ]
      },
      "get": {
        "summary": "Retrieve all ConnectorConfigs for the specified Tenant.",
        "operationId": "GetAllConnectorConfigsV2",
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ConnectorConfigListResponse"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "No connector configurations are provisioned",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "zone",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "TenantProvisioningServiceV2"
        ]
      }
    },
    "/v2/connector-configs/{connectorId}": {
      "get": {
        "summary": "Retrieve a Tenant ConnectorConfig by Id.",
        "operationId": "GetConnectorConfigV2",
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ConnectorConfigResponse"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "The specified connector configuration is not provisioned",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "connectorId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TenantProvisioningServiceV2"
        ]
      },
      "patch": {
        "summary": "Update a Tenant ConnectorConfig specified by the provided Connector Id.",
        "operationId": "UpdateConnectorConfigV2",
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ConnectorConfigResponse"
            }
          },
          "400": {
            "description": "Request data does not pass validation",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "The specified Connector Configuration is not provisioned",
            "schema": {
              "type": "string"
            }
          },
          "409": {
            "description": "Incorrect revision number passed in to the Connector Configuration being updated",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ConnectorConfigUpdateRequest"
            }
          },
          {
            "name": "connectorId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TenantProvisioningServiceV2"
        ]
      },
      "delete": {
        "summary": "Delete a Tenant ConnectorConfig specified by the provided Connector Id.",
        "operationId": "DeleteConnectorConfigV2",
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ConnectorConfigResponse"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "The specified Connector Configuration is not provisioned",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "connectorId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TenantProvisioningServiceV2"
        ]
      }
    },
    "/v2/connector-instances": {
      "post": {
        "summary": "Create a ConnectorInstance for a Tenant.",
        "operationId": "CreateConnectorInstanceV2",
        "consumes": [
          "application/vnd.api+json"
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ConnectorInstanceResponse"
            }
          },
          "400": {
            "description": "Request data does not pass validation",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "409": {
            "description": "The Connector Instance being provisioned already exists",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ConnectorInstanceCreateRequest"
            }
          }
        ],
        "tags": [
          "TenantProvisioningServiceV2"
        ]
      },
      "get": {
        "summary": "Retrieve all ConnectorInstances for the specified Tenant.",
        "operationId": "GetAllConnectorInstancesV2",
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ConnectorInstanceListResponse"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "No Connector Instances are provisioned",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "tags": [
          "TenantProvisioningServiceV2"
        ]
      }
    },
    "/v2/connector-instances/{connectorInstanceId}": {
      "get": {
        "summary": "Retrieve a Tenant ConnectorInstance by Id.",
        "operationId": "GetConnectorInstanceV2",
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ConnectorInstanceResponse"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "The requested Connector Instance is not provisioned",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "connectorInstanceId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TenantProvisioningServiceV2"
        ]
      },
      "patch": {
        "summary": "Update a ConnectorInstance for a Tenant.",
        "operationId": "UpdateConnectorInstanceV2",
        "consumes": [
          "application/vnd.api+json"
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ConnectorInstanceResponse"
            }
          },
          "400": {
            "description": "Request data does not pass validation",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "The requested Connector Instance is not provisioned",
            "schema": {
              "type": "string"
            }
          },
          "409": {
            "description": "Incorrect revision number passed in to the Connector Instance being updated",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ConnectorInstanceUpdateRequest"
            }
          },
          {
            "name": "connectorInstanceId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TenantProvisioningServiceV2"
        ]
      },
      "delete": {
        "summary": "Delete a Tenant ConnectorInstance specified by the provided Connector Instance Id.",
        "operationId": "DeleteConnectorInstanceV2",
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ConnectorInstanceResponse"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "The requested Connector Instance is not provisioned",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "connectorInstanceId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TenantProvisioningServiceV2"
        ]
      }
    },
    "/v2/data-cleaning-profiles": {
      "post": {
        "summary": "Provides ability to Create a Tenant Data Cleaning Profile",
        "operationId": "CreateDataCleaningProfile",
        "consumes": [
          "application/vnd.api+json"
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "201": {
            "description": "Profile creation completed successfully",
            "schema": {
              "$ref": "#/definitions/DataCleaningProfileResponse"
            }
          },
          "400": {
            "description": "Request data does not pass validation",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "409": {
            "description": "There was a conflict when creating the record",
            "schema": {
              "type": "string"
            }
          },
          "422": {
            "description": "The provided request did not pass validation",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DataCleaningProfileCreateRequest"
            }
          }
        ],
        "tags": [
          "TenantProvisioningServiceV2"
        ]
      },
      "get": {
        "summary": "Retrieve all Data Cleaning Profiles for a Tenant.",
        "operationId": "GetDataCleaningProfiles",
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "Fetch completed successfully",
            "schema": {
              "$ref": "#/definitions/DataCleaningProfileListResponse"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Record not found",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "tags": [
          "TenantProvisioningServiceV2"
        ]
      }
    },
    "/v2/data-cleaning-profiles/{profileId}": {
      "get": {
        "summary": "Retrieve a Data Cleaning Profiles for a Tenant.",
        "operationId": "GetDataCleaningProfile",
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "Fetch completed successfully",
            "schema": {
              "$ref": "#/definitions/DataCleaningProfileResponse"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "No records found",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "profileId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TenantProvisioningServiceV2"
        ]
      },
      "patch": {
        "summary": "Provides ability to Update a Tenant Data Cleaning Profile",
        "operationId": "UpdateDataCleaningProfile",
        "consumes": [
          "application/vnd.api+json"
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "Update completed successfully",
            "schema": {
              "$ref": "#/definitions/DataCleaningProfileResponse"
            }
          },
          "400": {
            "description": "Request data does not pass validation",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "No records found",
            "schema": {
              "type": "string"
            }
          },
          "409": {
            "description": "There was a conflict when updating the record",
            "schema": {
              "type": "string"
            }
          },
          "422": {
            "description": "The provided request did not pass validation",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "profileId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DataCleaningProfileUpdateRequest"
            }
          }
        ],
        "tags": [
          "TenantProvisioningServiceV2"
        ]
      },
      "delete": {
        "summary": "Delete a Data Cleaning Profile for a Tenant.",
        "operationId": "DeleteDataCleaningProfile",
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "Deletion completed successfully",
            "schema": {
              "$ref": "#/definitions/DataCleaningProfileResponse"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "No records found",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "profileId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TenantProvisioningServiceV2"
        ]
      }
    },
    "/v2/data-cleaning-history": {
      "get": {
        "summary": "Retrieve data cleaning event history for a given monitored object and time period.",
        "operationId": "GetDataCleaningHistory",
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "Fetch completed successfully",
            "schema": {
              "$ref": "#/definitions/DataCleaningHistoryResponse"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "No records found",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "monitoredObjectId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "interval",
            "description": "ISO-8601 Interval",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TenantProvisioningServiceV2"
        ]
      }
    },
    "/v2/distribution/download-roadrunner": {
      "get": {
        "summary": "Download a roadrunner tarball ready for installing",
        "operationId": "DownloadRoadrunner",
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "download roadrunner archive",
            "schema": {
              "type": "string",
              "format": "binary"
            },
            "headers": {
              "Content-Disposition": {
                "type": "string",
                "default": "attachment; filename=DataHubConnector.tar.gz;"
              },
              "Content-Type": {
                "type": "string",
                "default": "application/octet-stream"
              }
            }
          },
          "400": {
            "description": "Request data does not pass validation",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "zone",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TenantProvisioningServiceV2"
        ]
      }
    },
    "/v2/ingestion-profiles": {
      "post": {
        "summary": "Create an Ingestion Profile for a Tenant.",
        "operationId": "CreateIngestionProfileV2",
        "consumes": [
          "application/vnd.api+json"
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IngestionProfileResponse"
            }
          },
          "400": {
            "description": "Request data does not pass validation",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "409": {
            "description": "The ingestion profile already exists",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IngestionProfileCreateRequest"
            }
          }
        ],
        "tags": [
          "TenantProvisioningServiceV2"
        ]
      },
      "get": {
        "summary": "Get all Tenant Ingestion Profiles",
        "operationId": "GetAllIngestionProfilesV2",
        "consumes": [
          "application/vnd.api+json"
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IngestionProfileListResponse"
            }
          },
          "400": {
            "description": "Request data does not pass validation",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "No Ingestion Profile is provisioned",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "tags": [
          "TenantProvisioningServiceV2"
        ]
      }
    },
    "/v2/ingestion-profiles/{ingestionProfileId}": {
      "get": {
        "summary": "Retrieve a Tenant Ingestion Profile by id.",
        "operationId": "GetIngestionProfileV2",
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IngestionProfileResponse"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "The specified Ingestion Profile is not provisioned",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "ingestionProfileId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TenantProvisioningServiceV2"
        ]
      },
      "patch": {
        "summary": "Update a Tenant Ingestion Profile",
        "operationId": "UpdateIngestionProfileV2",
        "consumes": [
          "application/vnd.api+json"
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IngestionProfileResponse"
            }
          },
          "400": {
            "description": "Request data does not pass validation",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "The specified Ingestion Profile is not provisioned",
            "schema": {
              "type": "string"
            }
          },
          "409": {
            "description": "Incorrect revision provided for th update request",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "ingestionProfileId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IngestionProfileUpdateRequest"
            }
          }
        ],
        "tags": [
          "TenantProvisioningServiceV2"
        ]
      },
      "delete": {
        "summary": "Delete a Tenant Ingestion Profile specified by the provided Ingestion Profile Id.",
        "operationId": "DeleteIngestionProfileV2",
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IngestionProfileResponse"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "The specified Ingestion Profile is not provisioned",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "ingestionProfileId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TenantProvisioningServiceV2"
        ]
      }
    },
    "/v2/monitored-objects": {
      "get": {
        "summary": "Retrieve all Monitored Objects for a Tenant.",
        "operationId": "GetAllMonitoredObjectsV2",
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "Fetch completed successfully",
            "schema": {
              "$ref": "#/definitions/MonitoredObjectListResponse"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "No Monitored objects are provisioned",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "start_key",
            "in": "query",
            "type": "string",
            "description": "The name of the Monitored Object from which the result set will begin"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "integer",
            "description": "The maximum number of records to return for a single page"
          }
        ],
        "tags": [
          "TenantProvisioningServiceV2"
        ]
      },
      "post": {
        "summary": "Create a Monitored Object for a Tenant.",
        "operationId": "CreateMonitoredObjectV2",
        "consumes": [
          "application/vnd.api+json"
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MonitoredObjectResponse"
            }
          },
          "400": {
            "description": "Request data does not pass validation",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "409": {
            "description": "A Monitored Object with this objectId is already provisioned",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonitoredObjectCreateRequest"
            }
          }
        ],
        "tags": [
          "TenantProvisioningServiceV2"
        ]
      }
    },
    "/v2/monitored-objects/count": {
      "post": {
        "summary": "Retrieve a count of monitored objects based on the provided filter criteria",
        "operationId": "GetFilteredMonitoredObjectCountV2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "Response list containing counts by provided grouping that match the provided meta filter criteria",
            "schema": {
              "$ref": "#/definitions/MonitoredObjectFilteredCountResponse"
            }
          },
          "400": {
            "description": "Request data does not pass validation",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonitoredObjectFilteredListRequest"
            }
          },
          {
            "name": "group-by",
            "in": "query",
            "type": "string",
            "enum": [
              "object-type"
            ]
          }
        ],
        "tags": [
          "TenantProvisioningServiceV2"
        ]
      }
    },
    "/v2/monitored-objects/id-list": {
      "post": {
        "summary": "Retrieve a list of monitored objects based on the provided filter criteria",
        "operationId": "GetFilteredMonitoredObjectListV2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "Response list containing all monitored object IDs that match the provided meta filter criteria",
            "schema": {
              "$ref": "#/definitions/MonitoredObjectFilteredListResponse"
            }
          },
          "400": {
            "description": "Request data does not pass validation",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonitoredObjectFilteredListRequest"
            }
          }
        ],
        "tags": [
          "TenantProvisioningServiceV2"
        ]
      }
    },
    "/v2/monitored-object-geo-clusters": {
      "post": {
        "summary": "Retrieve set of counts clustered by GeoHash identifiers specified by the open source GeoHashing algorithm.",
        "operationId": "GetMonitoredObjectGeoClustersV2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "Counts of monitored objects grouped by GeoHash identifiers",
            "schema": {
              "$ref": "#/definitions/MonitoredObjectGeoClusterResponse"
            }
          },
          "400": {
            "description": "Request data does not pass validation",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/MonitoredObjectFilteredListRequest"
            }
          },
          {
            "name": "precision",
            "in": "query",
            "description": "The level of precision required for the geohashing grid",
            "required": true,
            "type": "integer"
          },
          {
            "name": "location",
            "in": "query",
            "description": "The location field that we want clustering based off of",
            "required": true,
            "type": "string",
            "enum": [
              "source",
              "destination"
            ]
          }
        ],
        "tags": [
          "TenantProvisioningServiceV2"
        ]
      }
    },
    "/v2/monitored-object-meta-details": {
      "get": {
        "summary": "Retrieve a record of the provisioned metadata including the counts of Monitored Objects that use each metadata value",
        "operationId": "GetMonitoredObjectMetadataDetailsV2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "Response list containing all monitored object IDs that match the provided meta filter criteria",
            "schema": {
              "$ref": "#/definitions/MonitoredObjectMetadataDetailsListResponse"
            }
          },
          "400": {
            "description": "Request data does not pass validation",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "meta",
            "in": "query",
            "description": "List of metadata category names by which the request should be filtered",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "value-prefix",
            "in": "query",
            "description": "Prefix by which all metadata values names by should start",
            "type": "string"
          },
          {
            "name": "categories-only",
            "in": "query",
            "description": "Flag to indicate if the response should include only the metadata category names (when set to true) or also include meta values and counts (when set to false)",
            "type": "boolean",
            "default": false
          }
        ],
        "tags": [
          "TenantProvisioningServiceV2"
        ]
      },
      "post": {
        "summary": "Retrieve a record of the provisioned metadata including the counts of Monitored Objects that use each metadata value after being filtered by the passed in request body parameters",
        "operationId": "GetFilteredMonitoredObjectMetadataDetailsV2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "Response list containing all monitored object IDs that match the provided meta filter criteria",
            "schema": {
              "$ref": "#/definitions/MonitoredObjectMetadataDetailsListResponse"
            }
          },
          "400": {
            "description": "Request data does not pass validation",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonitoredObjectFilteredListRequest"
            }
          }
        ],
        "tags": [
          "TenantProvisioningServiceV2"
        ]
      }
    },
    "/v2/monitored-objects/{monObjId}": {
      "get": {
        "summary": "Retrieve a Tenant Monitored Object by id.",
        "operationId": "GetMonitoredObjectV2",
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MonitoredObjectResponse"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "The requested Monitored Object is not provisioned",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "monObjId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TenantProvisioningServiceV2"
        ]
      },
      "patch": {
        "summary": "Update a Tenant Monitored Object",
        "operationId": "UpdateMonitoredObjectV2",
        "consumes": [
          "application/vnd.api+json"
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MonitoredObjectResponse"
            }
          },
          "400": {
            "description": "Request data does not pass validation",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "The requested Monitored Object is not provisioned",
            "schema": {
              "type": "string"
            }
          },
          "409": {
            "description": "Incorrect revision provided for the update request to the Monitored Object",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "monObjId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonitoredObjectUpdateRequest"
            }
          }
        ],
        "tags": [
          "TenantProvisioningServiceV2"
        ]
      },
      "delete": {
        "summary": "Delete a Tenant Monitored Object specified by the provided id.",
        "operationId": "DeleteMonitoredObjectV2",
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MonitoredObjectResponse"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "The requested Monitored Object is not provisioned",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "monObjId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TenantProvisioningServiceV2"
        ]
      }
    },
    "/v2/bulk/patch/monitored-objects": {
      "patch": {
        "summary": "Patches one or more Monitored Objects's based on the provided values",
        "operationId": "BulkPatchMonitoredObjectsV2",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/BulkOperationResponseV2"
            }
          },
          "400": {
            "description": "Request data does not pass validation",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BulkMonitoredObjectPatchRequest"
            }
          }
        ],
        "tags": [
          "TenantProvisioningServiceV2"
        ]
      }
    },
    "/v2/bulk/insert/monitored-objects": {
      "post": {
        "summary": "Create one or more Monitored Objects in a single API request.",
        "operationId": "BulkInsertMonitoredObjectsV2",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/BulkOperationResponseV2"
            }
          },
          "400": {
            "description": "Request data does not pass validation",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BulkMonitoredObjectCreateRequest"
            }
          }
        ],
        "tags": [
          "TenantProvisioningServiceV2"
        ]
      },
      "put": {
        "summary": "Update one or more Monitored Objects in a single API request. Note that this is a PUT operation for each Monitored Object. This means that all properties must be explicitly provided",
        "operationId": "BulkUpdateMonitoredObjectsV2",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/BulkOperationResponseV2"
            }
          },
          "400": {
            "description": "Request data does not pass validation",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BulkMonitoredObjectUpdateRequest"
            }
          }
        ],
        "tags": [
          "TenantProvisioningServiceV2"
        ]
      }
    },
    "/v2/bulk/insert/monitored-objects/meta": {
      "post": {
        "summary": "Update the metadata of one or more Monitored Objects in a single API request.",
        "operationId": "BulkInsertMonitoredObjectsMetaV2",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/BulkOperationResponseV2"
            }
          },
          "400": {
            "description": "Request data does not pass validation",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BulkMonitoredObjectMetaCreateRequest"
            }
          }
        ],
        "tags": [
          "TenantProvisioningServiceV2"
        ]
      }
    },
    "/v2/monitored-object-summaries": {
      "get": {
        "summary": "Retrieve all Monitored Object Summaries for a Tenant.",
        "operationId": "GetAllMonitoredObjectSummariesV2",
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "Fetch completed successfully",
            "schema": {
              "$ref": "#/definitions/MonitoredObjectSummaryListResponse"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "No Monitored objects are provisioned",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "start_key",
            "in": "query",
            "type": "string",
            "description": "The name of the Monitored Object from which the result set will begin"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "integer",
            "description": "The maximum number of records to return for a single page"
          }
        ],
        "tags": [
          "TenantProvisioningServiceV2"
        ]
      }
    },
    "/v2/monitored-object-summaries/{monObjId}": {
      "get": {
        "summary": "Retrieve a Tenant Monitored Object Summary by the Monitored Object's id.",
        "operationId": "GetMonitoredObjectSummaryV2",
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MonitoredObjectSummaryResponse"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "The requested Monitored Object is not provisioned",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "monObjId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TenantProvisioningServiceV2"
        ]
      }
    },
    "/v2/metadata-category-mappings": {
      "get": {
        "summary": "Retrieve all Monitored Object Metadata Mappings for a Tenant.",
        "operationId": "GetAllMetadataCategoryMappingsV2",
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "Fetch completed successfully",
            "schema": {
              "$ref": "#/definitions/MonitoredObjectMetadataCategoryMappingListResponse"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "No Monitored Object Metadata Mappings are provisioned",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "tags": [
          "TenantProvisioningServiceV2"
        ]
      }
    },
    "/v2/metadata-category-mappings/{mappingType}": {
      "get": {
        "summary": "Retrieve a particular Tenant Monitored Object Metadata Mapping by the type of mapping.",
        "operationId": "GetMetadataCategoryMappingV2",
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MonitoredObjectMetadataCategoryMappingResponse"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "The requested Monitored Object is not provisioned",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "mappingType",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "unknown",
              "activeMetrics"
            ],
            "description": "The type of Metadata Category Mapping"
          }
        ],
        "tags": [
          "TenantProvisioningServiceV2"
        ]
      },
      "patch": {
        "summary": "Update a particular Tenant Monitored Object Metadata Mapping by the type of mapping.",
        "operationId": "UpdateMetadataCategoryMappingV2",
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MonitoredObjectMetadataCategoryMappingResponse"
            }
          },
          "400": {
            "description": "Request data does not pass validation",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "The requested Monitored Object is not provisioned",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MetadataCategoryMappingUpdateRequest"
            }
          },
          {
            "name": "mappingType",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "unknown",
              "activeMetrics"
            ],
            "description": "The type of Metadata Category Mapping to be updated"
          }
        ],
        "tags": [
          "TenantProvisioningServiceV2"
        ]
      }
    },
    "/v2/policies/alerting": {
      "post": {
        "summary": "Create an Alert Policy",
        "operationId": "createRequestAlertPolicy",
        "responses": {
          "201": {
            "description": "Policy creation completed successfully",
            "schema": {
              "$ref": "#/definitions/alertPolicyResponse"
            }
          },
          "400": {
            "description": "Request data does not pass validation",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "Requester does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "409": {
            "description": "There was a conflict when creating the record",
            "schema": {
              "type": "string"
            }
          },
          "422": {
            "description": "The provided request did not pass validation",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/alertPolicyCreateRequest"
            }
          }
        ],
        "tags": [
          "TenantAlertServiceV2"
        ]
      },
      "get": {
        "summary": "Get all Alert Policies",
        "operationId": "getAllRequestAlertPolicy",
        "responses": {
          "200": {
            "description": "Policy get successful",
            "schema": {
              "$ref": "#/definitions/alertPoliciesResponse"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "useRawMetaKey",
            "in": "query",
            "default": false,
            "type": "boolean",
            "description": "Returns the raw metadata key's ID from the DB."
          },
          {
            "name": "includeDeleted",
            "in": "query",
            "default": false,
            "type": "boolean",
            "description": "Include deleted policies in the results."
          }
        ],
        "tags": [
          "TenantAlertServiceV2"
        ]
      }
    },
    "/v2/policies/alerting/automatic": {
      "patch": {
        "summary": "Patch automaticAlertPolicy",
        "operationId": "patchAutomaticAlertPolicy",
        "responses": {
          "201": {
            "description": "Policy creation completed successfully",
            "schema": {
              "$ref": "#/definitions/AutomaticAlertPolicyResponse"
            }
          },
          "400": {
            "description": "Request data does not pass validation",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "Requester does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "409": {
            "description": "There was a conflict when creating the record",
            "schema": {
              "type": "string"
            }
          },
          "422": {
            "description": "The provided request did not pass validation",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AutomaticAlertPolicyCreateRequest"
            }
          }
        ],
        "tags": [
          "TenantAlertServiceV2"
        ]
      },
      "get": {
        "summary": "Get Automatic Detection Policy",
        "operationId": "getAutomaticAlertPolicy",
        "responses": {
          "200": {
            "description": "Policy get successful",
            "schema": {
              "$ref": "#/definitions/AutomaticAlertPolicyCreateRequest"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "tags": [
          "TenantAlertServiceV2"
        ]
      }
    },
    "/v2/policies/alerting/{id}": {
      "get": {
        "summary": "Get a specific Alert Policy",
        "operationId": "getRequestAlertPolicy",
        "responses": {
          "200": {
            "description": "Got alert policy document",
            "schema": {
              "$ref": "#/definitions/alertPolicyResponse"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "useRawMetaKey",
            "in": "query",
            "default": false,
            "type": "boolean",
            "description": "Returns the raw metadata key's ID from the DB."
          }
        ],
        "tags": [
          "TenantAlertServiceV2"
        ]
      },
      "delete": {
        "summary": "Deletes an Alert Policy",
        "description": "Note that this does not physically delete a policy. It will become disabled and unmodifiable in order to provide references to existing alerts.",
        "operationId": "deleteRequestAlertPolicy",
        "responses": {
          "202": {
            "description": "Policy Deletion completed successfully",
            "schema": {
              "$ref": "#/definitions/alertPolicyResponse"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "No records found",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TenantAlertServiceV2"
        ]
      },
      "patch": {
        "summary": "Provides ability to patch a Alert Policy",
        "operationId": "PatchRequestAlertPolicy",
        "responses": {
          "201": {
            "description": "Policy patch completed successfully",
            "schema": {
              "$ref": "#/definitions/alertPolicyResponse"
            }
          },
          "400": {
            "description": "Request data does not pass validation",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "No records found",
            "schema": {
              "type": "string"
            }
          },
          "409": {
            "description": "There was a conflict when creating the record",
            "schema": {
              "type": "string"
            }
          },
          "422": {
            "description": "The provided request did not pass validation",
            "schema": {
              "type": "string"
            }
          },
          "428": {
            "description": "The provided request is trying to modify alert policy while it is an active alarm.",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/alertPolicyCreateRequest"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "force",
            "type": "string",
            "enum": [
              false,
              true
            ],
            "required": false,
            "description": "If a alert state is currently alarming, Skylight will block put updates if the force query parameter is not set to true."
          }
        ],
        "tags": [
          "TenantAlertServiceV2"
        ]
      }
    },
    "/v2/alerts/history/": {
      "get": {
        "summary": "Gets all the history for a tenant",
        "description": "Please use the query parameters to limit the scope of the results. Otherwise, this will return all the raw alerts for a time interval",
        "operationId": "getAlertPolicyHistory",
        "responses": {
          "200": {
            "description": "Policy history returned",
            "schema": {
              "$ref": "#/definitions/alertHistory"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "policyId",
            "in": "query",
            "type": "string",
            "description": "The Policy ID"
          },
          {
            "in": "query",
            "name": "interval",
            "type": "string",
            "description": "The interval in ISO 6801 standard but with the '/' replaced with '_'"
          },
          {
            "in": "query",
            "name": "monitoredObjectId",
            "type": "string",
            "description": "The monitored object alert history"
          },
          {
            "in": "query",
            "name": "alertState",
            "type": "string",
            "enum": [
              "raised",
              "cleared"
            ],
            "description": "Provide all the includes"
          },
          {
            "in": "query",
            "name": "policyType",
            "type": "string",
            "enum": [
              "micro-tca",
              "anomaly",
              "capture",
              "capture-automatic"
            ]
          },
          {
            "in": "query",
            "name": "limit",
            "type": "number",
            "description": "Maximum number of results to return"
          },
          {
            "name": "useRawMetaKey",
            "in": "query",
            "default": false,
            "type": "boolean",
            "description": "Returns the raw metadata key's ID from the DB."
          },
          {
            "in": "query",
            "name": "category",
            "type": "string",
            "description": "Category to filter on"
          }
        ],
        "tags": [
          "TenantAlertServiceV2"
        ]
      }
    },
    "/v2/alerting/groupBy": {
      "post": {
        "summary": "Retrieves specified aggregation grouped by the provided fields and filtered by the metadata specification",
        "operationId": "GetAlertingGroupByV3",
        "consumes": [
          "application/vnd.api+json"
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "Group by successfully processed",
            "schema": {
              "$ref": "#/definitions/JsonApiAlertGroupByResponse"
            }
          },
          "400": {
            "description": "Request data does not pass validation",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Missing provisioned data",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JsonApiAlertGroupByRequest"
            }
          }
        ],
        "tags": [
          "TenantAlertServiceV2"
        ]
      }
    },
    "/v2/alerting/aggregate": {
      "post": {
        "summary": "Aggregates the provided metrics and filters them based on the provided criteria",
        "operationId": "GetAlertingAggregateV3",
        "consumes": [
          "application/vnd.api+json"
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "Aggregate query successfully processed",
            "schema": {
              "$ref": "#/definitions/JsonApiAlertAggregateResponse"
            }
          },
          "400": {
            "description": "Request data does not pass validation",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Missing provisioned data",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JsonApiAlertAggregateRequest"
            }
          }
        ],
        "tags": [
          "TenantAlertServiceV2"
        ]
      }
    },
    "/v2/reports/{reportID}": {
      "get": {
        "deprecated": true,
        "summary": "Retrieve a Tenant SLA report by id.",
        "operationId": "GetSLAReportV2",
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/gathergrpcJSONAPIObject"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "The requested Report is not provisioned in Datahub",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "reportID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TenantProvisioningServiceV2"
        ]
      }
    },
    "/v2/reports": {
      "get": {
        "deprecated": true,
        "summary": "Retrieve all SLA reports for the specified Tenant.",
        "operationId": "GetAllSLAReportsV2",
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/gathergrpcJSONAPIObjectList"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "No Reports are provisioned in Datahub",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "tags": [
          "TenantProvisioningServiceV2"
        ]
      }
    },
    "/v2/report-schedule-configs": {
      "post": {
        "deprecated": true,
        "summary": "Create a report schedule configuration for a Tenant.",
        "operationId": "CreateReportScheduleConfigV2",
        "consumes": [
          "application/vnd.api+json"
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ReportScheduleConfigResponse"
            }
          },
          "400": {
            "description": "Request data does not pass validation",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "409": {
            "description": "The Report Schedule Configuration is already provisioned",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReportScheduleConfigCreateRequest"
            }
          }
        ],
        "tags": [
          "TenantProvisioningServiceV2"
        ]
      },
      "get": {
        "deprecated": true,
        "summary": "Retrieve all report schedule configs for the specified Tenant.",
        "operationId": "GetAllReportScheduleConfigsV2",
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ReportScheduleConfigListResponse"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "No Report Schedule Configurations are provisioned",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "tags": [
          "TenantProvisioningServiceV2"
        ]
      }
    },
    "/v2/report-schedule-configs/{configId}": {
      "get": {
        "deprecated": true,
        "summary": "Retrieve a report schedule configuration for a Tenant by configuration Id.",
        "operationId": "GetReportScheduleConfigV2",
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ReportScheduleConfigResponse"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "The requested Report Schedule Configuration is not provisioned",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "configId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TenantProvisioningServiceV2"
        ]
      },
      "patch": {
        "deprecated": true,
        "summary": "Update a Report Schedule Configuration for a Tenant.",
        "operationId": "UpdateReportScheduleConfigV2",
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ReportScheduleConfigResponse"
            }
          },
          "400": {
            "description": "Request data does not pass validation",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Requested Report Schedule Configuration is not provisioned",
            "schema": {
              "type": "string"
            }
          },
          "409": {
            "description": "Incorrect revision provided for this update request",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "configId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReportScheduleConfigUpdateRequest"
            }
          }
        ],
        "tags": [
          "TenantProvisioningServiceV2"
        ]
      },
      "delete": {
        "deprecated": true,
        "summary": "Delete a report schedule configuration for a Tenant by configuration Id.",
        "operationId": "DeleteReportScheduleConfigV2",
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ReportScheduleConfigResponse"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Requested Report Schedule Configuration is not provisioned",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "configId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TenantProvisioningServiceV2"
        ]
      }
    },
    "/v2/threshold-profiles": {
      "post": {
        "summary": "Create a Threshold Profile for a Tenant.",
        "operationId": "CreateThresholdProfileV2",
        "consumes": [
          "application/vnd.api+json"
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ThresholdProfileResponse"
            }
          },
          "400": {
            "description": "Request data does not pass validation",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "409": {
            "description": "The record is already provisioned",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ThresholdProfileCreateRequest"
            }
          }
        ],
        "tags": [
          "TenantProvisioningServiceV2"
        ]
      },
      "get": {
        "summary": "Retrieve all Threshold Profiles for the specified Tenant.",
        "operationId": "GetAllThresholdProfilesV2",
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ThresholdProfileListResponse"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "There are no Threshold Profiles provisioned",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "tags": [
          "TenantProvisioningServiceV2"
        ]
      }
    },
    "/v2/threshold-profiles/{thrPrfId}": {
      "get": {
        "summary": "Retrieve a Tenant Threshold Profile by id.",
        "operationId": "GetThresholdProfileV2",
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ThresholdProfileResponse"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "The requested Threshold Profile is not provisioned",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "thrPrfId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TenantProvisioningServiceV2"
        ]
      },
      "patch": {
        "summary": "Update a Tenant Threshold Profile",
        "operationId": "UpdateThresholdProfileV2",
        "consumes": [
          "application/vnd.api+json"
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ThresholdProfileResponse"
            }
          },
          "400": {
            "description": "Request data does not pass validation",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "The requested Threshold Profile is not provisioned",
            "schema": {
              "type": "string"
            }
          },
          "409": {
            "description": "Incorrect revision provided in Threshold Profile update request",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "thrPrfId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ThresholdProfileUpdateRequest"
            }
          }
        ],
        "tags": [
          "TenantProvisioningServiceV2"
        ]
      },
      "delete": {
        "summary": "Delete a Tenant Threshold Profile specified by the provided id.",
        "operationId": "DeleteThresholdProfileV2",
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ThresholdProfileResponse"
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "The requested Threshold Profile is not provisioned",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "thrPrfId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TenantProvisioningServiceV2"
        ]
      }
    }
  },
  "definitions": {
    "JsonApiAAAUser": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/AAAUser"
        }
      }
    },
    "JsonApiAAAUserList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AAAUser"
          }
        }
      }
    },
    "JsonApiJWT": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/JWTClaims"
        }
      }
    },
    "JsonApiJWTList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JWTClaims"
          }
        }
      }
    },
    "JWTClaims": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "tokens"
          ],
          "default": "tokens"
        },
        "attributes": {
          "type": "object",
          "properties": {
            "tokenID": {
              "type": "string",
              "description": "ID of the jwt"
            },
            "iss": {
              "type": "string",
              "description": "Issuer of the jwt"
            },
            "sub": {
              "type": "string",
              "description": "Subject of the jwt (the user)"
            },
            "aud": {
              "type": "string",
              "description": "Audience - Recipient for which the JWT is intended (tenant name)"
            },
            "exp": {
              "type": "integer",
              "description": "Expiry of the JWT - in unix time format"
            },
            "nbf": {
              "type": "integer",
              "description": "Time before which the JWT must not be accepted for processing"
            },
            "permissions": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "zone": {
              "type": "string",
              "description": "Roadrunner Zone attribute"
            },
            "deploymentURL": {
              "type": "string",
              "description": "URL of the base deployment"
            },
            "tenantURL": {
              "type": "string",
              "description": "URL of the tenant this JWT was created for"
            },
            "tenantID": {
              "type": "string",
              "description": "ID of the tenant this JWT was created for"
            }
          }
        },
        "id": {
          "type": "string"
        }
      }
    },
    "JsonApiUsergroup": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Usergroup"
        }
      }
    },
    "JsonApiUsergroupList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Usergroup"
          }
        }
      }
    },
    "AuthMethod": {
      "type": "object",
      "properties": {
        "method": {
          "type": "string",
          "enum": [
            "password",
            "openid"
          ]
        },
        "providerLinks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/authProvider"
          }
        }
      }
    },
    "Usergroup": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "usergroups"
          ],
          "default": "usergroups"
        },
        "attributes": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "maxLength": 128
            },
            "tenantId": {
              "type": "string",
              "maxLength": 256
            }
          }
        },
        "id": {
          "type": "string"
        },
        "relationships": {
          "$ref": "#/definitions/UsergroupToUserRelationship"
        }
      }
    },
    "UsergroupToUserRelationship": {
      "type": "object",
      "properties": {
        "users": {
          "$ref": "#/definitions/JsonApiRelationship"
        }
      }
    },
    "JsonApiRelationship": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JsonApiRelationshipData"
          }
        }
      }
    },
    "JsonApiSingleRelationship": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/JsonApiRelationshipData"
        }
      }
    },
    "JsonApiRelationshipData": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "AAAUser": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "users"
          ],
          "default": "users"
        },
        "id": {
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/AAAUserAttr"
        }
      }
    },
    "AAAUserAttr": {
      "type": "object",
      "properties": {
        "tenants": {
          "type": "array",
          "items": {
            "type": "string",
            "maxLength": 256
          }
        },
        "emailAddress": {
          "type": "string",
          "format": "email",
          "maxLength": 256
        },
        "password": {
          "type": "string",
          "minLength": 8,
          "maxLength": 64
        },
        "name": {
          "type": "string",
          "maxLength": 64
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string",
            "minLength": 7,
            "maxLength": 256,
            "enum": [
              "unknown",
              "skylight-admin",
              "tenant-admin",
              "tenant-user",
              "tenant-contributor"
            ],
            "default": "tenant-user"
          }
        },
        "groups": {
          "type": "array",
          "items": {
            "type": "string",
            "maxLength": 256
          }
        },
        "isPasswordSet": {
          "type": "boolean",
          "default": false
        },
        "isRegisteredForEmail": {
          "type": "boolean",
          "default": false
        },
        "onboardingToken": {
          "type": "string",
          "maxLength": 256
        }
      }
    },
    "EmailChangeRequest": {
      "type": "object",
      "required": [
        "oldEmailAddress",
        "newEmailAddress"
      ],
      "properties": {
        "oldEmailAddress": {
          "type": "string",
          "format": "email",
          "maxLength": 256
        },
        "newEmailAddress": {
          "type": "string",
          "format": "email",
          "maxLength": 256
        }
      }
    },
    "SetPasswordRequest": {
      "type": "object",
      "required": [
        "password",
        "onboardingToken"
      ],
      "properties": {
        "password": {
          "type": "string",
          "minLength": 8,
          "maxLength": 64
        },
        "onboardingToken": {
          "type": "string",
          "maxLength": 256
        }
      }
    },
    "PasswordChangeRequest": {
      "type": "object",
      "required": [
        "oldPassword",
        "newPassword"
      ],
      "properties": {
        "oldPassword": {
          "type": "string",
          "minLength": 8,
          "maxLength": 64
        },
        "newPassword": {
          "type": "string",
          "minLength": 8,
          "maxLength": 64
        }
      }
    },
    "JsonApiTenantInfo": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/TenantInfo"
        }
      }
    },
    "TenantInfo": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "tenant-info"
          ],
          "default": "tenant-info"
        },
        "id": {
          "type": "string",
          "description": "The subdomain of the tenant"
        },
        "attributes": {
          "$ref": "#/definitions/TenantInfoAttr"
        }
      }
    },
    "TenantInfoAttr": {
      "type": "object",
      "properties": {
        "tenantName": {
          "type": "string",
          "maxLength": 256
        },
        "tenantId": {
          "type": "string",
          "maxLength": 256
        },
        "allowPasswordAuth": {
          "type": "boolean",
          "default": false
        },
        "providerLinks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/authProvider"
          }
        }
      }
    },
    "authProvider": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "default": {
          "type": "boolean"
        }
      }
    },
    "OIDConfig": {
      "type": "object",
      "properties": {
        "issuer": {
          "type": "string"
        },
        "authorization_endpoint": {
          "type": "string"
        },
        "token_endpoint": {
          "type": "string"
        },
        "token_introspection_endpoint": {
          "type": "string"
        },
        "userinfo_endpoint": {
          "type": "string"
        },
        "end_session_endpoint": {
          "type": "string"
        },
        "jwks_uri": {
          "type": "string"
        },
        "check_session_iframe": {
          "type": "string"
        },
        "grant_types_supported": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "response_types_supported": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "subject_types_supported": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "id_token_signing_alg_values_supported": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "userinfo_signing_alg_values_supported": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "request_object_signing_alg_values_supported": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "response_modes_supported": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "registration_endpoint": {
          "type": "string"
        },
        "token_endpoint_auth_methods_supported": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "token_endpoint_auth_signing_alg_values_supported": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "claims_supported": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "claim_types_supported": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "claims_parameter_supported": {
          "type": "boolean"
        },
        "scopes_supported": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "request_parameter_supported": {
          "type": "boolean"
        },
        "request_uri_parameter_supported": {
          "type": "boolean"
        }
      }
    },
    "OIDToken": {
      "type": "object",
      "properties": {
        "access_token": {
          "type": "string"
        },
        "token_type": {
          "type": "string"
        },
        "refresh_token": {
          "type": "string"
        },
        "expires_in": {
          "type": "integer"
        },
        "refresh_expires_in": {
          "type": "integer"
        },
        "session_state": {
          "type": "string"
        },
        "id_token": {
          "type": "string"
        }
      }
    },
    "ActiveAlert": {
      "type": "object",
      "description": "An active alert for a monitoredObject",
      "required": [
        "tenantId",
        "objectId",
        "policyId"
      ],
      "properties": {
        "tenantId": {
          "type": "string",
          "description": "The tenant ID"
        },
        "objectId": {
          "type": "string",
          "description": "The Object ID for the active alert"
        },
        "policyId": {
          "type": "string",
          "description": "The policy ID"
        },
        "direction": {
          "type": "string",
          "description": "The direction of the metric that caused the alert"
        },
        "raiseProcessedAt": {
          "type": "integer",
          "format": "int64",
          "description": "When the alert was raised at. Note this is not the record's timestamp"
        },
        "startTimestamp": {
          "type": "integer",
          "format": "int64",
          "description": "The timestamp of the last record in the series to trigger this alert"
        },
        "endTimestamp": {
          "type": "integer",
          "format": "int64",
          "description": "The timestamp of the last record in the series to trigger the clearing of this alert"
        },
        "policyType": {
          "type": "string",
          "enum": [
            "micro-tca",
            "anomaly",
            "capture",
            "capture-automatic"
          ]
        },
        "metric": {
          "type": "string"
        },
        "duration": {
          "type": "number",
          "description": "The total amount of time spent in violation"
        },
        "meta": {
          "type": "object",
          "description": "Attributes added to a Monitored Object that help identify the Monitored Object as well as provide flitering/grouping properties",
          "pattern": "^[a-z_]+$",
          "additionalProperties": {
            "type": "string"
          }
        },
        "srcLat": {
          "type": "number",
          "format": "float",
          "description": "Geographic latitude of Monitored Object source"
        },
        "srcLon": {
          "type": "number",
          "format": "float",
          "description": "Geographic longitude of Monitored Object source"
        },
        "dstLat": {
          "type": "number",
          "format": "float",
          "description": "Geographic latitude of Monitored Object destination"
        },
        "dstLon": {
          "type": "number",
          "format": "float",
          "description": "Geographic longitude of Monitored Object destination"
        },
        "topology": {
          "description": "Tags used to describe the path segments associated with the Monitored Object",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "value": {
          "description": "This can either be the threshold value or a distance measure for dynamic thresholds",
          "type": "string"
        },
        "comparator": {
          "type": "string",
          "enum": [
            "gt",
            "lt",
            "eq",
            "gte",
            "lte"
          ],
          "default": "gt",
          "description": "Operand to use when evaluating the condition.\ngt  = greaterThan\nlt  = lessThan\neq  = equal\n"
        },
        "sessionId": {
          "type": "string"
        },
        "bcn": {
          "type": "string"
        },
        "bca": {
          "type": "string"
        },
        "ip": {
          "type": "string"
        },
        "captureLayer": {
          "type": "string"
        },
        "captureZone": {
          "type": "string"
        },
        "captureApplicationId": {
          "type": "string"
        },
        "captureZoneId": {
          "type": "string"
        },
        "captureMetaThresholds": {
          "type": "number"
        },
        "captureMetaValues": {
          "type": "string"
        },
        "captureMetaIps": {
          "type": "string"
        },
        "captureMetaDesc": {
          "type": "string"
        },
        "captureMetaDate_stop": {
          "type": "number"
        },
        "captureMetaDate_start": {
          "type": "number"
        },
        "captureMetaIp_client": {
          "type": "string"
        },
        "captureMetaIp_count": {
          "type": "number"
        },
        "captureMetaStart": {
          "type": "number"
        },
        "captureMetaStop": {
          "type": "number"
        },
        "captureMetaName": {
          "type": "string"
        },
        "captureMetaAlert_id": {
          "type": "number"
        },
        "captureMetaNow": {
          "type": "number"
        },
        "captureMetaFirst_sent": {
          "type": "number"
        },
        "captureMetaLast_sent": {
          "type": "number"
        },
        "captureMetaSite": {
          "type": "string"
        },
        "captureMetaWorker": {
          "type": "string"
        },
        "captureMetaFiring": {
          "type": "string"
        },
        "captureMetaCertainty": {
          "type": "number"
        },
        "captureMetaHostname": {
          "type": "string"
        },
        "captureMetaCertainty_percent": {
          "type": "number"
        }
      }
    },
    "ActiveAlertsListResponse": {
      "type": "object",
      "description": "ActiveAlert response including one or more values",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActiveAlert"
          }
        }
      }
    },
    "ActiveAlertsFilteredListRequest": {
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/MetaFilter"
        },
        "metaExclude": {
          "$ref": "#/definitions/MetaExclude"
        },
        "objectId": {
          "type": "array",
          "description": "The Object ID for the active alert",
          "items": {
            "type": "string"
          }
        },
        "policyId": {
          "type": "array",
          "description": "The policy ID",
          "items": {
            "type": "string"
          }
        },
        "policyType": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "direction": {
          "type": "array",
          "description": "The direction of the metric that caused the alert",
          "items": {
            "type": "string"
          }
        },
        "metric": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "topology": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "captureZone": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "captureApplicationId": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "captureZoneId": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "JsonApiActiveAlertGroupByRequest": {
      "description": "JSON API compliant wrapper for the groupby query",
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "required": [
            "type",
            "attributes"
          ],
          "properties": {
            "id": {
              "type": "string"
            },
            "type": {
              "type": "string",
              "enum": [
                "groupByActiveAlerts"
              ]
            },
            "attributes": {
              "$ref": "#/definitions/ActiveAlertGroupByConfig"
            }
          }
        }
      }
    },
    "JsonApiActiveAlertGroupByResponse": {
      "description": "JSON API compliant wrapper for the groupby response",
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "id": {
              "type": "string"
            },
            "type": {
              "type": "string",
              "enum": [
                "groupByActiveAlerts"
              ]
            },
            "attributes": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/ActiveAlertGroupByConfig"
                },
                {
                  "type": "object",
                  "required": [
                    "result"
                  ],
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/ActiveAlertGroupByReport"
                    }
                  }
                }
              ]
            }
          }
        }
      }
    },
    "ActiveAlertGroupByConfig": {
      "description": "The necessary request parameters for the metric api call",
      "type": "object",
      "required": [
        "groupingContext",
        "alerts"
      ],
      "properties": {
        "queryContext": {
          "$ref": "#/definitions/ActiveAlertQueryContext"
        },
        "metaContext": {
          "$ref": "#/definitions/MetaContext"
        },
        "groupingContext": {
          "$ref": "#/definitions/GroupingContext"
        },
        "aggregation": {
          "$ref": "#/definitions/SupportedAggregations"
        },
        "alerts": {
          "type": "array",
          "description": "A set of identifiers that considers specific alert based on the provided information",
          "items": {
            "$ref": "#/definitions/ActiveAlertSpec"
          }
        }
      }
    },
    "ActiveAlertGroupByReport": {
      "description": "The rendered response structure from the metric query",
      "type": "array",
      "items": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/definitions/ActiveAlertGroupedResultEntryParameters"
          }
        ]
      }
    },
    "ActiveAlertQueryContext": {
      "description": "Hints indicating how the query may be Returns",
      "type": "object",
      "properties": {
        "timeout": {
          "description": "Query timeout in milliseconds",
          "type": "integer",
          "example": 30000
        },
        "sortOnGroupingKey": {
          "description": "Allows a client to sort on a grouping key instead of the metric's value",
          "default": "policyId",
          "type": "string",
          "example": "policyId"
        },
        "sorted": {
          "type": "string",
          "description": "Indicates whether the response should return grouped by queries in ascending or descending order. Only applicable to grouped queries.",
          "enum": [
            "asc",
            "desc"
          ],
          "example": [
            "asc",
            "desc"
          ]
        },
        "numResults": {
          "description": "Number of results to return in grouped queries. A non-positive integer for this value implies there is no result limit. Only applicable to grouped queries.",
          "type": "integer",
          "format": "int32",
          "example": 10
        }
      }
    },
    "ActiveAlertGroupedResultEntryParameters": {
      "description": "Describes filtering criteria used for a particular query that uses a grouping",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ActiveAlertSpec"
        },
        {
          "type": "object",
          "required": [
            "groupedResults"
          ],
          "properties": {
            "groupedResults": {
              "type": "array",
              "items": {
                "type": "object",
                "required": [
                  "value"
                ],
                "properties": {
                  "groupings": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "value": {
                    "type": "number",
                    "format": "float"
                  }
                }
              }
            }
          }
        }
      ]
    },
    "ActiveAlertSpec": {
      "description": "Filter object that identifies a specific metric within a monitored object by its key attributes",
      "type": "object",
      "properties": {
        "policyId": {
          "description": "Policy ID to filter on",
          "type": "array",
          "x-omitempty": true,
          "items": {
            "type": "string"
          }
        },
        "policyType": {
          "description": "Hint to the query engine to limit the metric to certain types of entity.",
          "type": "array",
          "x-omitempty": true,
          "example": [
            "micro-tca",
            "anomaly"
          ],
          "items": {
            "type": "string"
          }
        },
        "alertState": {
          "description": "Set of one or more alert state to be used by the filter",
          "type": "array",
          "x-omitempty": true,
          "example": [
            "raised",
            "cleared"
          ],
          "items": {
            "type": "string"
          }
        },
        "metric": {
          "description": "Name that identifies the specific metric within a monitored object",
          "type": "array",
          "x-omitempty": true,
          "example": [
            "delayp95",
            "hit.rtt.per_sec"
          ],
          "items": {
            "type": "string"
          }
        },
        "direction": {
          "description": "Set of one or more directions to be used by the filter to identify required metric records",
          "type": "array",
          "x-omitempty": true,
          "example": [
            "0",
            "1"
          ],
          "items": {
            "type": "string"
          }
        },
        "topology": {
          "description": "Name of a node on the route of the Monitored Object",
          "type": "string"
        },
        "objectId": {
          "description": "Set of object IDs to filter on",
          "type": "array",
          "x-omitempty": true,
          "example": [
            "333732dc-99d4-4224-915e-3972b50d10ef",
            "931e7d13-6320-4ad7-ae06-7ff2df4f782a"
          ],
          "items": {
            "type": "string"
          }
        },
        "captureZone": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "captureApplicationId": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "captureZoneId": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "AnalyticsRequest": {
      "type": "object",
      "required": [
        "data"
      ],
      "description": "Object used to request a specific analysis from Datahub",
      "properties": {
        "data": {
          "type": "object",
          "required": [
            "type",
            "attributes"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "analytics"
              ]
            },
            "id": {
              "type": "string"
            },
            "attributes": {
              "type": "object",
              "properties": {
                "request": {
                  "description": "Request for Analytical analysis from Datahub",
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "verticalSliceQuery"
                      ],
                      "default": "verticalSliceQuery"
                    },
                    "patternMatch": {
                      "$ref": "#/definitions/AnalyticsPatternMatch"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "AnalyticsPatternMatch": {
      "type": "object",
      "description": "Defines the Pattern Match class of anaylics request",
      "properties": {
        "timeSlice": {
          "$ref": "#/definitions/AnalyticsTimeSlice"
        }
      }
    },
    "AnalyticsTimeSlice": {
      "type": "object",
      "description": "Defines the Time Slice sub-class of anaylics request",
      "properties": {
        "configuration": {
          "type": "object",
          "description": "Details outlining the pattern that will be compared against to determine approximate matches",
          "required": [
            "interval",
            "granularity",
            "constraints",
            "pattern"
          ],
          "properties": {
            "pattern": {
              "type": "array",
              "description": "The analytics engine will normalize the pattern time series and then determine monitored objects with similar patterns for the given interval. This will not do time stretching on the dataset but will fill in the gaps so it is one continuous segment.",
              "items": {
                "$ref": "#/definitions/MetricResultEntry"
              }
            },
            "interval": {
              "type": "string",
              "description": "The window of time for which the time slice pattern will be evaluated. Uses ISO 8601 timestamp formatting rules."
            },
            "granularity": {
              "type": "string",
              "description": "The granularity of the datapoints in ISO 8601 format",
              "example": "PT1M"
            },
            "numResults": {
              "type": "integer",
              "description": "The number of results to return for the time slice analysis"
            },
            "constraints": {
              "$ref": "#/definitions/AnalyticsTargetScope"
            }
          }
        },
        "match": {
          "type": "object",
          "description": "Details outlining the specific types of metrics to compare the pattern against for matches",
          "properties": {
            "constraints": {
              "type": "array",
              "description": "An array of metric related scoping parameters for which scopes of data the pattern should be matched against",
              "items": {
                "$ref": "#/definitions/AnalyticsTargetScope"
              }
            }
          }
        }
      }
    },
    "AnalyticsTargetScope": {
      "description": "Properties that filter what matched patterns will be returned. If not provided, then the widest match range will be returned",
      "type": "object",
      "required": [
        "vendor",
        "objectType",
        "metric",
        "direction"
      ],
      "properties": {
        "vendor": {
          "x-omitempty": true,
          "type": "string"
        },
        "objectType": {
          "x-omitempty": true,
          "type": "string"
        },
        "metric": {
          "x-omitempty": true,
          "type": "string"
        },
        "direction": {
          "x-omitempty": true,
          "type": "string"
        }
      }
    },
    "AnalyticsObject": {
      "type": "object",
      "required": [
        "type",
        "id",
        "attributes"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "analytics"
          ]
        },
        "id": {
          "type": "string"
        },
        "attributes": {
          "type": "object",
          "required": [
            "tenantId",
            "_id",
            "_rev",
            "datatype",
            "request",
            "results",
            "lastModifiedTimestamp",
            "lastResetTimestamp"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "Unique identifier of the Tenant in Datahub"
            },
            "_id": {
              "type": "string"
            },
            "_rev": {
              "type": "string",
              "description": "Value used to ensure updates to this object are handled in order."
            },
            "datatype": {
              "type": "string",
              "description": "Name used to identify this type of record in Datahub"
            },
            "request": {
              "description": "The details of the original request for Analytical analysis from Datahub",
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "verticalSliceQuery"
                  ],
                  "default": "verticalSliceQuery"
                },
                "patternMatch": {
                  "$ref": "#/definitions/AnalyticsPatternMatch"
                }
              }
            },
            "result": {
              "description": "The details of the result of the Analytical analysis from Datahub",
              "type": "object",
              "properties": {
                "computationExecTime": {
                  "type": "string",
                  "description": "The time it took to perform the anyltical analysis."
                },
                "status": {
                  "type": "string",
                  "description": "Indicates the success or failure of an anyltical analysis"
                },
                "message": {
                  "type": "string",
                  "description": "When an anyltical analysis is an error, this message will explain the error"
                },
                "details": {
                  "type": "object",
                  "properties": {
                    "patternMatch": {
                      "type": "object",
                      "description": "Defines the result format for a PatternMatch analytics operation",
                      "properties": {
                        "timeSlice": {
                          "type": "object",
                          "description": "Defines the result format for the Time Slice sub-class of a PatternMatch analytics operation",
                          "properties": {
                            "neighbourResults": {
                              "type": "array",
                              "description": "Ordered list (based on distance) of Monitored Objects that resembled the provided comparison baseline",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "monitoredObjectId": {
                                    "type": "string",
                                    "description": "Unique identifier of the matching Monitored Object"
                                  },
                                  "direction": {
                                    "type": "string",
                                    "description": "The direction matched for the matched pattern"
                                  },
                                  "distance": {
                                    "type": "number",
                                    "format": "double",
                                    "description": "How closely the matching Monitored Object resembles the provided comparison baseline"
                                  },
                                  "vendor": {
                                    "description": "The vendor for the matched pattern",
                                    "type": "string"
                                  },
                                  "objectType": {
                                    "description": "The type of the monitored object for the matched pattern",
                                    "type": "string"
                                  },
                                  "metric": {
                                    "description": "The metric for the matched pattern",
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "createdTimestamp": {
              "type": "integer",
              "format": "int64",
              "description": "Time since epoch at which this object was instantiated."
            },
            "lastModifiedTimestamp": {
              "type": "integer",
              "format": "int64",
              "description": "Time since epoch at which this object was last altered."
            }
          }
        }
      }
    },
    "AnalyticsListResponse": {
      "type": "object",
      "description": "Analytics response including one or more values",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnalyticsObject"
          }
        }
      }
    },
    "AnalyticsResponse": {
      "type": "object",
      "description": "An Analytics response from Datahub",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/AnalyticsObject"
        }
      }
    },
    "MetricIdentifierFilter": {
      "description": "Filter object that identifies a specific metric within a monitored object by its key attributes",
      "type": "object",
      "required": [
        "objectType",
        "metric"
      ],
      "properties": {
        "vendor": {
          "description": "Vendor name associated with the monitored object",
          "type": "string",
          "example": "accedian-twamp"
        },
        "objectType": {
          "description": "Object types to be considered as part of the filter",
          "type": "array",
          "example": [
            [
              "twamp-pe"
            ],
            [
              "twamp-sl",
              "twamp-sf"
            ]
          ],
          "items": {
            "type": "string"
          }
        },
        "metric": {
          "description": "Name that identifies the specific metric within a monitored object",
          "type": "string",
          "example": "delayP95"
        },
        "direction": {
          "description": "Set of one or more directions to be used by the filter to identify required metric records",
          "type": "array",
          "example": [
            [
              "0"
            ],
            [
              "0",
              "1"
            ]
          ],
          "items": {
            "type": "string"
          }
        }
      }
    },
    "HistogramBucketFilter": {
      "description": "An ordered set of histogram buckets that should be filled with the appropriate metric data",
      "example": "[{\"lower\":{\"value\":0},\"upper\":{\"value\":200}},{\"lower\":{\"value\":200},\"upper\":{\"value\":400}},{\"lower\":{\"value\":400},\"upper\":{\"value\":600}},{\"lower\":{\"value\":600}}]\n",
      "type": "array",
      "x-omitempty": true,
      "items": {
        "$ref": "#/definitions/MetricBucket"
      }
    },
    "MetricBucket": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "fixed",
            "baseline_percentage",
            "baseline_static_below",
            "baseline_static_above"
          ]
        },
        "filterMetric": {
          "type": "string"
        },
        "lower": {
          "description": "The specification for the lower boundary of the bucket",
          "type": "object",
          "required": [
            "value"
          ],
          "properties": {
            "value": {
              "description": "The lower, positive number to be used to describe the lowest value of the bucket. Omitting this value assumes that this bucket includes anything lower than the defined \"upper\" value",
              "type": "number",
              "format": "float"
            },
            "strict": {
              "description": "If set to true, then the lower value is assumed to be exclusive. Otherwise a value of false or the absence of this value assumes that the lower value is to be taken inclusively",
              "type": "boolean"
            }
          }
        },
        "upper": {
          "description": "The specification for the upper boundary of the bucket",
          "type": "object",
          "required": [
            "value"
          ],
          "properties": {
            "value": {
              "description": "The upper, positive number to be used to describe the highest value of the bucket. Omitting this value assumes that this bucket includes anything higher than the defined \"lower\" value",
              "type": "number",
              "format": "float"
            },
            "strict": {
              "description": "If set to true, then the upper value is assumed to be exclusive. Otherwise a value of false or the absence of this value assumes that the upper value is to be taken inclusively",
              "type": "boolean"
            }
          }
        }
      }
    },
    "MetricIdentifier": {
      "description": "Identifies a specific metric within a monitored object based on key attributes",
      "type": "object",
      "required": [
        "vendor",
        "objectType",
        "metric"
      ],
      "properties": {
        "vendor": {
          "description": "Vendor name associated with the monitored object",
          "type": "string",
          "example": "accedian-twamp"
        },
        "objectType": {
          "description": "Object type associated with the monitored object",
          "type": "string",
          "example": "twamp-pe"
        },
        "metric": {
          "description": "Name that identifies the specific metric within a monitored object",
          "type": "string",
          "example": "delayP95"
        },
        "direction": {
          "description": "Attributes that identifies the direction of a test associated with a particular metric",
          "type": "string",
          "example": [
            "0",
            "1",
            "2"
          ]
        }
      }
    },
    "SupportedAggregations": {
      "type": "string",
      "description": "The type of aggregation (avg/min/max/count/sum) avg - Returns the averaging the metric per monitored object for the time range, within the bounding filter as specified by the bucket property. min - Returns the minimum value for the metric per monitored object for the time range, within the bounding filter as specified by the bucket property. max - Returns the maximum value for the metric per monitored object for the time range, within the bounding filter as specified by the bucket property. count - Returns the number of events within the specified bucket property. A single bucket is the preferred usage but multiple buckets can be used as a band pass filter.  sum - Returns the summed value of all records grouped by the provided groupings  \n",
      "enum": [
        "min",
        "max",
        "avg",
        "count",
        "sum"
      ],
      "example": [
        "min",
        "max",
        "avg",
        "count",
        "sum"
      ]
    },
    "SpatialFilter": {
      "type": "object",
      "properties": {
        "rectangular": {
          "type": "object",
          "properties": {
            "minCoordinates": {
              "$ref": "#/definitions/SpatialCoordinates"
            },
            "maxCoordinates": {
              "$ref": "#/definitions/SpatialCoordinates"
            }
          }
        }
      }
    },
    "SpatialCoordinates": {
      "type": "object",
      "required": [
        "latitude",
        "longitude"
      ],
      "properties": {
        "latitude": {
          "type": "number",
          "format": "float"
        },
        "longitude": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "MetricSpec": {
      "description": "Filter object that identifies a specific metric within a monitored object by its key attributes",
      "type": "object",
      "required": [
        "metric"
      ],
      "properties": {
        "metric": {
          "description": "Name that identifies the specific metric within a monitored object",
          "type": "string",
          "example": "delayP95"
        },
        "vendor": {
          "description": "Vendor name associated with the monitored object",
          "type": "string",
          "example": "accedian-twamp"
        },
        "objectType": {
          "description": "Object types to be considered as part of the filter",
          "type": "array",
          "x-omitempty": true,
          "example": [
            [
              "twamp-pe"
            ],
            [
              "twamp-sl",
              "twamp-sf"
            ]
          ],
          "items": {
            "type": "string"
          }
        },
        "direction": {
          "description": "Set of one or more directions to be used by the filter to identify required metric records",
          "type": "array",
          "x-omitempty": true,
          "example": [
            [
              "0"
            ],
            [
              "0",
              "1"
            ]
          ],
          "items": {
            "type": "string"
          }
        },
        "monitoredObjectId": {
          "description": "Set of one or more monitored object Ids to be used by the filter to identify required metric records",
          "type": "array",
          "x-omitempty": true,
          "example": [
            [
              "abc"
            ],
            [
              "abc",
              "def"
            ]
          ],
          "items": {
            "type": "string"
          }
        },
        "sourceLocation": {
          "$ref": "#/definitions/SpatialFilter"
        },
        "destinationLocation": {
          "$ref": "#/definitions/SpatialFilter"
        },
        "topology": {
          "description": "Name of a node on the route of the Monitored Object",
          "type": "string"
        },
        "valueBoundary": {
          "$ref": "#/definitions/MetricBucket"
        }
      }
    },
    "MetaFilter": {
      "description": "An object that allows filtering on arbitrary metadata criteria and their values.  The keys in the map are associated with metadata categories and the value array  corresponds to a set of whitelist filter-in values for that category. The logical  semantics associated with this structure are conditional-AND across metadata criteria (keys) and conditional-OR across the values contained within the value array. For example, {\"region\":[\"montreal\",\"ottawa\"], \"group\":[\"radio\"]} will match all records that are of group \"radio\" AND from the region \"montreal\" OR \"ottawa\"\n",
      "type": "object",
      "example": {
        "region": [
          "montreal",
          "ottawa"
        ],
        "group": [
          "radio"
        ]
      },
      "additionalProperties": {
        "type": "array",
        "items": {
          "type": "string"
        }
      }
    },
    "genericFilterMapItem": {
      "properties": {
        "key": {
          "type": "string",
          "example": "zone"
        },
        "values": {
          "type": "array",
          "example": [
            "paris",
            "lyon"
          ],
          "items": {
            "type": "string"
          }
        }
      }
    },
    "MetaExclude": {
      "description": "An array that allows blacklisting one or more metadata criteria. Each key in the array must correspond to a given key in the MetaFilter portion of the request. This exclusion is a logical NOT for any values belonging to the metadata criteria listed in this request. For example, if the MetaFilter is: {\"region\":[\"montreal\",\"ottawa\"], \"group\":[\"radio\"]}, we can have a MetaExclude of the form [\"region\"]. This would result in a request that includes any records that are of group \"radio\" AND NOT in regions Ottawa or Montreal.\n",
      "type": "array",
      "items": {
        "type": "string"
      },
      "example": [
        "group"
      ]
    },
    "DimensionFilter": {
      "description": "An object that allows filtering on dimensions tracked against metric records during ingestion. The keys in the map are associated with the dimension name and the value array corresponds to a set of whitelist filter-in values for that dimension. The logical  semantics associated with this structure are conditional-AND across dimensions (keys) and conditional-OR across the values contained within the value array. For example, {\"firmware\":[\"v1.0.0\",\"v1.0.1\"], \"state\":[\"active\"]} will match all records that have a state of \"active\" AND with firmware versions \"v1.0.0\" OR \"v1.0.1\"\n",
      "type": "object",
      "example": {
        "firmware": [
          "v1.0.0",
          "v1.0.1"
        ],
        "state": [
          "active"
        ]
      },
      "additionalProperties": {
        "type": "array",
        "items": {
          "type": "string"
        }
      }
    },
    "ConnectorConfigCreateRequest": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "type": "object",
          "required": [
            "type",
            "attributes"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "connectorConfigs"
              ]
            },
            "id": {
              "type": "string"
            },
            "attributes": {
              "type": "object",
              "required": [
                "url",
                "type"
              ],
              "properties": {
                "name": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                },
                "port": {
                  "type": "integer"
                },
                "pollingFrequency": {
                  "type": "integer",
                  "default": 60
                },
                "username": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                },
                "exportGroup": {
                  "type": "string"
                },
                "datahubHeartbeatFrequency": {
                  "type": "integer"
                },
                "datahubConnectionRetryFrequency": {
                  "type": "integer"
                },
                "type": {
                  "type": "string"
                },
                "zone": {
                  "type": "string"
                },
                "prometheusAddr": {
                  "type": "string",
                  "description": "When set, instructs roadrunner to connect to this local prometheus store intermediary metrics"
                },
                "prometheusPort": {
                  "type": "integer"
                },
                "ciscoTelemetryConfig": {
                  "$ref": "#/definitions/CiscoTelemetryConfig"
                },
                "SNMPConfig": {
                  "$ref": "#/definitions/SNMPConfig"
                },
                "SNMPTrapSenderConfig": {
                  "$ref": "#/definitions/SNMPTrapSenderConfig"
                },
                "MQTTConfig": {
                  "$ref": "#/definitions/MQTTConfig"
                },
                "restartRoadrunner": {
                  "type": "boolean",
                  "description": "Triggers a restart of roadrunner on configuration reload"
                }
              }
            }
          }
        }
      }
    },
    "ConnectorConfigUpdateRequest": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "type": "object",
          "required": [
            "type",
            "attributes",
            "id"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "connectorConfigs"
              ]
            },
            "id": {
              "type": "string"
            },
            "attributes": {
              "type": "object",
              "required": [
                "_rev"
              ],
              "properties": {
                "_rev": {
                  "type": "string",
                  "description": "Value used to ensure updates to this object are handled in order."
                },
                "name": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                },
                "port": {
                  "type": "integer"
                },
                "pollingFrequency": {
                  "type": "integer"
                },
                "username": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                },
                "exportGroup": {
                  "type": "string"
                },
                "datahubHeartbeatFrequency": {
                  "type": "integer"
                },
                "datahubConnectionRetryFrequency": {
                  "type": "integer"
                },
                "type": {
                  "type": "string"
                },
                "zone": {
                  "type": "string"
                },
                "prometheusAddr": {
                  "type": "string",
                  "description": "When set, instructs roadrunner to connect to this local prometheus store intermediary metrics"
                },
                "prometheusPort": {
                  "type": "integer"
                },
                "ciscoTelemetryConfig": {
                  "$ref": "#/definitions/CiscoTelemetryConfig"
                },
                "SNMPConfig": {
                  "$ref": "#/definitions/SNMPConfig"
                },
                "SNMPTrapSenderConfig": {
                  "$ref": "#/definitions/SNMPTrapSenderConfig"
                },
                "MQTTConfig": {
                  "$ref": "#/definitions/MQTTConfig"
                }
              }
            }
          }
        }
      }
    },
    "ConnectorConfigResponse": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/ConnectorConfig"
        }
      }
    },
    "ConnectorConfigListResponse": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConnectorConfig"
          }
        }
      }
    },
    "ConnectorConfig": {
      "type": "object",
      "required": [
        "type",
        "id",
        "attributes"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "connectorConfigs"
          ]
        },
        "id": {
          "type": "string"
        },
        "attributes": {
          "type": "object",
          "required": [
            "_rev",
            "url",
            "pollingFrequency",
            "type",
            "createdTimestamp",
            "lastModifiedTimestamp"
          ],
          "properties": {
            "_rev": {
              "type": "string",
              "description": "Value used to ensure updates to this object are handled in order."
            },
            "loglvl": {
              "type": "string",
              "enum": [
                "debug",
                "info",
                "warning",
                "error"
              ],
              "default": "info"
            },
            "datatype": {
              "type": "string"
            },
            "tenantId": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "url": {
              "type": "string"
            },
            "port": {
              "type": "integer"
            },
            "pollingFrequency": {
              "type": "integer"
            },
            "username": {
              "type": "string"
            },
            "password": {
              "type": "string"
            },
            "exportGroup": {
              "type": "string"
            },
            "datahubHeartbeatFrequency": {
              "type": "integer"
            },
            "datahubConnectionRetryFrequency": {
              "type": "integer"
            },
            "type": {
              "type": "string"
            },
            "zone": {
              "type": "string"
            },
            "createdTimestamp": {
              "type": "integer",
              "format": "int64",
              "description": "Time since epoch at which this object was instantiated."
            },
            "lastModifiedTimestamp": {
              "type": "integer",
              "format": "int64",
              "description": "Time since epoch at which this object was last altered."
            },
            "connectorInstanceId": {
              "type": "string",
              "description": "When set, describes the connectorInstanceId that corresponds to a roadrunner connection and that is currently using this connectorConfig"
            },
            "prometheusAddr": {
              "type": "string",
              "description": "When set, instructs roadrunner to connect to this local prometheus store intermediary metrics"
            },
            "prometheusPort": {
              "type": "integer"
            },
            "SNMPConfig": {
              "$ref": "#/definitions/SNMPConfig"
            },
            "SNMPTrapSenderConfig": {
              "$ref": "#/definitions/SNMPTrapSenderConfig"
            },
            "MQTTConfig": {
              "$ref": "#/definitions/MQTTConfig"
            },
            "ciscoTelemetryConfig": {
              "$ref": "#/definitions/CiscoTelemetryConfig"
            }
          }
        }
      }
    },
    "SNMPConfig": {
      "type": "object",
      "required": [
        "version",
        "baseOIDs",
        "targetList"
      ],
      "properties": {
        "targetList": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "target"
            ],
            "properties": {
              "host": {
                "type": "string",
                "format": "ipv4"
              },
              "port": {
                "type": "integer",
                "default": 161
              },
              "name": {
                "type": "string"
              }
            }
          }
        },
        "logWalkResults": {
          "type": "boolean",
          "description": "Intruct roadrunner to dump the total walk resutls to log for debug purposes. WARNING - On system with lots of\nSNMP targets, this can quite drastically reduce peformance\n"
        },
        "logSNMPTableResults": {
          "type": "boolean",
          "description": "Intruct roadrunner to dump a table view in the logs of the data extracted from the SNMP walk. WARNING - On system with lots of\nSNMP targets, this can quite drastically reduce peformance\n"
        },
        "version": {
          "type": "string",
          "description": "The SNMP Version protocol to use (either v2c or v3)",
          "default": "v3"
        },
        "V3PrivacyProtocol": {
          "type": "string",
          "description": "The privacy protocol to use (AES or DES)",
          "enum": [
            "AES",
            "DES"
          ],
          "default": "AES"
        },
        "V3AuthenticationProtocol": {
          "type": "string",
          "description": "The authentication protocol to use for V3 (SHA or MD5)",
          "enum": [
            "SHA",
            "MD5"
          ],
          "default": "SHA"
        },
        "V3PrivMode": {
          "type": "string",
          "description": "The v3 privacy mode (NoAuthNoPriv, AuthNoPriv, AuthPriv)",
          "enum": [
            "NoAuthNoPriv",
            "AuthNoPriv",
            "AuthPriv"
          ],
          "default": "AuthPriv"
        },
        "community": {
          "type": "string",
          "description": "When using v2c SNMP version, the community to use",
          "default": "public"
        },
        "walkType": {
          "type": "string",
          "enum": [
            "walk",
            "bulkwalk"
          ],
          "default": "bulkwalk",
          "description": "Allows the choice of using snmp walk vs snmp bulk walk\n"
        },
        "timeout": {
          "type": "string",
          "description": "The fetch timeout duration (in go time.Duration string format)",
          "default": "10s"
        },
        "maxRepetition": {
          "type": "integer",
          "description": "The maximum number of elements to fetch in a bulkGetNext (used during SNMPv3 walks)",
          "default": 20
        },
        "baseOIDs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The base OID to start the SNMP walk from. A single bulk fetch is issued every Polling frequency using the OID as root"
        },
        "mibPath": {
          "type": "string",
          "description": "A path that is local to the roadrunner instances and that contains properly json formatted mibs for mib resolution. \nSee https://github.com/qmsk/snmpbot for details\n",
          "default": "/defaultmibs/"
        },
        "recordMappings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RecordMappingHeader"
          }
        },
        "testRawFilePaths": {
          "description": "For SNMP testing, Roadrunner can fetch a test file from that location and serve it instead of \nhaving to connect to real devices. \n",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "SNMPTrapSenderConfig": {
      "type": "object",
      "required": [
        "trapTargetHost",
        "trapTargetPort",
        "community"
      ],
      "properties": {
        "trapTargetHost": {
          "type": "string"
        },
        "trapTargetPort": {
          "type": "string"
        },
        "community": {
          "type": "string"
        },
        "timeout": {
          "type": "integer"
        }
      }
    },
    "MQTTConfig": {
      "type": "object",
      "properties": {
        "brokerURI": {
          "type": "string"
        },
        "clientID": {
          "type": "string"
        },
        "notificationTopic": {
          "type": "string"
        },
        "user": {
          "type": "string"
        },
        "token": {
          "type": "string"
        }
      }
    },
    "CiscoTelemetryConfig": {
      "type": "object",
      "properties": {
        "logFetchResults": {
          "type": "boolean",
          "description": "Intruct roadrunner to dump all data retrieved from cisco-pipeline to log\n"
        },
        "logTableResults": {
          "type": "boolean",
          "description": "Intruct roadrunner to dump a table view in the logs of the data extracted from cisco-pipeline. WARNING - On system with lots of\nSNMP targets, this can quite drastically reduce peformance      \n"
        },
        "recordMappings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RecordMappingHeader"
          }
        }
      }
    },
    "RecordMappingHeader": {
      "type": "object",
      "required": [
        "objectType",
        "monitoredObjectId"
      ],
      "properties": {
        "monitoredObjectId": {
          "type": "string"
        },
        "objectType": {
          "type": "string"
        },
        "sysUpTimeticks": {
          "type": "string",
          "description": "The OID (or SNMPv2-MIB::sysUpTime )\n"
        },
        "sysCurrentTime": {
          "type": "string",
          "description": "The oid (or mib handle) for the current time of the system. We use that and sysUpTimeTick \nto compute a date from timetick\n"
        },
        "mappingType": {
          "type": "string",
          "enum": [
            "scalars",
            "array",
            "timetickArray"
          ],
          "default": "scalars",
          "description": "Describes if the raw record format is a single scalar or if it is express as an array. \nIn some raw format (for instance, SNMP, or CiscoTelemetry), arrays are natively supported. When this is the \ncase, the connectors instance will be instructed to parse the array and generate one row of data\nper row in the array\n"
        },
        "mappingMatch": {
          "$ref": "#/definitions/MatchEntry"
        },
        "mappings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RecordMapping"
          }
        }
      }
    },
    "MatchEntry": {
      "type": "object",
      "required": [
        "key",
        "matches"
      ],
      "properties": {
        "key": {
          "type": "string"
        },
        "matches": {
          "type": "string"
        }
      }
    },
    "RecordMapping": {
      "type": "object",
      "required": [
        "headerName",
        "rawSourceName"
      ],
      "properties": {
        "headerName": {
          "type": "string",
          "description": "Defines the header name for the column of data to be sent to Analytics"
        },
        "rawSourceName": {
          "type": "string",
          "description": "The Source name of the metrics to fetch. For SNMP, this can be either a mib handle (for instance, for Mib2, SNMPv2-MIB::sysName), \nor the equivalent OID (.1.3.6.1.2.1.1.5.0). Note that for in order for mib handle resolution to work, the appropriate mib must have been\nprovided to Connector's deployed instance upfront.\n"
        },
        "rawRecordType": {
          "type": "string",
          "enum": [
            "timestamp",
            "fixed",
            "interpolate",
            "mapped",
            "rate",
            "rateMean",
            "rate1",
            "rate5",
            "rate15",
            "oidIndex",
            "timetick"
          ],
          "default": "mapped",
          "description": "Describes if the raw record format a generated timestamp at the connector level (for \nsources where the collection time is not available), \"fixed\" (an absolute provided here), \"interpolate\" (we apply the value from another \nfield specified in the rawSourceName -- for instance, if field \"Name\" is interpolated and has rawSourceName=objectId, we will use the computed \nobjectId to set the value of the field \"Name\") or if it is express as an mapped value, (fetched from the data received from the probed host).\n\"rateMean\", \"rate1\", \"rate5\" and \"rate15\" computes the specified rate and sets this mapping with the appropriate value.\n"
        },
        "includeInObjectId": {
          "type": "boolean",
          "default": false,
          "description": "Wether this record's value must be included as part of the object-ID in the row"
        },
        "transformation": {
          "$ref": "#/definitions/Transformation"
        },
        "InstanceIDIdx": {
          "type": "array",
          "description": "If it's a single number, it's the index of the value in the OID (after we split on dots).\nIf it's an array of 2, it's the start and end indeces of the OID.\n",
          "items": {
            "type": "integer"
          },
          "maxItems": 2
        },
        "LookupSrcName": {
          "type": "string",
          "description": "The source name of the value we will need in order to do the lookup\n"
        },
        "LookupDestName": {
          "type": "string",
          "description": "The name of the field we're matching the lookup against'\n"
        },
        "objectIdJoinKey": {
          "type": "string",
          "default": "-",
          "description": "Which chain of characters to use to join this value's to the object Id. Only applicable when \"includeInObjectId\" is true"
        }
      }
    },
    "Transformation": {
      "type": "object",
      "properties": {
        "operation": {
          "type": "string",
          "enum": [
            "add",
            "multiply",
            "divide",
            "subtract"
          ]
        },
        "parameter": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "fixed",
            "interpolate"
          ]
        }
      }
    },
    "ConnectorInstanceCreateRequest": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "type": "object",
          "required": [
            "type",
            "attributes"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "connectorInstances"
              ]
            },
            "id": {
              "type": "string"
            },
            "attributes": {
              "type": "object",
              "required": [
                "status",
                "hostname"
              ],
              "properties": {
                "status": {
                  "type": "string"
                },
                "hostname": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "ConnectorInstanceUpdateRequest": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "type": "object",
          "required": [
            "type",
            "attributes",
            "id"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "connectorInstances"
              ]
            },
            "id": {
              "type": "string"
            },
            "attributes": {
              "type": "object",
              "required": [
                "_rev"
              ],
              "properties": {
                "_rev": {
                  "type": "string",
                  "description": "Value used to ensure updates to this object are handled in order."
                },
                "status": {
                  "type": "string"
                },
                "hostname": {
                  "type": "string"
                },
                "createdTimestamp": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Time since epoch at which this object was instantiated."
                },
                "lastModifiedTimestamp": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Time since epoch at which this object was last altered."
                }
              }
            }
          }
        }
      }
    },
    "ConnectorInstanceResponse": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/ConnectorInstance"
        }
      }
    },
    "ConnectorInstanceListResponse": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConnectorInstance"
          }
        }
      }
    },
    "ConnectorInstance": {
      "type": "object",
      "required": [
        "type",
        "id",
        "attributes"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "connectorInstances"
          ]
        },
        "id": {
          "type": "string"
        },
        "attributes": {
          "type": "object",
          "required": [
            "_rev",
            "datatype",
            "tenantId",
            "status",
            "hostname",
            "createdTimestamp",
            "lastModifiedTimestamp"
          ],
          "properties": {
            "_rev": {
              "type": "string",
              "description": "Value used to ensure updates to this object are handled in order."
            },
            "datatype": {
              "type": "string"
            },
            "tenantId": {
              "type": "string"
            },
            "status": {
              "type": "string"
            },
            "hostname": {
              "type": "string"
            },
            "createdTimestamp": {
              "type": "integer",
              "format": "int64",
              "description": "Time since epoch at which this object was instantiated."
            },
            "lastModifiedTimestamp": {
              "type": "integer",
              "format": "int64",
              "description": "Time since epoch at which this object was last altered."
            }
          }
        }
      }
    },
    "DataCleaningProfileCreateRequest": {
      "type": "object",
      "description": "Object used to create a Data Cleaning Profile in Datahub",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "type": "object",
          "required": [
            "type",
            "attributes"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "dataCleaningProfiles"
              ],
              "default": "dataCleaningProfiles"
            },
            "id": {
              "type": "string"
            },
            "attributes": {
              "type": "object",
              "required": [
                "rules"
              ],
              "properties": {
                "rules": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DataCleaningRule"
                  },
                  "description": "List of all the rules to evaluate for Data Cleaning"
                }
              }
            }
          }
        }
      }
    },
    "DataCleaningProfileUpdateRequest": {
      "type": "object",
      "description": "Object used to update a Data Cleaning Profile in Datahub",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "type": "object",
          "required": [
            "type",
            "id",
            "attributes"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "dataCleaningProfiles"
              ],
              "default": "dataCleaningProfiles"
            },
            "id": {
              "type": "string"
            },
            "attributes": {
              "type": "object",
              "required": [
                "_rev",
                "rules"
              ],
              "properties": {
                "_rev": {
                  "type": "string",
                  "description": "Value used to ensure updates to this object are handled in order."
                },
                "rules": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DataCleaningRule"
                  },
                  "description": "List of all the rules to evaluate for Data Cleaning"
                }
              }
            }
          }
        }
      }
    },
    "DataCleaningRule": {
      "type": "object",
      "description": "Provides the logic used to determine when data should be ommitted from queries",
      "required": [
        "metricVendor",
        "metricLabel",
        "triggerCondition",
        "clearCondition"
      ],
      "properties": {
        "metricVendor": {
          "type": "string",
          "description": "The name of the vendor which provides the metric used in the rule."
        },
        "metricLabel": {
          "type": "string",
          "description": "The name of the metric used in the rule."
        },
        "triggerCondition": {
          "$ref": "#/definitions/DataCleaningCondition"
        },
        "clearCondition": {
          "$ref": "#/definitions/DataCleaningCondition"
        }
      }
    },
    "DataCleaningCondition": {
      "type": "object",
      "required": [
        "comparator",
        "value",
        "valueAggregate",
        "duration"
      ],
      "description": "A condition used to evalutate when a data cleaning rule should be triggered or cleared.",
      "properties": {
        "comparator": {
          "type": "string",
          "enum": [
            "gt",
            "lt",
            "gte",
            "lte",
            "eq"
          ],
          "description": "Operand to use when evaluating the condition. [gt=greaterThan, lt=lessThan, gte=greaterThanOrEqual, lte=lessThanOrEqual, eq=equal]"
        },
        "value": {
          "type": "string",
          "description": "The value against which the selected metric will be compared."
        },
        "valueAggregate": {
          "type": "string",
          "enum": [
            "min",
            "max",
            "avg"
          ],
          "description": "The method of aggregation by which the selected metric will be aggregateds. [min=minimum, max=maximum, avg=average]"
        },
        "duration": {
          "type": "string",
          "description": "ISO-8601 interval over which this codition will be evaluated."
        }
      }
    },
    "DataCleaningProfileResponse": {
      "type": "object",
      "description": "A single object Data Cleaning Profile response from Datahub",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/DataCleaningProfile"
        }
      }
    },
    "DataCleaningProfileListResponse": {
      "type": "object",
      "description": "Response for one ore more Data Cleaning Profiles from Datahub",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataCleaningProfile"
          }
        }
      }
    },
    "DataCleaningProfile": {
      "type": "object",
      "required": [
        "type",
        "id",
        "attributes"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "dataCleaningProfiles"
          ],
          "default": "dataCleaningProfiles"
        },
        "id": {
          "type": "string"
        },
        "attributes": {
          "type": "object",
          "required": [
            "_rev",
            "rules",
            "createdTimestamp",
            "lastModifiedTimestamp"
          ],
          "properties": {
            "_rev": {
              "type": "string",
              "description": "Value used to ensure updates to this object are handled in order."
            },
            "rules": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DataCleaningRule"
              },
              "description": "List of all the rules to evaluate for Data Cleaning"
            },
            "createdTimestamp": {
              "type": "integer",
              "format": "int64",
              "description": "Time since epoch at which this object was instantiated."
            },
            "lastModifiedTimestamp": {
              "type": "integer",
              "format": "int64",
              "description": "Time since epoch at which this object was last altered."
            }
          }
        }
      }
    },
    "DataCleaningHistoryResponse": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/DataCleaningHistory"
        }
      }
    },
    "DataCleaningHistory": {
      "type": "object",
      "required": [
        "type",
        "id",
        "attributes"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "dataCleaningHistory"
          ],
          "default": "dataCleaningHistory"
        },
        "id": {
          "type": "string"
        },
        "attributes": {
          "type": "object",
          "required": [
            "events"
          ],
          "properties": {
            "transitions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DataCleaningTransition"
              },
              "description": "List of data cleaning events"
            }
          }
        }
      }
    },
    "DataCleaningTransition": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "integer",
          "format": "int64",
          "description": "Time since epoch at which these transitions occurred."
        },
        "rulesRaised": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataCleaningTransitionRule"
          }
        },
        "rulesCleared": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataCleaningTransitionRule"
          }
        },
        "errorsRaised": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataCleaningTransitionError"
          }
        },
        "errorsCleared": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataCleaningTransitionError"
          }
        }
      }
    },
    "DataCleaningTransitionRule": {
      "type": "object",
      "properties": {
        "direction": {
          "type": "string"
        },
        "rule": {
          "$ref": "#/definitions/DataCleaningRule"
        }
      }
    },
    "DataCleaningTransitionError": {
      "type": "object",
      "properties": {
        "direction": {
          "type": "string"
        },
        "errorCode": {
          "type": "string"
        }
      }
    },
    "IngestionProfileCreateRequest": {
      "type": "object",
      "description": "Object used to create an Ingestion Profile in Datahub",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "type": "object",
          "required": [
            "type",
            "attributes"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "ingestionProfiles"
              ]
            },
            "id": {
              "type": "string"
            },
            "attributes": {
              "type": "object",
              "required": [
                "metrics"
              ],
              "properties": {
                "metrics": {
                  "$ref": "#/definitions/IngestionProfileMetrics"
                },
                "metricList": {
                  "$ref": "#/definitions/IngestionProfileMetricList"
                }
              }
            }
          }
        }
      }
    },
    "IngestionProfileUpdateRequest": {
      "type": "object",
      "description": "Object used to update an Ingestion Profile in Datahub",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "type": "object",
          "required": [
            "type",
            "id",
            "attributes"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "ingestionProfiles"
              ]
            },
            "id": {
              "type": "string"
            },
            "attributes": {
              "type": "object",
              "required": [
                "_rev"
              ],
              "properties": {
                "_rev": {
                  "type": "string",
                  "description": "Value used to ensure updates to this object are handled in order."
                },
                "metrics": {
                  "$ref": "#/definitions/IngestionProfileMetrics"
                },
                "metricList": {
                  "$ref": "#/definitions/IngestionProfileMetricList"
                }
              }
            }
          }
        }
      }
    },
    "IngestionProfileListResponse": {
      "type": "object",
      "description": "Ingestion Profile response including one or more values",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IngestionProfile"
          }
        }
      }
    },
    "IngestionProfileResponse": {
      "type": "object",
      "description": "A single object Ingestion Profile response from Datahub",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/IngestionProfile"
        }
      }
    },
    "IngestionProfile": {
      "type": "object",
      "required": [
        "type",
        "id",
        "attributes"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "ingestionProfiles"
          ]
        },
        "id": {
          "type": "string"
        },
        "attributes": {
          "type": "object",
          "required": [
            "_id",
            "_rev",
            "tenantId",
            "dataType",
            "metrics",
            "createdTimestamp",
            "lastModifiedTimestamp"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "Unique identifier of the Tenant in Datahub"
            },
            "_id": {
              "type": "string"
            },
            "_rev": {
              "type": "string",
              "description": "Value used to ensure updates to this object are handled in order."
            },
            "datatype": {
              "description": "Name used to identify this type of record in Datahub",
              "type": "string"
            },
            "metrics": {
              "$ref": "#/definitions/IngestionProfileMetrics"
            },
            "metricList": {
              "$ref": "#/definitions/IngestionProfileMetricList"
            },
            "createdTimestamp": {
              "type": "integer",
              "format": "int64",
              "description": "Time since epoch at which this object was instantiated."
            },
            "lastModifiedTimestamp": {
              "type": "integer",
              "format": "int64",
              "description": "Time since epoch at which this object was last altered."
            }
          }
        }
      }
    },
    "IngestionProfileMetrics": {
      "type": "object",
      "description": "This object will be deprecated in a future version of the Datahub API",
      "properties": {
        "vendorMap": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "properties": {
              "monitoredObjectTypeMap": {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "metricMap": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "IngestionProfileMetricList": {
      "description": "Provides an array of objects which outline the vendor/monitoredObjectType/metrics that are actively being stroed in Datahub",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "vendor": {
            "description": "The name of the Vendor from which this Metric originates",
            "type": "string"
          },
          "monitoredObjectType": {
            "description": "The name of the type of Monitored Object for which this Metric is applicable",
            "type": "string"
          },
          "metric": {
            "type": "string",
            "description": "The name of the Metric"
          },
          "enabled": {
            "description": "When true, this metric will be recorded by Datahub. When false, this metric is ommitted.",
            "type": "boolean"
          },
          "direction": {
            "type": "string",
            "description": "Describes the direction of the test in case a Threshold needs to be different for one direction (i.e. actuator to reflector) versus another (i.e. round trip)"
          },
          "dimensions": {
            "type": "object",
            "description": "Provides data properties by which the Metric may be filtered and/or aggregated"
          }
        }
      }
    },
    "JsonApiThresholdCrossingByMOTopNRequest": {
      "deprecated": true,
      "description": "JSON API compliant wrapper for the threshold crossing by monitored object topn query",
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "required": [
            "type",
            "attributes"
          ],
          "properties": {
            "id": {
              "type": "string"
            },
            "type": {
              "type": "string",
              "enum": [
                "thresholdCrossingByMOTopNs"
              ]
            },
            "attributes": {
              "$ref": "#/definitions/ThresholdCrossingByMOTopNConfig"
            }
          }
        }
      }
    },
    "JsonApiThresholdCrossingByMOTopNResponse": {
      "deprecated": true,
      "description": "JSON API compliant wrapper for the threshold crossing by monitored object topn response",
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "id": {
              "type": "string"
            },
            "type": {
              "type": "string",
              "enum": [
                "thresholdCrossingByMOTopNs"
              ]
            },
            "attributes": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/ThresholdCrossingByMOTopNConfig"
                },
                {
                  "type": "object",
                  "required": [
                    "result"
                  ],
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/ThresholdCrossingByMOTopNReport"
                    }
                  }
                }
              ]
            }
          }
        }
      }
    },
    "ThresholdCrossingByMOTopNConfig": {
      "deprecated": true,
      "description": "The necessary request parameters for the metric api call",
      "type": "object",
      "required": [
        "interval",
        "thresholdProfileId",
        "numResults",
        "metric"
      ],
      "properties": {
        "aggregator": {
          "description": "the type of aggregation to determine the top N result set",
          "type": "string",
          "enum": [
            "min",
            "max",
            "avg"
          ],
          "example": [
            "max",
            "min",
            "avg"
          ]
        },
        "interval": {
          "description": "Time boundary for the metrics under consideration using the ISO-8601 standard",
          "type": "string",
          "example": "2018-04-08T14:00:00/2018-04-09T15:00:00"
        },
        "meta": {
          "$ref": "#/definitions/MetaFilter"
        },
        "metaExclude": {
          "$ref": "#/definitions/MetaExclude"
        },
        "tags": {
          "description": "List of tags that map to lists of Monitored Object Ids to be used as a filter for this query. Note that tags and meta can't be used in the same request.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "thresholdProfileId": {
          "description": "ID of the threshold profile that is used to select metrics and events",
          "type": "string",
          "example": "d1988d68-7444-4098-91eb-bd5a987397cb"
        },
        "timeout": {
          "description": "Query timeout in milliseconds",
          "type": "integer",
          "example": 30000
        },
        "ignoreCleaning": {
          "description": "A value of true will have the aggregation request execute on all data regardless of whether it has been cleaned or not",
          "type": "boolean"
        },
        "sorted": {
          "type": "string",
          "description": "Indicates whether the response should return the topn in ascending or descending order. The default value is descending",
          "enum": [
            "asc",
            "desc"
          ],
          "example": [
            "asc",
            "desc"
          ]
        },
        "numResults": {
          "description": "Query timeout in milliseconds",
          "type": "integer",
          "format": "int32",
          "example": 30000
        },
        "metric": {
          "$ref": "#/definitions/MetricIdentifierFilter"
        }
      }
    },
    "ThresholdCrossingByMOTopNReport": {
      "deprecated": true,
      "description": "The rendered response structure from the metric query",
      "type": "array",
      "items": {
        "description": "A set of entries detailing the number of event crossings per type ordered from most to least. Ranking is based on weighted criticality of each event type.",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/definitions/ResultEntryParameters"
          },
          {
            "type": "object",
            "required": [
              "result"
            ],
            "properties": {
              "result": {
                "type": "object",
                "properties": {
                  "critical": {
                    "description": "Number of critical event crossings for this metric",
                    "type": "integer"
                  },
                  "major": {
                    "description": "Number of major event crossings for this metric",
                    "type": "integer"
                  },
                  "minor": {
                    "description": "Number of minor event crossings for this metric",
                    "type": "integer"
                  },
                  "info": {
                    "description": "Number of info event crossings for this metric",
                    "type": "integer"
                  },
                  "warn": {
                    "description": "Number of warning event crossings for this metric",
                    "type": "integer"
                  },
                  "scored": {
                    "description": "The score that determined the ranking of this specific entry within the topn",
                    "type": "number",
                    "format": "float"
                  },
                  "total": {
                    "description": "Total number of event crossings",
                    "type": "integer"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "JsonApiSLAReportRequest": {
      "deprecated": true,
      "description": "JSON API compliant wrapper for the SLA report query",
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "required": [
            "type",
            "attributes"
          ],
          "properties": {
            "id": {
              "type": "string"
            },
            "type": {
              "type": "string",
              "enum": [
                "slaReports"
              ]
            },
            "attributes": {
              "$ref": "#/definitions/SLAReportConfig"
            }
          }
        }
      }
    },
    "JsonApiSLAReportResponse": {
      "deprecated": true,
      "description": "JSON API compliant wrapper for the SLA report response",
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "id": {
              "type": "string"
            },
            "type": {
              "type": "string",
              "enum": [
                "slaReports"
              ]
            },
            "attributes": {
              "type": "object",
              "properties": {
                "config": {
                  "$ref": "#/definitions/SLAReportConfig"
                },
                "result": {
                  "$ref": "#/definitions/SLAReport"
                }
              }
            }
          }
        }
      }
    },
    "SLAReportConfig": {
      "deprecated": true,
      "description": "The necessary request parameters for the metric api call",
      "type": "object",
      "required": [
        "interval",
        "thresholdProfileId"
      ],
      "properties": {
        "interval": {
          "description": "Time boundary for the metrics under consideration using the ISO-8601 standard",
          "type": "string",
          "example": "2018-04-08T14:00:00/2018-04-09T15:00:00"
        },
        "meta": {
          "$ref": "#/definitions/MetaFilter"
        },
        "tags": {
          "description": "List of tags that map to lists of Monitored Object Ids to be used as a filter for this query. Note that tags and meta can't be used in the same request.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "thresholdProfileId": {
          "description": "ID of the threshold profile that is used to select metrics and events",
          "type": "string",
          "example": "d1988d68-7444-4098-91eb-bd5a987397cb"
        },
        "granularity": {
          "description": "The granularity for timeseries in ISO-8601 duration format, or ALL",
          "type": "string",
          "example": "PT1H"
        },
        "timeout": {
          "description": "Query timeout in milliseconds",
          "type": "integer",
          "example": 30000
        },
        "ignoreCleaning": {
          "description": "A value of true will have the aggregation request execute on all data regardless of whether it has been cleaned or not",
          "type": "boolean"
        },
        "timezone": {
          "description": "timezone used for time-based buckets (e.g. hour of day buckets) see http://joda-time.sourceforge.net/timezones.html",
          "type": "string"
        }
      }
    },
    "SLAReportSummary": {
      "deprecated": true,
      "description": "The rendered response structure from the metric query",
      "type": "object",
      "properties": {
        "objectCount": {
          "type": "integer"
        },
        "totalDuration": {
          "type": "integer"
        },
        "totalViolationCount": {
          "type": "integer"
        },
        "totalViolationDuration": {
          "type": "integer"
        },
        "slaCompliancePercent": {
          "type": "number",
          "format": "float"
        },
        "byGranularity": {
          "type": "array",
          "x-omitempty": true,
          "items": {
            "$ref": "#/definitions/SLATotalsTimestamp"
          }
        }
      },
      "required": [
        "objectCount",
        "totalDuration",
        "totalViolationCount",
        "totalViolationDuration",
        "slaCompliancePercent"
      ]
    },
    "SLATotalsTimestamp": {
      "deprecated": true,
      "type": "object",
      "required": [
        "timestamp",
        "totalDuration",
        "totalViolationCount",
        "totalViolationDuration"
      ],
      "properties": {
        "timestamp": {
          "type": "string"
        },
        "totalDuration": {
          "type": "integer"
        },
        "totalViolationCount": {
          "type": "integer"
        },
        "totalViolationDuration": {
          "type": "integer"
        }
      }
    },
    "SLAReport": {
      "deprecated": true,
      "type": "object",
      "properties": {
        "summary": {
          "$ref": "#/definitions/SLAReportSummary"
        },
        "metric": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SLAReportMetric"
          }
        }
      }
    },
    "SLAReportMetric": {
      "deprecated": true,
      "allOf": [
        {
          "$ref": "#/definitions/MetricIdentifier"
        },
        {
          "properties": {
            "byGranularity": {
              "type": "array",
              "x-omitempty": true,
              "items": {
                "$ref": "#/definitions/SLAMetricEntryTimeStamp"
              }
            },
            "byHourOfDay": {
              "type": "array",
              "x-omitempty": true,
              "items": {
                "$ref": "#/definitions/SLAMetricByHourOfDay"
              }
            },
            "byDayOfWeek": {
              "type": "array",
              "x-omitempty": true,
              "items": {
                "$ref": "#/definitions/SLAMetricByDayOfWeek"
              }
            }
          }
        }
      ]
    },
    "SLAMetricByHourOfDay": {
      "deprecated": true,
      "type": "object",
      "required": [
        "hourOfDay",
        "violationCount"
      ],
      "properties": {
        "hourOfDay": {
          "type": "string"
        },
        "violationCount": {
          "type": "integer"
        }
      }
    },
    "SLAMetricByDayOfWeek": {
      "deprecated": true,
      "type": "object",
      "required": [
        "violationCount",
        "dayOfWeek"
      ],
      "properties": {
        "dayOfWeek": {
          "type": "string"
        },
        "violationCount": {
          "type": "integer"
        }
      }
    },
    "SLAMetricEntryTimeStamp": {
      "deprecated": true,
      "type": "object",
      "required": [
        "timestamp",
        "totalDuration",
        "violationCount",
        "violationDuration"
      ],
      "properties": {
        "timestamp": {
          "type": "string"
        },
        "totalDuration": {
          "type": "integer"
        },
        "violationCount": {
          "type": "integer"
        },
        "violationDuration": {
          "type": "integer"
        }
      }
    },
    "SLAMetricEntry": {
      "deprecated": true,
      "type": "object",
      "required": [
        "totalDuration",
        "violationCount",
        "violationDuration"
      ],
      "properties": {
        "totalDuration": {
          "type": "integer"
        },
        "violationCount": {
          "type": "integer"
        },
        "violationDuration": {
          "type": "integer"
        }
      }
    },
    "JsonApiAggregationRequest": {
      "deprecated": true,
      "description": "JSON API compliant wrapper for the aggregation query",
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "required": [
            "type",
            "attributes"
          ],
          "properties": {
            "id": {
              "type": "string"
            },
            "type": {
              "type": "string",
              "enum": [
                "aggregateMetrics"
              ]
            },
            "attributes": {
              "$ref": "#/definitions/AggregationConfig"
            }
          }
        }
      }
    },
    "JsonApiAggregationResponse": {
      "deprecated": true,
      "description": "JSON API compliant wrapper for the aggregation response",
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "id": {
              "type": "string"
            },
            "type": {
              "type": "string",
              "enum": [
                "aggregateMetrics"
              ]
            },
            "attributes": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/AggregationConfig"
                },
                {
                  "type": "object",
                  "required": [
                    "result"
                  ],
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/AggregationReport"
                    }
                  }
                }
              ]
            }
          }
        }
      }
    },
    "AggregationConfig": {
      "deprecated": true,
      "description": "The necessary request parameters for the metric api call",
      "type": "object",
      "required": [
        "interval",
        "aggregation",
        "metrics"
      ],
      "properties": {
        "monitoredObjects": {
          "description": "An optional array of monitored objects that we want to retrieve specific aggregations against. This attribute cannot be used if the meta attribute is also present in the request.",
          "x-omitempty": true,
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "7c3d3280-628c-c778-92ec-4e9b83fcbb4d",
            "41f1b537-b7f5-41c3-a1b2-a75e1536c54e"
          ]
        },
        "meta": {
          "$ref": "#/definitions/MetaFilter"
        },
        "metaExclude": {
          "$ref": "#/definitions/MetaExclude"
        },
        "tags": {
          "description": "List of tags that map to lists of Monitored Object Ids to be used as a filter for this query. Note that tags and meta can't be used in the same request.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "interval": {
          "description": "Time boundary for the metrics under consideration using the ISO-8601 standard",
          "type": "string",
          "example": "2018-04-08T14:00:00/2018-04-09T15:00:00"
        },
        "granularity": {
          "description": "The granularity for timeseries in ISO-8601 duration format, or ALL",
          "type": "string",
          "example": "PT1H"
        },
        "timeout": {
          "description": "Query timeout in milliseconds",
          "type": "integer",
          "example": 30000
        },
        "aggregation": {
          "description": "The aggregation function to be used against the metrics filtered-in for the query",
          "type": "string",
          "enum": [
            "min",
            "max",
            "avg"
          ],
          "example": [
            "min",
            "max",
            "avg"
          ]
        },
        "ignoreCleaning": {
          "description": "A value of true will have the aggregation request execute on all data regardless of whether it has been cleaned or not",
          "type": "boolean"
        },
        "metrics": {
          "description": "An array of identifiers that filter-in specifically identified metrics.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetricIdentifierFilter"
          }
        },
        "dimensions": {
          "$ref": "#/definitions/DimensionFilter"
        }
      }
    },
    "AggregationReport": {
      "deprecated": true,
      "description": "The rendered response structure from the metric query",
      "type": "array",
      "items": {
        "$ref": "#/definitions/MetricResultSeries"
      }
    },
    "JsonApiHistogramRequest": {
      "deprecated": true,
      "description": "JSON API compliant wrapper for the histogram query",
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "required": [
            "type",
            "attributes"
          ],
          "properties": {
            "id": {
              "type": "string"
            },
            "type": {
              "type": "string",
              "enum": [
                "histograms"
              ]
            },
            "attributes": {
              "$ref": "#/definitions/HistogramConfig"
            }
          }
        }
      }
    },
    "JsonApiHistogramResponse": {
      "deprecated": true,
      "description": "JSON API compliant wrapper for the histogram response",
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "id": {
              "type": "string"
            },
            "type": {
              "type": "string",
              "enum": [
                "histograms"
              ]
            },
            "attributes": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/HistogramConfig"
                },
                {
                  "type": "object",
                  "required": [
                    "result"
                  ],
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/HistogramReport"
                    }
                  }
                }
              ]
            }
          }
        }
      }
    },
    "HistogramConfig": {
      "deprecated": true,
      "description": "The necessary request parameters for the metric api call",
      "type": "object",
      "required": [
        "interval",
        "metrics"
      ],
      "properties": {
        "meta": {
          "$ref": "#/definitions/MetaFilter"
        },
        "metaExclude": {
          "$ref": "#/definitions/MetaExclude"
        },
        "tags": {
          "description": "List of tags that map to lists of Monitored Object Ids to be used as a filter for this query. Note that tags and meta can't be used in the same request.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "interval": {
          "description": "Time boundary for the metrics under consideration using the ISO-8601 standard",
          "type": "string",
          "example": "2018-04-08T14:00:00/2018-04-09T15:00:00"
        },
        "timeout": {
          "description": "Query timeout in milliseconds",
          "type": "integer",
          "example": 30000
        },
        "ignoreCleaning": {
          "description": "A value of true will have the aggregation request execute on all data regardless of whether it has been cleaned or not",
          "type": "boolean"
        },
        "granularity": {
          "description": "The granularity for timeseries in ISO-8601 duration format, or ALL",
          "type": "string",
          "example": "PT1H"
        },
        "metrics": {
          "description": "A list of the requested metric identifiers and the histogram buckets associated with those identifiers",
          "type": "array",
          "items": {
            "allOf": [
              {
                "$ref": "#/definitions/MetricIdentifierFilter"
              },
              {
                "type": "object",
                "required": [
                  "buckets"
                ],
                "properties": {
                  "buckets": {
                    "$ref": "#/definitions/HistogramBucketFilter"
                  }
                }
              }
            ]
          }
        },
        "dimensions": {
          "$ref": "#/definitions/DimensionFilter"
        }
      }
    },
    "HistogramReport": {
      "deprecated": true,
      "description": "The rendered response structure from the metric query",
      "type": "array",
      "items": {
        "allOf": [
          {
            "$ref": "#/definitions/ResultEntryParameters"
          },
          {
            "type": "object",
            "required": [
              "series"
            ],
            "properties": {
              "series": {
                "description": "An ordered list of metric values corresponding to the buckets provided in the histogram request",
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "values"
                  ],
                  "properties": {
                    "timestamp": {
                      "type": "string"
                    },
                    "values": {
                      "type": "array",
                      "items": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      }
    },
    "JsonApiTopNForMetricRequest": {
      "deprecated": true,
      "description": "JSON API compliant wrapper for the topn query",
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "required": [
            "type",
            "attributes"
          ],
          "properties": {
            "id": {
              "type": "string"
            },
            "type": {
              "type": "string",
              "enum": [
                "topNForMetrics"
              ]
            },
            "attributes": {
              "$ref": "#/definitions/TopNForMetricConfig"
            }
          }
        }
      }
    },
    "JsonApiTopNForMetricResponse": {
      "deprecated": true,
      "description": "JSON API compliant wrapper for the topn response",
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "id": {
              "type": "string"
            },
            "type": {
              "type": "string",
              "enum": [
                "topNForMetrics"
              ]
            },
            "attributes": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/TopNForMetricConfig"
                },
                {
                  "type": "object",
                  "required": [
                    "result"
                  ],
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/TopNForMetricReport"
                    }
                  }
                }
              ]
            }
          }
        }
      }
    },
    "TopNForMetricConfig": {
      "deprecated": true,
      "description": "The necessary request parameters for the metric api call",
      "type": "object",
      "required": [
        "interval",
        "aggregator",
        "metric"
      ],
      "properties": {
        "meta": {
          "$ref": "#/definitions/MetaFilter"
        },
        "metaExclude": {
          "$ref": "#/definitions/MetaExclude"
        },
        "tags": {
          "description": "List of tags that map to lists of Monitored Object Ids to be used as a filter for this query. Note that tags and meta can't be used in the same request.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "monitoredObjects": {
          "description": "An optional array of monitored objects that we want to retrieve specific topn against. This attribute cannot be used if the meta attribute is also present in the request.",
          "x-omitempty": true,
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "7c3d3280-628c-c778-92ec-4e9b83fcbb4d",
            "41f1b537-b7f5-41c3-a1b2-a75e1536c54e"
          ]
        },
        "interval": {
          "description": "Time boundary for the metrics under consideration using the ISO-8601 standard",
          "type": "string",
          "example": "2018-04-08T14:00:00/2018-04-09T15:00:00"
        },
        "timeout": {
          "description": "Query timeout in milliseconds",
          "type": "integer",
          "example": 30000
        },
        "ignoreCleaning": {
          "description": "A value of true will have the aggregation request execute on all data regardless of whether it has been cleaned or not",
          "type": "boolean"
        },
        "sorted": {
          "type": "string",
          "description": "Indicates whether the response should return the topn in ascending or descending order. The default value is descending",
          "enum": [
            "asc",
            "desc"
          ],
          "example": [
            "asc",
            "desc"
          ]
        },
        "aggregator": {
          "type": "string",
          "description": "The type of aggregation (avg/min/max/count) avg - Returns the TopN after averaging the metric per monitored object for the time range, within the bounding filter as specified by the bucket property. min - Returns the TopN after determining the minimum value for the metric per monitored object for the time range, within the bounding filter as specified by the bucket property. max - Returns the TopN after determining the maximum value for the metric per monitored object for the time range, within the bounding filter as specified by the bucket property. count - Returns the TopN after determining the number of events within the specified bucket property. A single bucket is the preferred usage but multiple buckets can be used as a band pass filter. \n",
          "enum": [
            "min",
            "max",
            "avg",
            "count"
          ],
          "example": [
            "min",
            "max",
            "avg",
            "count"
          ]
        },
        "numResults": {
          "description": "Number of results to return",
          "type": "integer"
        },
        "metric": {
          "$ref": "#/definitions/MetricIdentifierFilter"
        },
        "dimensions": {
          "$ref": "#/definitions/DimensionFilter"
        },
        "buckets": {
          "$ref": "#/definitions/HistogramBucketFilter"
        }
      }
    },
    "MetricView": {
      "deprecated": true,
      "type": "object",
      "required": [
        "metric",
        "aggregator",
        "name"
      ],
      "properties": {
        "metric": {
          "type": "string",
          "example": "delayP95_max"
        },
        "aggregator": {
          "type": "string",
          "example": "min/max/sum/"
        },
        "name": {
          "type": "string",
          "example": "delayP95"
        }
      }
    },
    "TopNForMetricReport": {
      "deprecated": true,
      "description": "The rendered response structure from the metric query",
      "type": "array",
      "items": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/definitions/ResultEntryParameters"
          },
          {
            "type": "object",
            "required": [
              "result"
            ],
            "properties": {
              "result": {
                "description": "Ranked list of top metric values for the specified criteria",
                "type": "object",
                "required": [
                  "value"
                ],
                "properties": {
                  "count": {
                    "type": "integer"
                  },
                  "value": {
                    "type": "number",
                    "format": "float"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "JsonApiThresholdCrossingRequest": {
      "deprecated": true,
      "description": "JSON API compliant wrapper for the threshold crossing query",
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "required": [
            "type",
            "attributes"
          ],
          "properties": {
            "id": {
              "type": "string"
            },
            "type": {
              "type": "string",
              "enum": [
                "thresholdCrossings"
              ]
            },
            "attributes": {
              "$ref": "#/definitions/ThresholdCrossingConfig"
            }
          }
        }
      }
    },
    "JsonApiThresholdCrossingResponse": {
      "deprecated": true,
      "description": "JSON API compliant wrapper for the threshold crossing response",
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "id": {
              "type": "string"
            },
            "type": {
              "type": "string",
              "enum": [
                "thresholdCrossings"
              ]
            },
            "attributes": {
              "type": "object",
              "properties": {
                "config": {
                  "$ref": "#/definitions/ThresholdCrossingConfig"
                },
                "result": {
                  "$ref": "#/definitions/ThresholdCrossingReport"
                }
              }
            }
          }
        }
      }
    },
    "ThresholdCrossingConfig": {
      "deprecated": true,
      "description": "The necessary request parameters for the metric api call",
      "type": "object",
      "required": [
        "interval",
        "metrics"
      ],
      "properties": {
        "meta": {
          "$ref": "#/definitions/MetaFilter"
        },
        "metaExclude": {
          "$ref": "#/definitions/MetaExclude"
        },
        "interval": {
          "description": "Time boundary for the metrics under consideration using the ISO-8601 standard",
          "type": "string",
          "example": "2018-04-08T14:00:00/2018-04-09T15:00:00"
        },
        "tags": {
          "description": "List of tags that map to lists of Monitored Object Ids to be used as a filter for this query. Note that tags and meta can't be used in the same request.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "granularity": {
          "description": "the granularity for timeseries in ISO-8601 duration format, or ALL",
          "type": "string",
          "example": "PT1H"
        },
        "thresholdProfileId": {
          "type": "string",
          "description": "ID of the threshold profile that is used to select metrics and events",
          "example": "d1988d68-7444-4098-91eb-bd5a987397cb"
        },
        "timeout": {
          "type": "integer",
          "description": "query timeout in milliseconds",
          "example": 30000
        },
        "ignoreCleaning": {
          "description": "A value of true will have the aggregation request execute on all data regardless of whether it has been cleaned or not",
          "type": "boolean"
        },
        "metrics": {
          "type": "array",
          "description": "limits the results to include only metrics in the whitelist",
          "items": {
            "$ref": "#/definitions/MetricIdentifierFilter"
          }
        }
      }
    },
    "ThresholdCrossingReport": {
      "deprecated": true,
      "type": "object",
      "properties": {
        "metric": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ThresholdCrossingReportMetric"
          }
        }
      }
    },
    "ThresholdCrossingReportMetric": {
      "deprecated": true,
      "allOf": [
        {
          "$ref": "#/definitions/MetricIdentifierFilter"
        },
        {
          "properties": {
            "critical": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ThresholdCrossingViolations"
              }
            },
            "major": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ThresholdCrossingViolations"
              }
            },
            "minor": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ThresholdCrossingViolations"
              }
            },
            "warning": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ThresholdCrossingViolations"
              }
            },
            "sla": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ThresholdCrossingViolations"
              }
            }
          }
        }
      ]
    },
    "ThresholdCrossingViolations": {
      "deprecated": true,
      "type": "object",
      "required": [
        "violationCount",
        "timestamp"
      ],
      "properties": {
        "timestamp": {
          "type": "string"
        },
        "violationCount": {
          "type": "integer"
        }
      }
    },
    "ResultEntryParameters": {
      "deprecated": true,
      "description": "Describes filtering criteria used for a particular query",
      "type": "object",
      "required": [
        "metric"
      ],
      "properties": {
        "monitoredObjectIds": {
          "x-omitempty": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "vendor": {
          "type": "string"
        },
        "objectType": {
          "x-omitempty": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "metric": {
          "type": "string"
        },
        "direction": {
          "x-omitempty": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "MetricResultSeries": {
      "deprecated": true,
      "description": "Describes series data prefixed with the filter criteria that were used to generate the output",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ResultEntryParameters"
        },
        {
          "type": "object",
          "required": [
            "series"
          ],
          "properties": {
            "series": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MetricResultEntry"
              }
            }
          }
        }
      ]
    },
    "MetricResultEntry": {
      "deprecated": true,
      "description": "A singular time series entry that contains the timestamp and value",
      "type": "object",
      "required": [
        "timestamp",
        "value"
      ],
      "properties": {
        "timestamp": {
          "type": "string"
        },
        "value": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "ThresholdCrossingDurationRequest": {
      "deprecated": true,
      "description": "JSON API compliant wrapper for the threshold crossing duration query. Returns the amount of time spent in violation of the specified Threshold.",
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "required": [
            "type",
            "attributes"
          ],
          "properties": {
            "id": {
              "type": "string"
            },
            "type": {
              "type": "string",
              "enum": [
                "thresholdCrossingDuration"
              ]
            },
            "attributes": {
              "$ref": "#/definitions/ThresholdCrossingDurationConfig"
            }
          }
        }
      }
    },
    "ThresholdCrossingDurationResponse": {
      "deprecated": true,
      "description": "JSON API compliant wrapper for the threshold crossing duration response. Contains the amount of time spent in violation of the specified Threshold.",
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "id": {
              "type": "string"
            },
            "type": {
              "type": "string",
              "enum": [
                "thresholdCrossingDuration"
              ]
            },
            "attributes": {
              "type": "object",
              "properties": {
                "config": {
                  "$ref": "#/definitions/ThresholdCrossingDurationConfig"
                },
                "result": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ThresholdCrossingDurationResult"
                  }
                }
              }
            }
          }
        }
      }
    },
    "ThresholdCrossingDurationResult": {
      "deprecated": true,
      "allOf": [
        {
          "$ref": "#/definitions/MetricIdentifierFilter"
        },
        {
          "type": "object",
          "required": [
            "meta",
            "durationDetails"
          ],
          "properties": {
            "meta": {
              "$ref": "#/definitions/MetaFilter"
            },
            "durationDetails": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ThresholdCrossingDurationValues"
              }
            }
          }
        }
      ]
    },
    "ThresholdCrossingDurationValues": {
      "deprecated": true,
      "type": "object",
      "required": [
        "monitoredObjectId",
        "violationDuration"
      ],
      "properties": {
        "monitoredObjectId": {
          "type": "string",
          "description": "The unique identifier of the Monitored Object that is in violation of the Threshold"
        },
        "violationDuration": {
          "type": "integer",
          "description": "The total time, in milliseconds, spent in violation of a threshold"
        }
      }
    },
    "ThresholdCrossingDurationConfig": {
      "deprecated": true,
      "description": "The necessary request parameters for the metric api call",
      "type": "object",
      "required": [
        "interval",
        "metrics"
      ],
      "properties": {
        "meta": {
          "$ref": "#/definitions/MetaFilter"
        },
        "interval": {
          "description": "Time boundary for the metrics under consideration using the ISO-8601 standard",
          "type": "string",
          "example": "2018-04-08T14:00:00/2018-04-09T15:00:00"
        },
        "granularity": {
          "description": "the granularity for timeseries in ISO-8601 duration format, or ALL",
          "type": "string",
          "example": "PT1H"
        },
        "thresholdProfileId": {
          "type": "string",
          "description": "ID of the threshold profile that is used to select metrics and events",
          "example": "d1988d68-7444-4098-91eb-bd5a987397cb"
        },
        "timeout": {
          "type": "integer",
          "description": "query timeout in milliseconds",
          "example": 30000
        },
        "ignoreCleaning": {
          "description": "A value of true will have the aggregation request execute on all data regardless of whether it has been cleaned or not",
          "type": "boolean"
        },
        "metrics": {
          "type": "array",
          "description": "limits the results to include only metrics in the whitelist",
          "items": {
            "$ref": "#/definitions/MetricIdentifierFilter"
          }
        }
      }
    },
    "MonitoredObjectCreateRequest": {
      "type": "object",
      "required": [
        "data"
      ],
      "description": "Object used to create a new Monitored Object in Datahub",
      "properties": {
        "data": {
          "$ref": "#/definitions/MonitoredObjectCreate"
        }
      }
    },
    "MonitoredObjectUpdateRequest": {
      "type": "object",
      "required": [
        "data"
      ],
      "description": "Object used to update an existing Monitored Object in Datahub",
      "properties": {
        "data": {
          "$ref": "#/definitions/MonitoredObjectUpdate"
        }
      }
    },
    "MonitoredObjectListResponse": {
      "type": "object",
      "description": "Monitoerd Object response including one or more values",
      "required": [
        "data"
      ],
      "properties": {
        "links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonitoredObject"
          }
        }
      }
    },
    "MonitoredObjectResponse": {
      "type": "object",
      "description": "A single object Monitored Object response from Datahub",
      "required": [
        "data"
      ],
      "properties": {
        "links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "data": {
          "$ref": "#/definitions/MonitoredObject"
        }
      }
    },
    "MonitoredObject": {
      "type": "object",
      "required": [
        "type",
        "id",
        "attributes"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "monitoredObjects"
          ]
        },
        "id": {
          "type": "string"
        },
        "attributes": {
          "type": "object",
          "required": [
            "_rev",
            "objectId",
            "actuatorName",
            "actuatorType",
            "reflectorName",
            "reflectorType",
            "objectName",
            "objectType",
            "createdTimestamp",
            "sourceLocation",
            "targetLocation",
            "topology",
            "archiveTimestamp",
            "lastReportedTimestamp"
          ],
          "properties": {
            "_rev": {
              "type": "string",
              "description": "Value used to ensure updates to this object are handled in order."
            },
            "datatype": {
              "type": "string",
              "description": "Name used to identify this type of record in Datahub"
            },
            "tenantId": {
              "type": "string",
              "description": "Unique identifier of the Tenant in Datahub"
            },
            "objectId": {
              "type": "string",
              "description": "Unique identifier of the Monitored Object in Datahub"
            },
            "actuatorName": {
              "type": "string",
              "description": "Name of the origin of the Monitored Object"
            },
            "actuatorType": {
              "type": "string",
              "description": "Type of the origin of the Monitored Object",
              "enum": [
                "unknown",
                "accedian-nid",
                "accedian-vnid"
              ]
            },
            "reflectorName": {
              "type": "string",
              "description": "Name of the target of the Monitored Object"
            },
            "reflectorType": {
              "type": "string",
              "description": "Type of the target of the Monitored Object",
              "enum": [
                "unknown",
                "accedian-nid",
                "accedian-vnid"
              ]
            },
            "objectName": {
              "type": "string",
              "description": "Common name of the Monitored Object"
            },
            "objectType": {
              "type": "string",
              "description": "Type of the Monitored Object. For instance, possible values are [unknown, flowmeter, twamp-pe, twamp-sf, twamp-sl, cisco-interface, cisco-node-summary, pvx, paa, \nregulator, rfc8321, dmm, slm, eth-dm, eth-vs, port, sa, sa-metrics, pl, iperf, echo-icmp, echo-udp]. If using dynamic types (i.e, for SNMP), you must enter the name of the dynamic type here\n"
            },
            "meta": {
              "type": "object",
              "description": "Attributes added to a Monitored Object that help identify the Monitored Object as well as provide flitering/grouping properties",
              "pattern": "^[a-z_]+$",
              "additionalProperties": {
                "type": "string"
              },
              "example": {
                "region": "paris",
                "wgs87_x": "-45.7123912",
                "wgs87_y": "-74.2130912"
              }
            },
            "sourceLocation": {
              "$ref": "#/definitions/MonitoredObjectLocation"
            },
            "destinationLocation": {
              "$ref": "#/definitions/MonitoredObjectLocation"
            },
            "topology": {
              "description": "Tags used to describe the path segments associated with the Monitored Object",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "archiveTimestamp": {
              "type": "integer",
              "format": "int64",
              "description": "Time since epoch at which this object was archived."
            },
            "createdTimestamp": {
              "type": "integer",
              "format": "int64",
              "description": "Time since epoch at which this object was instantiated."
            },
            "lastModifiedTimestamp": {
              "type": "integer",
              "format": "int64",
              "description": "Time since epoch at which this object was last altered."
            },
            "lastReportedTimestamp": {
              "type": "integer",
              "format": "int64",
              "description": "Time since epoch at which this object last had metrics processed."
            }
          }
        }
      }
    },
    "BulkOperationResponseV2": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "type",
              "id",
              "attributes"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "bulkOperationResponses"
                ]
              },
              "id": {
                "type": "string"
              },
              "attributes": {
                "description": "Provides the result of multiple operations that were issued in a single request to Datahub",
                "type": "object",
                "properties": {
                  "ok": {
                    "type": "boolean"
                  },
                  "id": {
                    "type": "string"
                  },
                  "rev": {
                    "type": "string"
                  },
                  "error": {
                    "type": "string"
                  },
                  "reason": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "BulkMonitoredObjectCreateRequest": {
      "type": "object",
      "required": [
        "data"
      ],
      "description": "Object used to create one or more Monitored Object in Datahub",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonitoredObjectCreate"
          }
        }
      }
    },
    "MonitoredObjectCreate": {
      "type": "object",
      "required": [
        "type",
        "attributes"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "monitoredObjects"
          ]
        },
        "id": {
          "type": "string"
        },
        "attributes": {
          "type": "object",
          "required": [
            "objectId"
          ],
          "properties": {
            "objectId": {
              "type": "string",
              "description": "Unique identifier of the Monitored Object in Datahub"
            },
            "actuatorName": {
              "type": "string",
              "description": "Name of the origin of the Monitored Object"
            },
            "actuatorType": {
              "type": "string",
              "description": "Type of the origin of the Monitored Object",
              "enum": [
                "unknown",
                "accedian-nid",
                "accedian-vnid"
              ]
            },
            "reflectorName": {
              "type": "string",
              "description": "Name of the target of the Monitored Object"
            },
            "reflectorType": {
              "type": "string",
              "description": "Type of the target of the Monitored Object",
              "enum": [
                "unknown",
                "accedian-nid",
                "accedian-vnid"
              ]
            },
            "objectName": {
              "type": "string",
              "description": "Name of the Monitored Object"
            },
            "objectType": {
              "type": "string",
              "description": "Type of the Monitored Object. For instance, possible values are [unknown, flowmeter, twamp-pe, twamp-sf, twamp-sl, cisco-interface, cisco-node-summary, pvx, paa, \nregulator, rfc8321, dmm, slm, eth-dm, eth-vs, port, sa, sa-metrics, pl, iperf, echo-icmp, echo-udp]. If using dynamic types (i.e, for SNMP), you must enter the name of the dynamic type here\n"
            },
            "meta": {
              "type": "object",
              "description": "Attributes added to a Monitored Object that help identify the Monitored Object as well as provide flitering/grouping properties",
              "additionalProperties": {
                "type": "string"
              },
              "example": {
                "region": "paris",
                "wgs87_x": "-45.7123912",
                "wgs87_y": "-74.2130912"
              }
            },
            "sourceLocation": {
              "$ref": "#/definitions/MonitoredObjectLocation"
            },
            "destinationLocation": {
              "$ref": "#/definitions/MonitoredObjectLocation"
            },
            "topology": {
              "description": "Tags used to describe the path segments associated with the Monitored Object",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "BulkMonitoredObjectMetaCreateRequest": {
      "type": "object",
      "required": [
        "data"
      ],
      "description": "Object used to update the meta information for one or more Monitored Objects in Datahub",
      "properties": {
        "data": {
          "type": "object",
          "required": [
            "type",
            "attributes"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "monitoredObjectsMeta"
              ]
            },
            "attributes": {
              "type": "object",
              "properties": {
                "metadata-entries": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "objectName",
                      "metadata"
                    ],
                    "properties": {
                      "objectName": {
                        "type": "string",
                        "description": "Name of the monitored object in the datastore"
                      },
                      "metadata": {
                        "type": "object",
                        "description": "Attributes added to a Monitored Object that help identify the Monitored Object as well as provide filtering/grouping properties",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "example": {
                          "region": "paris",
                          "wgs87_x": "-45.7123912",
                          "wgs87_y": "-74.2130912"
                        }
                      },
                      "sourceLocation": {
                        "$ref": "#/definitions/MonitoredObjectLocation"
                      },
                      "destinationLocation": {
                        "$ref": "#/definitions/MonitoredObjectLocation"
                      },
                      "topology": {
                        "description": "Tags used to describe the path segments associated with the Monitored Object",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "BulkMonitoredObjectPatchRequest": {
      "type": "object",
      "description": "Patch the names for Monitored Objects in Datahub",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonitoredObjectPatch"
          }
        }
      }
    },
    "BulkMonitoredObjectUpdateRequest": {
      "type": "object",
      "description": "Object used to update one or more Monitored Objects in Datahub",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonitoredObjectUpdate"
          }
        }
      }
    },
    "MonitoredObjectFilteredListRequest": {
      "type": "object",
      "properties": {
        "objectNamePrefix": {
          "type": "string"
        },
        "objectType": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "meta": {
          "$ref": "#/definitions/MetaFilter"
        },
        "metaExclude": {
          "$ref": "#/definitions/MetaExclude"
        },
        "archiveTimestamp": {
          "$ref": "#/definitions/TimeRange"
        },
        "lastReportedTimestamp": {
          "$ref": "#/definitions/TimeRange"
        },
        "createdTimestamp": {
          "$ref": "#/definitions/TimeRange"
        },
        "sourceLocation": {
          "$ref": "#/definitions/GeoFence"
        },
        "destinationLocation": {
          "$ref": "#/definitions/GeoFence"
        },
        "topology": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "GeoFence": {
      "type": "object",
      "properties": {
        "box": {
          "type": "object",
          "properties": {
            "topLeft": {
              "$ref": "#/definitions/SpatialCoordinates"
            },
            "bottomRight": {
              "$ref": "#/definitions/SpatialCoordinates"
            }
          }
        }
      }
    },
    "TimeRange": {
      "type": "object",
      "description": "A time range specified by before and after in epoch time. Both before and after are inclusive to the specified value.",
      "properties": {
        "before": {
          "type": "integer"
        },
        "after": {
          "type": "integer"
        },
        "absent": {
          "type": "boolean"
        }
      }
    },
    "MonitoredObjectFilteredCountResponse": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/MonitoredObjectFilteredCount"
        }
      }
    },
    "MonitoredObjectFilteredCount": {
      "type": "object",
      "required": [
        "type",
        "attributes"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "filteredMonitoredObjectCount"
          ],
          "default": "filteredMonitoredObjectCount"
        },
        "attributes": {
          "type": "object",
          "properties": {
            "totalCount": {
              "type": "integer"
            },
            "groupedCounts": {
              "type": "object",
              "additionalProperties": {
                "type": "integer"
              }
            }
          }
        }
      }
    },
    "MonitoredObjectFilteredListResponse": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/MonitoredObjectFilteredList"
        }
      }
    },
    "MonitoredObjectFilteredList": {
      "type": "object",
      "required": [
        "type",
        "attributes"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "filteredResourceIdentifierList"
          ],
          "default": "filteredResourceIdentifierList"
        },
        "attributes": {
          "type": "object",
          "properties": {
            "resourceIdentifiers": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "MonitoredObjectMetadataDetailsListResponse": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/MonitoredObjectMetadataDetailsList"
        }
      }
    },
    "MonitoredObjectMetadataDetailsList": {
      "type": "object",
      "required": [
        "type",
        "attributes"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "monitoredObjectMetadataDetails"
          ],
          "default": "monitoredObjectMetadataDetails"
        },
        "attributes": {
          "type": "object",
          "required": [
            "datatype",
            "tenantId",
            "countPerValueMap"
          ],
          "properties": {
            "datatype": {
              "type": "string",
              "description": "Name used to identify this type of record in Datahub"
            },
            "tenantId": {
              "type": "string",
              "description": "Unique identifier of the Tenant in Datahub"
            },
            "countPerValueMap": {
              "description": "Contains a map of metadata category names to the values and their corresponding count of Monitored Objects that use the Metadata value",
              "type": "object",
              "additionalProperties": {
                "description": "Contains a map of metadata values and their corresponding count of Monitored Objects that use the Metadata value",
                "type": "object",
                "additionalProperties": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Time since epoch at which this object was last altered."
                }
              }
            }
          }
        }
      }
    },
    "MonitoredObjectGeoClusterResponse": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/MonitoredObjectGeoClusters"
        }
      }
    },
    "MonitoredObjectGeoClusters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "monitoredObjectGeoClusters"
          ],
          "default": "monitoredObjectGeoClusters"
        },
        "attributes": {
          "type": "object",
          "properties": {
            "datatype": {
              "type": "string",
              "description": "Name used to identify this type of record in Datahub"
            },
            "clusters": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "geohash": {
                    "type": "string"
                  },
                  "count": {
                    "type": "integer"
                  },
                  "centroid": {
                    "type": "object",
                    "properties": {
                      "lat": {
                        "type": "number",
                        "format": "float",
                        "description": "Geographic latitude of the calculated center of the Monitored Objects in the geofence bounds"
                      },
                      "lon": {
                        "type": "number",
                        "format": "float",
                        "description": "Geographic longitude of the calculated center of the Monitored Objects in the geofence bounds"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "MonitoredObjectPatch": {
      "type": "object",
      "required": [
        "type",
        "id",
        "attributes"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "monitoredObjects"
          ]
        },
        "id": {
          "type": "string"
        },
        "attributes": {
          "type": "object",
          "required": [
            "objectId"
          ],
          "properties": {
            "actuatorName": {
              "type": "string",
              "default": "unknown",
              "description": "Name of the origin of the Monitored Object"
            },
            "actuatorType": {
              "type": "string",
              "description": "Type of the origin of the Monitored Object",
              "enum": [
                "unknown",
                "accedian-nid",
                "accedian-vnid"
              ]
            },
            "reflectorName": {
              "type": "string",
              "default": "unknown",
              "description": "Name of the target of the Monitored Object"
            },
            "reflectorType": {
              "type": "string",
              "description": "Type of the target of the Monitored Object",
              "enum": [
                "unknown",
                "accedian-nid",
                "accedian-vnid"
              ]
            },
            "objectType": {
              "type": "string",
              "description": "Type of the Monitored Object. For instance, possible values are [unknown, flowmeter, twamp-pe, twamp-sf, twamp-sl, cisco-interface, cisco-node-summary, pvx, paa, \nregulator, rfc8321, dmm, slm, eth-dm, eth-vs, port, sa, sa-metrics, pl, iperf, echo-icmp, echo-udp]. If using dynamic types (i.e, for SNMP), you must enter the name of the dynamic type here\n"
            },
            "meta": {
              "type": "object",
              "description": "Attributes added to a Monitored Object that help identify the Monitored Object as well as provide flitering/grouping properties",
              "additionalProperties": {
                "type": "string"
              },
              "example": {
                "region": "paris",
                "wgs87_x": "-45.7123912",
                "wgs87_y": "-74.2130912"
              }
            },
            "sourceLocation": {
              "$ref": "#/definitions/MonitoredObjectLocation"
            },
            "destinationLocation": {
              "$ref": "#/definitions/MonitoredObjectLocation"
            },
            "topology": {
              "description": "Tags used to describe the path segments associated with the Monitored Object",
              "x-omitempty": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "MonitoredObjectUpdate": {
      "type": "object",
      "required": [
        "type",
        "id",
        "attributes"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "monitoredObjects"
          ]
        },
        "id": {
          "type": "string"
        },
        "attributes": {
          "type": "object",
          "required": [
            "_rev",
            "objectId",
            "actuatorName",
            "actuatorType",
            "reflectorName",
            "reflectorType",
            "objectName",
            "objectType",
            "createdTimestamp",
            "topology",
            "lastReportedTimestamp"
          ],
          "properties": {
            "_rev": {
              "type": "string",
              "description": "Value used to ensure updates to this object are handled in order."
            },
            "objectId": {
              "type": "string",
              "description": "Unique identifier of the Monitored Object in Datahub"
            },
            "actuatorName": {
              "type": "string",
              "default": "unknown",
              "description": "Name of the origin of the Monitored Object"
            },
            "actuatorType": {
              "type": "string",
              "description": "Type of the origin of the Monitored Object",
              "enum": [
                "unknown",
                "accedian-nid",
                "accedian-vnid"
              ]
            },
            "reflectorName": {
              "type": "string",
              "default": "unknown",
              "description": "Name of the target of the Monitored Object"
            },
            "reflectorType": {
              "type": "string",
              "description": "Type of the target of the Monitored Object",
              "enum": [
                "unknown",
                "accedian-nid",
                "accedian-vnid"
              ]
            },
            "objectName": {
              "type": "string",
              "description": "Name of the Monitored Object"
            },
            "objectType": {
              "type": "string",
              "description": "Type of the Monitored Object. For instance, possible values are [unknown, flowmeter, twamp-pe, twamp-sf, twamp-sl, cisco-interface, cisco-node-summary, pvx, paa, \nregulator, rfc8321, dmm, slm, eth-dm, eth-vs, port, sa, sa-metrics, pl, iperf, echo-icmp, echo-udp]. If using dynamic types (i.e, for SNMP), you must enter the name of the dynamic type here\n"
            },
            "createdTimestamp": {
              "type": "integer",
              "description": "Time since epoch at which this object was instantiated."
            },
            "meta": {
              "type": "object",
              "description": "Attributes added to a Monitored Object that help identify the Monitored Object as well as provide flitering/grouping properties",
              "additionalProperties": {
                "type": "string"
              },
              "example": {
                "region": "paris",
                "wgs87_x": "-45.7123912",
                "wgs87_y": "-74.2130912"
              }
            },
            "sourceLocation": {
              "$ref": "#/definitions/MonitoredObjectLocation"
            },
            "destinationLocation": {
              "$ref": "#/definitions/MonitoredObjectLocation"
            },
            "topology": {
              "description": "Tags used to describe the path segments associated with the Monitored Object",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "archiveTimestamp": {
              "type": "integer",
              "format": "int64",
              "description": "Time since epoch at which this object was archived.",
              "default": 0
            },
            "lastReportedTimestamp": {
              "type": "integer",
              "format": "int64",
              "description": "Time since epoch at which this object last processed metrics.",
              "default": 0
            }
          }
        }
      }
    },
    "MonitoredObjectSummaryListResponse": {
      "type": "object",
      "description": "Monitoerd Object Summary response including one or more values",
      "required": [
        "data"
      ],
      "properties": {
        "links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonitoredObjectSummary"
          }
        }
      }
    },
    "MonitoredObjectSummaryResponse": {
      "type": "object",
      "description": "A single object Monitored Object Summary response from Datahub",
      "required": [
        "data"
      ],
      "properties": {
        "links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "data": {
          "$ref": "#/definitions/MonitoredObjectSummary"
        }
      }
    },
    "MonitoredObjectSummary": {
      "description": "Provides a trimmed down and modified version of a monitored object. Used for providing provisioning details to Datahub processing applications",
      "type": "object",
      "required": [
        "type",
        "id",
        "attributes"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "monitoredObjectSummaries"
          ]
        },
        "id": {
          "type": "string"
        },
        "attributes": {
          "type": "object",
          "required": [
            "_rev",
            "attributes"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "Unique identifier of the Tenant in Datahub"
            },
            "objectId": {
              "type": "string",
              "description": "Unique identifier of the Monitored Object in Datahub"
            },
            "objectName": {
              "type": "string",
              "description": "Common name of the Monitored Object"
            },
            "meta": {
              "type": "object",
              "description": "The map of the metrics column and value that should be entered into that column",
              "additionalProperties": {
                "type": "string"
              }
            },
            "srcLat": {
              "type": "number",
              "format": "float",
              "description": "Geographic latitude of Monitored Object source"
            },
            "srcLon": {
              "type": "number",
              "format": "float",
              "description": "Geographic longitude of Monitored Object source"
            },
            "dstLat": {
              "type": "number",
              "format": "float",
              "description": "Geographic latitude of Monitored Object destination"
            },
            "dstLon": {
              "type": "number",
              "format": "float",
              "description": "Geographic longitude of Monitored Object destination"
            },
            "topology": {
              "description": "Tags used to describe the path segments associated with the Monitored Object",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "MonitoredObjectMetadataCategoryMappingListResponse": {
      "type": "object",
      "description": "Monitoerd Object Metadata Category Mapping response including one or more values",
      "required": [
        "data"
      ],
      "properties": {
        "links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetadataCategoryMapping"
          }
        }
      }
    },
    "MonitoredObjectMetadataCategoryMappingResponse": {
      "type": "object",
      "description": "A single object Monitored Object Metadata Category Mapping response from Datahub",
      "required": [
        "data"
      ],
      "properties": {
        "links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "data": {
          "$ref": "#/definitions/MetadataCategoryMapping"
        }
      }
    },
    "MetadataCategoryMapping": {
      "description": "Provides a mapping of Metadata Category name mappings to the Customer facing aliases",
      "type": "object",
      "required": [
        "type",
        "id",
        "attributes"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "metadataCategoryMapping"
          ]
        },
        "id": {
          "type": "string"
        },
        "attributes": {
          "type": "object",
          "required": [
            "_rev",
            "datatype",
            "tenantId",
            "mappingType",
            "metadataCategoryMap",
            "createdTimestamp",
            "lastModifiedTimestamp"
          ],
          "properties": {
            "_rev": {
              "type": "string",
              "description": "Value used to ensure updates to this object are handled in order."
            },
            "datatype": {
              "type": "string",
              "description": "Name used to identify this type of record in Datahub"
            },
            "tenantId": {
              "type": "string",
              "description": "Unique identifier of the Tenant in Datahub"
            },
            "mappingType": {
              "type": "string",
              "description": "Type of the origin of the Monitored Object",
              "enum": [
                "unknown",
                "activeMetrics"
              ]
            },
            "metadataCategoryMap": {
              "type": "object",
              "description": "Name of the target of the Monitored Object",
              "additionalProperties": {
                "$ref": "#/definitions/MetadataAlias"
              }
            },
            "createdTimestamp": {
              "type": "integer",
              "format": "int64",
              "description": "Time since epoch at which this object was instantiated."
            },
            "lastModifiedTimestamp": {
              "type": "integer",
              "format": "int64",
              "description": "Time since epoch at which this object was last altered."
            }
          }
        }
      }
    },
    "MetadataAlias": {
      "type": "object",
      "description": "Properties of an alias used for Monitored Object Metadata storade in Datahub",
      "required": [
        "name",
        "isActive",
        "activeRangeMap"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The customer provided alias name for the Metadata Category"
        },
        "isActive": {
          "type": "boolean",
          "description": "Boolean flag indicating if this Metadata Category Alias is currently being used (true) or if it is no longer an active Metadata Category (false)"
        },
        "activeRangeMap": {
          "type": "object",
          "description": "A mapping of start timestamp to end timestamp ranges when this particular Metadata Mapping Alias was active.",
          "additionalProperties": {
            "type": "integer",
            "format": "int64",
            "description": "The end timestamp of an active range for a Metadata Mapping Alias. A value of -1 means this mapping is currently in use and has not ended yet."
          }
        }
      }
    },
    "MetadataCategoryMappingUpdateRequest": {
      "type": "object",
      "required": [
        "data"
      ],
      "description": "Object used to update a Metadata Category Mapping for a Tenant in Datahub",
      "properties": {
        "data": {
          "type": "object",
          "required": [
            "type",
            "attributes"
          ],
          "properties": {
            "id": {
              "type": "string"
            },
            "type": {
              "type": "string",
              "enum": [
                "metadataCategoryMappings"
              ]
            },
            "attributes": {
              "type": "object",
              "properties": {
                "add": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "List of Metadata Category Names to be added to the Metadata Category Mapping"
                },
                "archive": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "List of Metadata Category Names that should no longer be tracked against the Monitored Objects"
                },
                "rename": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/MetadataRenameData"
                  },
                  "description": "List of Metadata Category Names to be renamed in the Metadata Category Mapping"
                }
              }
            }
          }
        }
      }
    },
    "MetadataRenameData": {
      "type": "object",
      "required": [
        "existingName",
        "newName"
      ],
      "description": "Object providing Metadata Category Mapping alias name change information",
      "properties": {
        "existingName": {
          "type": "string",
          "description": "The current alias name of a Metadata Category Mapping to be changed"
        },
        "newName": {
          "type": "string",
          "description": "The desired alias name of a Metadata Category Mapping to be changed"
        }
      }
    },
    "MonitoredObjectLocation": {
      "type": "object",
      "description": "Defines the geographical location of the Monitored Object",
      "required": [
        "lat",
        "lon"
      ],
      "properties": {
        "lat": {
          "type": "number",
          "format": "float",
          "description": "Geographic latitude"
        },
        "lon": {
          "type": "number",
          "format": "float",
          "description": "Geographic longitude"
        }
      }
    },
    "JsonApiAlertGroupByRequest": {
      "description": "JSON API compliant wrapper for the groupby query",
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "required": [
            "type",
            "attributes"
          ],
          "properties": {
            "id": {
              "type": "string"
            },
            "type": {
              "type": "string",
              "enum": [
                "groupByAlerts"
              ]
            },
            "attributes": {
              "$ref": "#/definitions/AlertGroupByConfig"
            }
          }
        }
      }
    },
    "JsonApiAlertGroupByResponse": {
      "description": "JSON API compliant wrapper for the groupby response",
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "id": {
              "type": "string"
            },
            "type": {
              "type": "string",
              "enum": [
                "groupByAlerts"
              ]
            },
            "attributes": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/AlertGroupByConfig"
                },
                {
                  "type": "object",
                  "required": [
                    "result"
                  ],
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/AlertGroupByReport"
                    }
                  }
                }
              ]
            }
          }
        }
      }
    },
    "AlertQueryContext": {
      "description": "Hints indicating how the query may be Returns",
      "type": "object",
      "properties": {
        "groupNull": {
          "description": "When doing a group by, there are columns with no value associated with the metadata key supplied. By default, we ignore these rows but in certain use-cases, it is advantageous to group all the records not in the set as a new value.",
          "type": "boolean",
          "default": false
        },
        "ignoreCleaning": {
          "description": "A value of true will have the aggregation request execute on all data regardless of whether it has been cleaned or not",
          "type": "boolean"
        },
        "timeout": {
          "description": "Query timeout in milliseconds",
          "type": "integer",
          "example": 30000
        },
        "sortOnGroupingKey": {
          "description": "Allows a client to sort on a grouping key instead of the metric's value",
          "default": "metric",
          "type": "string",
          "example": "startTimestamp"
        },
        "sorted": {
          "type": "string",
          "description": "Indicates whether the response should return grouped by queries in ascending or descending order. Only applicable to grouped queries.",
          "enum": [
            "asc",
            "desc"
          ],
          "example": [
            "asc",
            "desc"
          ]
        },
        "numResults": {
          "description": "Number of results to return in grouped queries. A non-positive integer for this value implies there is no result limit. Only applicable to grouped queries.",
          "type": "integer",
          "format": "int32",
          "example": 10
        }
      }
    },
    "AlertGroupByConfig": {
      "description": "The necessary request parameters for the metric api call",
      "type": "object",
      "required": [
        "interval",
        "aggregation",
        "groupingContext",
        "metrics"
      ],
      "properties": {
        "queryContext": {
          "$ref": "#/definitions/AlertQueryContext"
        },
        "metaContext": {
          "$ref": "#/definitions/MetaContext"
        },
        "groupingContext": {
          "$ref": "#/definitions/GroupingContext"
        },
        "interval": {
          "description": "Time boundary for the metrics under consideration using the ISO-8601 standard",
          "type": "string",
          "example": "2018-04-08T14:00:00/2018-04-09T15:00:00"
        },
        "aggregation": {
          "$ref": "#/definitions/SupportedAggregations"
        },
        "metrics": {
          "type": "array",
          "description": "A set of identifiers that considers specific metrics based on the provided information",
          "items": {
            "$ref": "#/definitions/AlertSpec"
          }
        }
      }
    },
    "AlertGroupByReport": {
      "description": "The rendered response structure from the metric query",
      "type": "array",
      "items": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/definitions/AlertGroupedResultEntryParameters"
          }
        ]
      }
    },
    "AlertGroupedResultEntryParameters": {
      "description": "Describes filtering criteria used for a particular query that uses a grouping",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AlertSpec"
        },
        {
          "type": "object",
          "required": [
            "groupedResults"
          ],
          "properties": {
            "groupedResults": {
              "type": "array",
              "items": {
                "type": "object",
                "required": [
                  "value"
                ],
                "properties": {
                  "groupings": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "value": {
                    "type": "number",
                    "format": "float"
                  }
                }
              }
            }
          }
        }
      ]
    },
    "JsonApiAlertAggregateRequest": {
      "description": "JSON API compliant wrapper for the aggregate query",
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "required": [
            "type",
            "attributes"
          ],
          "properties": {
            "id": {
              "type": "string"
            },
            "type": {
              "type": "string",
              "enum": [
                "aggregateAlerts"
              ]
            },
            "attributes": {
              "$ref": "#/definitions/V2AlertAggregateConfig"
            }
          }
        }
      }
    },
    "JsonApiAlertAggregateResponse": {
      "description": "JSON API compliant wrapper for the aggregate response",
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "id": {
              "type": "string"
            },
            "type": {
              "type": "string",
              "enum": [
                "aggregateAlerts"
              ]
            },
            "attributes": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/V2AlertAggregateConfig"
                },
                {
                  "type": "object",
                  "required": [
                    "result"
                  ],
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/V2AlertAggregateReport"
                    }
                  }
                }
              ]
            }
          }
        }
      }
    },
    "V2AlertAggregateConfig": {
      "description": "The necessary request parameters for the metric api call",
      "type": "object",
      "required": [
        "interval",
        "granularity",
        "aggregation",
        "metrics"
      ],
      "properties": {
        "queryContext": {
          "$ref": "#/definitions/QueryContext"
        },
        "metaContext": {
          "$ref": "#/definitions/MetaContext"
        },
        "interval": {
          "description": "Time boundary for the metrics under consideration using the ISO-8601 standard",
          "type": "string",
          "example": "2018-04-08T14:00:00/2018-04-09T15:00:00"
        },
        "granularity": {
          "description": "the granularity for timeseries in ISO-8601 duration format, or ALL",
          "type": "string",
          "example": "PT1H"
        },
        "aggregation": {
          "$ref": "#/definitions/SupportedAggregations"
        },
        "metrics": {
          "type": "array",
          "description": "A set of identifiers that considers specific metrics based on the provided information",
          "items": {
            "$ref": "#/definitions/AlertSpec"
          }
        }
      }
    },
    "V2AlertAggregateReport": {
      "description": "The rendered response structure from the metric query",
      "type": "array",
      "x-omitempty": true,
      "items": {
        "$ref": "#/definitions/alertTimeseriesResult"
      }
    },
    "CaptureSpec": {
      "type": "object",
      "additionalProperties": {
        "type": "array",
        "x-omitempty": true,
        "items": {
          "type": "string"
        }
      }
    },
    "AlertSpec": {
      "description": "Filter object that identifies a specific metric within a monitored object by its key attributes",
      "type": "object",
      "properties": {
        "policyId": {
          "description": "Policy ID to filter on",
          "type": "array",
          "x-omitempty": true,
          "items": {
            "type": "string"
          }
        },
        "policyType": {
          "description": "Hint to the query engine to limit the metric to certain types of entity.",
          "type": "array",
          "x-omitempty": true,
          "example": [
            "session",
            "anomaly"
          ],
          "items": {
            "enum": [
              "capture",
              "micro-tca",
              "anomaly"
            ],
            "type": "string"
          }
        },
        "alertState": {
          "description": "Set of one or more alert state to be used by the filter",
          "type": "array",
          "x-omitempty": true,
          "example": [
            "raised",
            "cleared"
          ],
          "items": {
            "type": "string"
          }
        },
        "metric": {
          "description": "Name that identifies the specific metric within a monitored object",
          "type": "array",
          "x-omitempty": true,
          "example": [
            "delayp95",
            "hit.rtt.per_sec"
          ],
          "items": {
            "type": "string"
          }
        },
        "captureSpec": {
          "$ref": "#/definitions/CaptureSpec"
        },
        "objectType": {
          "description": "Object types to be considered as part of the filter",
          "type": "array",
          "x-omitempty": true,
          "example": [
            "twamp-sl",
            "flowmeter"
          ],
          "items": {
            "type": "string"
          }
        },
        "direction": {
          "description": "Set of one or more directions to be used by the filter to identify required metric records",
          "type": "array",
          "x-omitempty": true,
          "example": [
            "0",
            "1"
          ],
          "items": {
            "type": "string"
          }
        },
        "geoSpatial": {
          "$ref": "#/definitions/SpatialFilter"
        },
        "sourceLocation": {
          "$ref": "#/definitions/SpatialFilter"
        },
        "destinationLocation": {
          "$ref": "#/definitions/SpatialFilter"
        },
        "topology": {
          "description": "Name of a node on the route of the Monitored Object",
          "type": "string"
        },
        "valueBoundary": {
          "$ref": "#/definitions/MetricBucket"
        },
        "objectId": {
          "description": "Set of object IDs to filter on",
          "type": "array",
          "x-omitempty": true,
          "example": [
            "333732dc-99d4-4224-915e-3972b50d10ef",
            "931e7d13-6320-4ad7-ae06-7ff2df4f782a"
          ],
          "items": {
            "type": "string"
          }
        }
      }
    },
    "alertHistory": {
      "type": "object",
      "required": [
        "type",
        "id",
        "data"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "alertHistories"
          ],
          "default": "alertHistories"
        },
        "id": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "relationships": {
                "type": "object",
                "properties": {
                  "policyId": {
                    "$ref": "#/definitions/JsonApiSingleRelationship"
                  },
                  "objectId": {
                    "$ref": "#/definitions/JsonApiSingleRelationship"
                  }
                }
              },
              "attributes": {
                "$ref": "#/definitions/AlertPayload"
              }
            }
          }
        }
      }
    },
    "alertPolicyCreateRequest": {
      "type": "object",
      "description": "JSON API wrapper for creating Alert Policy",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/alertPolicy"
        }
      }
    },
    "alertPoliciesResponse": {
      "type": "object",
      "description": "JSON API Response for Alert Policies",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/alertPolicy"
          }
        }
      }
    },
    "alertPolicyResponse": {
      "type": "object",
      "description": "JSON API Response for Alert Policy",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/alertPolicy"
        }
      }
    },
    "alertPoliciesStatistics": {
      "required": [
        "id",
        "type",
        "attributes"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "The timestamp when this status was queried at"
        },
        "type": {
          "type": "string",
          "enum": [
            "status"
          ],
          "default": "status"
        },
        "attributes": {
          "required": [
            "activeAlerts",
            "totalObjects"
          ],
          "properties": {
            "activeAlerts": {
              "type": "number",
              "format": "int",
              "description": "Number of alerts that have crossed thresholds"
            },
            "totalObjects": {
              "type": "number",
              "format": "int",
              "description": "Total number of objects in this policy's object set"
            }
          }
        }
      }
    },
    "alertTimeseriesResult": {
      "description": "Describes series data prefixed with the filter criteria that were used to generate the output",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AlertSpec"
        },
        {
          "type": "object",
          "required": [
            "series"
          ],
          "properties": {
            "series": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MetricTimeseriesResultEntry"
              }
            }
          }
        }
      ]
    },
    "alertPolicy": {
      "type": "object",
      "required": [
        "type",
        "attributes"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "alertPolicies"
          ],
          "default": "alertPolicies"
        },
        "id": {
          "type": "string"
        },
        "relationships": {
          "type": "object",
          "properties": {
            "createdBy": {
              "$ref": "#/definitions/JsonApiSingleRelationship"
            },
            "modifiedBy": {
              "$ref": "#/definitions/JsonApiSingleRelationship"
            },
            "tenantId": {
              "$ref": "#/definitions/JsonApiSingleRelationship"
            },
            "tenantName": {
              "$ref": "#/definitions/JsonApiSingleRelationship"
            }
          }
        },
        "included": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/alertPoliciesStatistics"
          }
        },
        "attributes": {
          "type": "object",
          "description": "Every alert policy requires a trigger condition. Recovery is optional as some alarms may need to be stopped\nby an operator.\nTrigger condition  - This is the policies that causes an alarm to start\nRecovery condition - This is the policies that automatically causes an alarm to stop\n",
          "required": [
            "conditions",
            "name",
            "description",
            "configuration"
          ],
          "properties": {
            "enabled": {
              "type": "boolean",
              "default": true,
              "description": "Controls whether this policy should be enabled"
            },
            "deleted": {
              "type": "boolean",
              "default": false,
              "description": "This flag is to tell us whether the alert has been deleted and cannot be modified. The reasoning we don't do a real delete is because existing alerts in the database still need to correspond to something."
            },
            "_rev": {
              "type": "string",
              "description": "Policy revision. Not necessarily sequential"
            },
            "lastModifiedTimestamp": {
              "type": "number",
              "format": "int64",
              "description": "Last modification timestamp in POSIX epoch generated by server"
            },
            "createdTimestamp": {
              "type": "number",
              "format": "int64",
              "description": "Creation timestamp in POSIX epoch generated by server"
            },
            "useCleanData": {
              "type": "boolean",
              "default": true,
              "description": "By default alerts will ignore records that are marked dirty. This can be overriden (switch this to false) in the scenarios that alert should check invalid records."
            },
            "conditions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/alertConditionGroup"
              }
            },
            "configuration": {
              "$ref": "#/definitions/alertsConfiguration"
            },
            "name": {
              "type": "string",
              "description": "The name of the alert so it can be easily differentiated.",
              "maxLength": 64
            },
            "description": {
              "type": "string",
              "description": "Brief description of what the Alert Policy will do",
              "maxLength": 200
            },
            "tags": {
              "description": "Miscellaneous data the user wants to tag this alert with",
              "type": "string",
              "maxLength": 255,
              "example": "orderId:uuid123"
            }
          }
        }
      }
    },
    "alertsConfiguration": {
      "type": "object",
      "required": [
        "policyType"
      ],
      "properties": {
        "policyType": {
          "type": "string",
          "enum": [
            "micro-tca",
            "anomaly",
            "capture"
          ],
          "description": "micro-tca - Alerts per monitored object.\nanomaly   - Alerts detected by the Anomaly detector.\n",
          "default": "micro-tca"
        },
        "aggregationGranularity": {
          "description": "Capture aggregation's granularity. The alert condition's duration must be same or larger than this value."
        },
        "context": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/genericFilterMapItem"
          }
        }
      }
    },
    "alertConditionGroup": {
      "type": "object",
      "required": [
        "triggersOn"
      ],
      "description": "\"The conditions for an alert (violation or recovery). eg: metric > threshold\"\n\"Note that metric will in the future support composite metrics.\"\n",
      "properties": {
        "triggersOn": {
          "$ref": "#/definitions/alertCondition"
        },
        "recoversOn": {
          "$ref": "#/definitions/alertCondition"
        }
      }
    },
    "alertCondition": {
      "type": "object",
      "properties": {
        "duration": {
          "type": "string",
          "default": "PT5M"
        },
        "metric": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "session",
                "capture"
              ],
              "default": "session"
            },
            "layer": {
              "type": "string",
              "description": "Capture field name",
              "example": "http"
            },
            "vendor": {
              "description": "Vendor name associated with the monitored object",
              "type": "string",
              "example": "accedian-twamp"
            },
            "objectType": {
              "description": "Object types to be considered as part of the filter",
              "type": "array",
              "example": [
                "twamp-sl",
                "twamp-sf"
              ],
              "items": {
                "type": "string"
              }
            },
            "id": {
              "description": "The metric's identifier",
              "type": "string",
              "example": "delayP95"
            },
            "direction": {
              "description": "Set of one or more directions to be used by the filter to identify required metric records",
              "type": "array",
              "example": [
                "0"
              ],
              "items": {
                "type": "string"
              }
            }
          }
        },
        "ratioPercent": {
          "type": "number"
        },
        "value": {
          "type": "string"
        },
        "values": {
          "type": "array",
          "x-omitempty": true,
          "items": {
            "type": "string"
          }
        },
        "comparator": {
          "type": "string",
          "enum": [
            "gt",
            "lt",
            "eq",
            "gte",
            "lte",
            "in"
          ],
          "default": "eq",
          "description": "Operand to use when evaluating the condition.\ngt  = greaterThan\nlt  = lessThan\neq  = equal\n"
        }
      }
    },
    "AlertPayload": {
      "type": "object",
      "required": [
        "tenantName",
        "tenantId",
        "timestamp",
        "processedTimestamp",
        "startTimestamp",
        "policyId",
        "source",
        "direction",
        "alertState",
        "policyType"
      ],
      "properties": {
        "uid": {
          "type": "string",
          "description": "Unique Identifier"
        },
        "tenantName": {
          "type": "string",
          "description": "The tenant Name"
        },
        "tenantId": {
          "type": "string",
          "description": "The tenant ID"
        },
        "processedTimestamp": {
          "type": "integer",
          "format": "int64",
          "description": "When the record was processed by the stream processor. Note that this is not the record's timestamp."
        },
        "timestamp": {
          "type": "integer",
          "format": "int64",
          "description": "The timestamp of the last record that causes the alert to trigger."
        },
        "startTimestamp": {
          "type": "integer",
          "format": "int64",
          "description": "For a raised alert, this will match the timestamp value. For a cleared alert, this value will signify the timestamp of the last record that causes the alert to clear."
        },
        "policyId": {
          "type": "string",
          "format": "uuid",
          "description": "Message is associated with an existing policy"
        },
        "objectId": {
          "type": "string",
          "description": "Object ID that is in violation if the policy is configured for micro-TCA"
        },
        "objectName": {
          "type": "string",
          "description": "Object Name that is in violation if the policy is configured for micro-TCA"
        },
        "source": {
          "type": "string",
          "description": "Originator of the message, eg: the stream processors"
        },
        "uri": {
          "type": "string",
          "format": "uri",
          "description": "The alert may provide a link to the alert's dashboard for investigation"
        },
        "annotation": {
          "type": "string",
          "maxLength": 255
        },
        "metric": {
          "type": "string",
          "description": "The metric that this alert sampled"
        },
        "direction": {
          "type": "string",
          "description": "The direction of the metric that caused the alert"
        },
        "tags": {
          "description": "Miscellenous data the user wants to tag this alert with",
          "type": "string",
          "maxLength": 255
        },
        "policyType": {
          "type": "string",
          "enum": [
            "micro-tca",
            "anomaly",
            "capture",
            "capture-automatic"
          ]
        },
        "objectType": {
          "type": "string",
          "description": "The type of object this alert is for"
        },
        "duration": {
          "type": "number",
          "description": "The minimum amount of time beyond the threshold"
        },
        "timeInViolation": {
          "type": "number",
          "description": "The total amount of time spent in violation"
        },
        "alertState": {
          "type": "string",
          "enum": [
            "raised",
            "cleared",
            "error",
            "forced-clear"
          ],
          "description": "Message type\nforced-clear -\nraised - Policy is declaring violation conditions are met\ncleared - Policy is declaring recovery conditions are met\nerror - Analytics engine encountered an error at timestamp\n"
        },
        "srcLat": {
          "type": "number",
          "format": "float",
          "description": "Geographic latitude of Monitored Object source"
        },
        "srcLon": {
          "type": "number",
          "format": "float",
          "description": "Geographic longitude of Monitored Object source"
        },
        "dstLat": {
          "type": "number",
          "format": "float",
          "description": "Geographic latitude of Monitored Object destination"
        },
        "dstLon": {
          "type": "number",
          "format": "float",
          "description": "Geographic longitude of Monitored Object destination"
        },
        "topology": {
          "description": "Tags used to describe the path segments associated with the Monitored Object",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "metadata": {
          "type": "object",
          "example": {
            "meta21": "First value",
            "meta31": "Second value"
          },
          "description": "Metadata Attributes of an monitored object",
          "pattern": "^[a-z_]+$",
          "additionalProperties": {
            "type": "string"
          }
        },
        "value": {
          "description": "This can either be the threshold value or a distance measure for dynamic thresholds",
          "type": "string"
        },
        "comparator": {
          "type": "string",
          "enum": [
            "gt",
            "lt",
            "eq",
            "gte",
            "lte"
          ],
          "default": "gt",
          "description": "Operand to use when evaluating the condition.\ngt  = greaterThan\nlt  = lessThan\neq  = equal\n"
        },
        "sessionId": {
          "type": "string"
        },
        "bcn": {
          "type": "string"
        },
        "bca": {
          "type": "string"
        },
        "ip": {
          "type": "string"
        },
        "captureLayer": {
          "type": "string"
        },
        "captureZone": {
          "type": "string"
        },
        "captureApplicationId": {
          "type": "string"
        },
        "captureZoneId": {
          "type": "string"
        },
        "captureMetaThresholds": {
          "type": "number"
        },
        "captureMetaValues": {
          "type": "string"
        },
        "captureMetaIps": {
          "type": "string"
        },
        "captureMetaDesc": {
          "type": "string"
        },
        "captureMetaDate_stop": {
          "type": "number"
        },
        "captureMetaDate_start": {
          "type": "number"
        },
        "captureMetaIp_client": {
          "type": "string"
        },
        "captureMetaIp_count": {
          "type": "number"
        },
        "captureMetaStart": {
          "type": "number"
        },
        "captureMetaStop": {
          "type": "number"
        },
        "captureMetaName": {
          "type": "string"
        },
        "captureMetaAlert_id": {
          "type": "string"
        },
        "captureMetaNow": {
          "type": "number"
        },
        "captureMetaFirst_sent": {
          "type": "number"
        },
        "captureMetaLast_sent": {
          "type": "number"
        },
        "captureMetaSite": {
          "type": "string"
        },
        "captureMetaWorker": {
          "type": "string"
        },
        "captureMetaFiring": {
          "type": "string"
        },
        "captureMetaCertainty": {
          "type": "number"
        },
        "captureMetaHostname": {
          "type": "string"
        },
        "captureMetaCertainty_percent": {
          "type": "number"
        }
      }
    },
    "AutomaticAlertPolicyCreateRequest": {
      "type": "object",
      "description": "JSON API wrapper for creating Alert Policy",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "rev": {
              "type": "string"
            },
            "configuration": {
              "$ref": "#/definitions/AutomaticAlertConfiguration"
            }
          }
        }
      }
    },
    "AutomaticAlertPolicyResponse": {
      "type": "object",
      "description": "JSON API Response for Alert Policy",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "rev": {
              "type": "string"
            },
            "configuration": {
              "$ref": "#/definitions/AutomaticAlertConfiguration"
            }
          }
        }
      }
    },
    "AutomaticAlertConfiguration": {
      "type": "object",
      "description": "We have built in rules that are already running and the user will be able to tune those rules here.",
      "properties": {
        "enabled": {
          "type": "boolean",
          "default": true
        },
        "capture": {
          "type": "object",
          "properties": {
            "scanDetection": {
              "type": "object",
              "properties": {
                "enabled": {
                  "type": "boolean",
                  "default": false
                },
                "false_pos_rate": {
                  "type": "number"
                },
                "remember_duration": {
                  "type": "string"
                },
                "time_step": {
                  "type": "string"
                },
                "max_ports": {
                  "type": "number"
                },
                "max_hosts": {
                  "type": "number"
                },
                "max_num_packets": {
                  "type": "number"
                },
                "top_size": {
                  "type": "number"
                },
                "top_max_size": {
                  "type": "number"
                },
                "alert_memory": {
                  "type": "string"
                },
                "whilelist": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "ddosDetection": {
              "type": "object",
              "properties": {
                "enabled": {
                  "type": "boolean",
                  "default": false
                },
                "false_pos_rate": {
                  "type": "number"
                },
                "remember_duration": {
                  "type": "string"
                },
                "avg_win": {
                  "type": "string"
                },
                "whitelist": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "synFloodDetection": {
              "type": "object",
              "properties": {
                "enabled": {
                  "type": "boolean",
                  "default": false
                },
                "time_step": {
                  "type": "string"
                },
                "max_syns_per_sec": {
                  "type": "number"
                },
                "top_size": {
                  "type": "number"
                },
                "top_max_size": {
                  "type": "number"
                },
                "alert_memory": {
                  "type": "string"
                },
                "whitelist": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "perApplication": {
              "type": "object",
              "properties": {
                "enabled": {
                  "type": "boolean",
                  "default": false
                },
                "fitting_points": {
                  "type": "number"
                },
                "smooth_coefficient": {
                  "type": "number"
                }
              }
            }
          }
        },
        "sessionAnomaly": {
          "description": "Place holder for anomoly detection",
          "type": "object",
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "AlertSummary": {
      "type": "object",
      "description": "Alerts summaries are checkpoints to aid in the tracking of sets of active objects per policy every hour",
      "required": [
        "tenantId",
        "policyId",
        "timestamp",
        "alertState",
        "policyType"
      ],
      "properties": {
        "metric": {
          "type": "string",
          "description": "The metric that this alert sampled"
        },
        "direction": {
          "type": "string"
        },
        "tenantId": {
          "type": "string"
        },
        "policyId": {
          "type": "string"
        },
        "itemsInViolationCount": {
          "type": "number"
        },
        "startTimestamp": {
          "type": "number",
          "format": "int64"
        },
        "timestamp": {
          "type": "number",
          "format": "int64"
        },
        "duration": {
          "type": "number"
        },
        "policyType": {
          "type": "string"
        },
        "alertState": {
          "type": "string",
          "enum": [
            "summary",
            "object-checkpoint"
          ]
        },
        "objectId": {
          "type": "string"
        },
        "srcLat": {
          "type": "number",
          "format": "float",
          "description": "Geographic latitude of Monitored Object source"
        },
        "srcLon": {
          "type": "number",
          "format": "float",
          "description": "Geographic longitude of Monitored Object source"
        },
        "dstLat": {
          "type": "number",
          "format": "float",
          "description": "Geographic latitude of Monitored Object destination"
        },
        "dstLon": {
          "type": "number",
          "format": "float",
          "description": "Geographic longitude of Monitored Object destination"
        },
        "topology": {
          "description": "Tags used to describe the path segments associated with the Monitored Object",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "value": {
          "description": "This can either be the threshold value or a distance measure for dynamic thresholds",
          "type": "string"
        },
        "comparator": {
          "type": "string",
          "enum": [
            "gt",
            "lt",
            "eq",
            "gte",
            "lte"
          ],
          "default": "gt",
          "description": "Operand to use when evaluating the condition.\ngt  = greaterThan\nlt  = lessThan\neq  = equal\n"
        },
        "sessionId": {
          "type": "string"
        },
        "bcn": {
          "type": "string"
        },
        "bca": {
          "type": "string"
        },
        "ip": {
          "type": "string"
        },
        "captureLayer": {
          "type": "string"
        },
        "captureZone": {
          "type": "string"
        },
        "captureApplicationId": {
          "type": "string"
        },
        "captureZoneId": {
          "type": "string"
        },
        "captureMetaThresholds": {
          "type": "number"
        },
        "captureMetaValues": {
          "type": "string"
        },
        "captureMetaIps": {
          "type": "string"
        },
        "captureMetaDesc": {
          "type": "string"
        },
        "captureMetaDate_stop": {
          "type": "number"
        },
        "captureMetaDate_start": {
          "type": "number"
        },
        "captureMetaIp_client": {
          "type": "string"
        },
        "captureMetaIp_count": {
          "type": "number"
        },
        "captureMetaStart": {
          "type": "number"
        },
        "captureMetaStop": {
          "type": "number"
        },
        "captureMetaName": {
          "type": "string"
        },
        "captureMetaAlert_id": {
          "type": "number"
        },
        "captureMetaNow": {
          "type": "number"
        },
        "captureMetaFirst_sent": {
          "type": "number"
        },
        "captureMetaLast_sent": {
          "type": "number"
        },
        "captureMetaSite": {
          "type": "string"
        },
        "captureMetaWorker": {
          "type": "string"
        },
        "captureMetaFiring": {
          "type": "string"
        },
        "captureMetaCertainty": {
          "type": "number"
        },
        "captureMetaHostname": {
          "type": "string"
        },
        "captureMetaCertainty_percent": {
          "type": "number"
        }
      }
    },
    "AlertsPayloadListResponse": {
      "type": "object",
      "description": "AlertPayload response including one or more values",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AlertPayload"
          }
        }
      }
    },
    "ThresholdProfileCreateRequest": {
      "type": "object",
      "required": [
        "data"
      ],
      "description": "Object used to create a new Threshold Profile in Datahub",
      "properties": {
        "data": {
          "type": "object",
          "required": [
            "type",
            "attributes"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "thresholdProfiles"
              ]
            },
            "id": {
              "type": "string"
            },
            "attributes": {
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "type": "string"
                },
                "thresholds": {
                  "$ref": "#/definitions/ThresholdsObject"
                },
                "thresholdList": {
                  "$ref": "#/definitions/ThresholdList"
                }
              }
            }
          }
        }
      }
    },
    "ThresholdProfileUpdateRequest": {
      "type": "object",
      "required": [
        "data"
      ],
      "description": "Object used to update an existing Threshold Profile in Datahub",
      "properties": {
        "data": {
          "type": "object",
          "required": [
            "type",
            "id",
            "attributes"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "thresholdProfiles"
              ]
            },
            "id": {
              "type": "string"
            },
            "attributes": {
              "type": "object",
              "required": [
                "_rev"
              ],
              "properties": {
                "_rev": {
                  "type": "string",
                  "description": "Value used to ensure updates to this object are handled in order."
                },
                "name": {
                  "type": "string"
                },
                "thresholds": {
                  "$ref": "#/definitions/ThresholdsObject"
                },
                "thresholdList": {
                  "$ref": "#/definitions/ThresholdList"
                }
              }
            }
          }
        }
      }
    },
    "ThresholdProfileListResponse": {
      "type": "object",
      "description": "Threshold Profile response including one or more values",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ThresholdProfile"
          }
        }
      }
    },
    "ThresholdProfileResponse": {
      "type": "object",
      "description": "A single object Threshold Profile response from Datahub",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/ThresholdProfile"
        }
      }
    },
    "ThresholdProfile": {
      "type": "object",
      "required": [
        "type",
        "id",
        "attributes"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "thresholdProfiles"
          ]
        },
        "id": {
          "type": "string"
        },
        "attributes": {
          "type": "object",
          "required": [
            "tenantId",
            "_id",
            "_rev",
            "datatype",
            "name",
            "createdTimestamp",
            "lastModifiedTimestamp",
            "thresholds"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "Unique identifier of the Tenant in Datahub"
            },
            "_id": {
              "type": "string"
            },
            "_rev": {
              "type": "string",
              "description": "Value used to ensure updates to this object are handled in order."
            },
            "datatype": {
              "type": "string",
              "description": "Name used to identify this type of record in Datahub"
            },
            "name": {
              "type": "string",
              "description": "Identifying name of a Threshold Profile"
            },
            "createdTimestamp": {
              "type": "integer",
              "format": "int64",
              "description": "Time since epoch at which this object was instantiated."
            },
            "lastModifiedTimestamp": {
              "type": "integer",
              "format": "int64",
              "description": "Time since epoch at which this object was last altered."
            },
            "thresholds": {
              "$ref": "#/definitions/ThresholdsObject"
            },
            "thresholdList": {
              "$ref": "#/definitions/ThresholdList"
            }
          }
        }
      }
    },
    "ThresholdList": {
      "description": "Contains an array of objects that outline thresholds per vendor/monitoredObjectType/direction which, when crossed, will generate events",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "vendor": {
            "type": "string",
            "description": "The name of the Vendor from which this Metric originates"
          },
          "monitoredObjectType": {
            "type": "string",
            "description": "The name of the type of Monitored Object for which this Metric is applicable"
          },
          "metric": {
            "type": "string",
            "description": "The name of the Metric"
          },
          "direction": {
            "type": "string",
            "description": "Describes the direction of the test in case a Threshold needs to be different for one direction (i.e. actuator to reflector) versus another (i.e. round trip)"
          },
          "enabled": {
            "type": "string",
            "description": "When true, Threshold Crossing for this Metric will be reported. When false, Threshold Crossings for this Metric are not reported."
          },
          "dimensions": {
            "type": "object",
            "description": "Provides data properties by which the Metric may be filtered and/or aggregated"
          },
          "events": {
            "description": "A collection of objects that describe the properties of a Threshold for a Metric",
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "ThresholdsObject": {
      "type": "object",
      "properties": {
        "vendorMap": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "properties": {
              "metricMap": {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "eventAttrMap": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "monitoredObjectTypeMap": {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "metricMap": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "directionMap": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "object",
                              "properties": {
                                "eventMap": {
                                  "type": "object",
                                  "additionalProperties": {
                                    "type": "object",
                                    "properties": {
                                      "eventAttrMap": {
                                        "type": "object",
                                        "additionalProperties": {
                                          "type": "string"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "JsonApiGroupByRequest": {
      "description": "JSON API compliant wrapper for the groupby query",
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "required": [
            "type",
            "attributes"
          ],
          "properties": {
            "id": {
              "type": "string"
            },
            "type": {
              "type": "string",
              "enum": [
                "groupByMetrics"
              ]
            },
            "attributes": {
              "$ref": "#/definitions/GroupByConfig"
            }
          }
        }
      }
    },
    "JsonApiGroupByResponse": {
      "description": "JSON API compliant wrapper for the groupby response",
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "id": {
              "type": "string"
            },
            "type": {
              "type": "string",
              "enum": [
                "groupByMetrics"
              ]
            },
            "attributes": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/GroupByConfig"
                },
                {
                  "type": "object",
                  "required": [
                    "result"
                  ],
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/GroupByReport"
                    }
                  }
                }
              ]
            }
          }
        }
      }
    },
    "GroupByConfig": {
      "description": "The necessary request parameters for the metric api call",
      "type": "object",
      "required": [
        "interval",
        "aggregation",
        "groupingContext",
        "metrics"
      ],
      "properties": {
        "queryContext": {
          "$ref": "#/definitions/QueryContext"
        },
        "metaContext": {
          "$ref": "#/definitions/MetaContext"
        },
        "groupingContext": {
          "$ref": "#/definitions/GroupingContext"
        },
        "interval": {
          "description": "Time boundary for the metrics under consideration using the ISO-8601 standard",
          "type": "string",
          "example": "2018-04-08T14:00:00/2018-04-09T15:00:00"
        },
        "aggregation": {
          "$ref": "#/definitions/SupportedAggregations"
        },
        "metrics": {
          "type": "array",
          "description": "A set of identifiers that considers specific metrics based on the provided information",
          "items": {
            "$ref": "#/definitions/MetricSpec"
          }
        }
      }
    },
    "GroupByReport": {
      "description": "The rendered response structure from the metric query",
      "type": "array",
      "items": {
        "$ref": "#/definitions/GroupedResultEntryParameters"
      }
    },
    "MetaContext": {
      "description": "Elements of the query that define metadata specific components",
      "required": [
        "metadataFilters"
      ],
      "type": "object",
      "properties": {
        "metadataFilters": {
          "$ref": "#/definitions/MetaFilter"
        },
        "metaExclude": {
          "$ref": "#/definitions/MetaExclude"
        }
      }
    },
    "QueryContext": {
      "description": "Hints indicating how the query may be Returns",
      "type": "object",
      "properties": {
        "ignoreCleaning": {
          "description": "A value of true will have the aggregation request execute on all data regardless of whether it has been cleaned or not",
          "type": "boolean"
        },
        "timeout": {
          "description": "Query timeout in milliseconds",
          "type": "integer",
          "example": 30000
        },
        "sorted": {
          "type": "string",
          "description": "Indicates whether the response should return grouped by queries in ascending or descending order. Only applicable to grouped queries.",
          "enum": [
            "asc",
            "desc"
          ],
          "example": [
            "asc",
            "desc"
          ]
        },
        "numResults": {
          "description": "Number of results to return in grouped queries. A non-positive integer for this value implies there is no result limit. Only applicable to grouped queries.",
          "type": "integer",
          "format": "int32",
          "example": 10
        }
      }
    },
    "GroupingContext": {
      "description": "Defines how the results should be grouped",
      "required": [
        "groupings"
      ],
      "type": "object",
      "properties": {
        "groupings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GroupingEntity"
          }
        }
      }
    },
    "GroupingEntity": {
      "description": "Provides additional information about the entity to group by",
      "required": [
        "groupName",
        "groupType"
      ],
      "type": "object",
      "properties": {
        "groupName": {
          "type": "string"
        },
        "groupType": {
          "type": "string",
          "enum": [
            "active",
            "passive",
            "meta"
          ]
        }
      }
    },
    "GroupedResultEntryParameters": {
      "description": "Describes filtering criteria used for a particular query that uses a grouping",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/MetricSpec"
        },
        {
          "type": "object",
          "required": [
            "groupedResults"
          ],
          "properties": {
            "groupedResults": {
              "type": "array",
              "items": {
                "type": "object",
                "required": [
                  "groupings",
                  "value"
                ],
                "properties": {
                  "groupings": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "value": {
                    "type": "number",
                    "format": "float"
                  }
                }
              }
            }
          }
        }
      ]
    },
    "JsonApiAggregateV3Request": {
      "description": "JSON API compliant wrapper for the aggregate query",
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "required": [
            "type",
            "attributes"
          ],
          "properties": {
            "id": {
              "type": "string"
            },
            "type": {
              "type": "string",
              "enum": [
                "aggregates"
              ]
            },
            "attributes": {
              "$ref": "#/definitions/AggregateV3Config"
            }
          }
        }
      }
    },
    "JsonApiAggregateV3Response": {
      "description": "JSON API compliant wrapper for the aggregate response",
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "id": {
              "type": "string"
            },
            "type": {
              "type": "string",
              "enum": [
                "aggregates"
              ]
            },
            "attributes": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/AggregateV3Config"
                },
                {
                  "type": "object",
                  "required": [
                    "result"
                  ],
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/AggregateV3Report"
                    }
                  }
                }
              ]
            }
          }
        }
      }
    },
    "AggregateV3Config": {
      "description": "The necessary request parameters for the metric api call",
      "type": "object",
      "required": [
        "interval",
        "granularity",
        "aggregation",
        "metrics"
      ],
      "properties": {
        "queryContext": {
          "$ref": "#/definitions/QueryContext"
        },
        "metaContext": {
          "$ref": "#/definitions/MetaContext"
        },
        "interval": {
          "description": "Time boundary for the metrics under consideration using the ISO-8601 standard",
          "type": "string",
          "example": "2018-04-08T14:00:00/2018-04-09T15:00:00"
        },
        "granularity": {
          "description": "the granularity for timeseries in ISO-8601 duration format, or ALL",
          "type": "string",
          "example": "PT1H"
        },
        "aggregation": {
          "$ref": "#/definitions/SupportedAggregations"
        },
        "metrics": {
          "type": "array",
          "description": "A set of identifiers that considers specific metrics based on the provided information",
          "items": {
            "$ref": "#/definitions/MetricSpec"
          }
        }
      }
    },
    "AggregateV3Report": {
      "description": "The rendered response structure from the metric query",
      "type": "array",
      "items": {
        "$ref": "#/definitions/MetricTimeseriesResult"
      }
    },
    "MetricTimeseriesResult": {
      "description": "Describes series data prefixed with the filter criteria that were used to generate the output",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/MetricSpec"
        },
        {
          "type": "object",
          "required": [
            "series"
          ],
          "properties": {
            "series": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MetricTimeseriesResultEntry"
              }
            }
          }
        }
      ]
    },
    "MetricTimeseriesResultEntry": {
      "description": "A singular time series entry that contains the timestamp and value",
      "type": "object",
      "required": [
        "timestamp",
        "value"
      ],
      "properties": {
        "timestamp": {
          "type": "string"
        },
        "value": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "gathergrpcJSONAPIObject": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/gathergrpcData"
          }
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/gathergrpcError"
          }
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "jsonapi": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "links": {
          "$ref": "#/definitions/gathergrpcLinks"
        },
        "included": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/gathergrpcResource"
          }
        }
      }
    },
    "gathergrpcLinks": {
      "type": "object",
      "properties": {
        "related": {
          "$ref": "#/definitions/LinksRelated"
        },
        "self": {
          "type": "string"
        },
        "first": {
          "type": "string"
        },
        "next": {
          "type": "string"
        },
        "prev": {
          "type": "string"
        },
        "last": {
          "type": "string"
        },
        "about": {
          "type": "string"
        },
        "article": {
          "type": "string"
        }
      },
      "description": "Links technically allow any valid json string as a key,\nwe obviously can't do this, so we have to stick to the following."
    },
    "LinksRelated": {
      "type": "object",
      "properties": {
        "href": {
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "gathergrpcResource": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "attributes": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "links": {
          "$ref": "#/definitions/gathergrpcLinks"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "relationships": {
          "$ref": "#/definitions/gathergrpcRelationships"
        }
      }
    },
    "gathergrpcRelationships": {
      "type": "object",
      "properties": {
        "links": {
          "$ref": "#/definitions/gathergrpcLinks"
        },
        "data": {
          "$ref": "#/definitions/protobufAny"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string",
          "description": "A URL/resource name whose content describes the type of the\nserialized protocol buffer message.\n\nFor URLs which use the scheme `http`, `https`, or no scheme, the\nfollowing restrictions and interpretations apply:\n\n* If no scheme is provided, `https` is assumed.\n* The last segment of the URL's path must represent the fully\n  qualified name of the type (as in `path/google.protobuf.Duration`).\n  The name should be in a canonical form (e.g., leading \".\" is\n  not accepted).\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation et semantics."
        },
        "value": {
          "type": "string",
          "format": "byte",
          "description": "Must be a valid serialized protocol buffer of the above specified type."
        }
      },
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n     ...\n     foo := &pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "gathergrpcData": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/protobufAny"
        }
      }
    },
    "gathergrpcError": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "links": {
          "$ref": "#/definitions/gathergrpcLinks"
        },
        "status": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "detail": {
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "source": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "gathergrpcJSONAPIObjectList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/gathergrpcJSONAPIObject"
          }
        }
      }
    },
    "SLAReportRequestObject": {
      "type": "object",
      "required": [
        "tenantId",
        "interval"
      ],
      "properties": {
        "tenantId": {
          "type": "string",
          "description": "the tenant identifier",
          "example": "8501f157-b7f5-41c3-aaba-c75e0566c54c"
        },
        "interval": {
          "type": "string",
          "description": "ISO-8601 interval",
          "example": "2018-04-08T14:00:00/2018-04-09T15:00:00"
        },
        "meta": {
          "type": "object",
          "description": "set of domains identifiers to use for filtering",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "thresholdProfileId": {
          "type": "string",
          "description": "ID of the threshold profile that is used to select metrics and events",
          "example": "d1988d68-7444-4098-91eb-bd5a987397cb"
        },
        "granularity": {
          "type": "string",
          "description": "the granularity for timeseries in ISO-8601 duration format, or ALL",
          "example": "PT1H"
        },
        "timeout": {
          "type": "integer",
          "description": "query timeout in milliseconds",
          "example": 30000
        },
        "timezone": {
          "type": "string",
          "description": "timezone used for time-based buckets (e.g. hour of day buckets) see http://joda-time.sourceforge.net/timezones.html"
        }
      }
    },
    "ReportScheduleConfigCreateRequest": {
      "type": "object",
      "required": [
        "data"
      ],
      "description": "Object used to create a new Report Generation Schedule in Datahub",
      "properties": {
        "data": {
          "type": "object",
          "required": [
            "type",
            "attributes"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "reportScheduleConfigs"
              ]
            },
            "id": {
              "type": "string"
            },
            "relationships": {
              "$ref": "#/definitions/ReportScheduleConfigRelationships"
            },
            "attributes": {
              "type": "object",
              "required": [
                "relationships",
                "name"
              ],
              "properties": {
                "timeRangeDuration": {
                  "type": "string",
                  "description": "Period of time for which the report will be generated"
                },
                "thresholdProfile": {
                  "type": "string",
                  "description": "The unique identifier of the Threshold Profile used to generate the report"
                },
                "granularity": {
                  "type": "string",
                  "description": "Time period for which individual results should be aggregated"
                },
                "timeout": {
                  "type": "integer",
                  "description": "Amount if time, in ms, before which the request to generate the report should be cancelled, must be > 450000ms."
                },
                "timezone": {
                  "type": "string",
                  "description": "Timezone used to display the results in the generated report"
                },
                "name": {
                  "type": "string",
                  "description": "Identifying name for the report to be generated"
                },
                "reportType": {
                  "type": "string",
                  "description": "The type of report this config will generate"
                },
                "minute": {
                  "type": "string",
                  "description": "Recurring minute when this report should be generated"
                },
                "hour": {
                  "type": "string",
                  "description": "Recurring hour when this report should be generated"
                },
                "dayMonth": {
                  "type": "string",
                  "description": "Recurring day of the month when this report should be generated"
                },
                "month": {
                  "type": "string",
                  "description": "Recurring month when this report should be generated"
                },
                "dayWeek": {
                  "type": "string",
                  "description": "Recurring day of the week when this report should be generated"
                },
                "active": {
                  "type": "boolean",
                  "description": "When true, the report will be generated. When false, the report will not be generated"
                },
                "meta": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "ReportScheduleConfigUpdateRequest": {
      "type": "object",
      "required": [
        "data"
      ],
      "description": "Object used to update an existing Report Genaration Schedule in Datahub",
      "properties": {
        "data": {
          "type": "object",
          "required": [
            "type",
            "id",
            "attributes"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "reportScheduleConfigs"
              ]
            },
            "id": {
              "type": "string"
            },
            "relationships": {
              "$ref": "#/definitions/ReportScheduleConfigRelationships"
            },
            "attributes": {
              "type": "object",
              "required": [
                "_rev"
              ],
              "properties": {
                "_rev": {
                  "type": "string",
                  "description": "Value used to ensure updates to this object are handled in order."
                },
                "timeRangeDuration": {
                  "type": "string",
                  "description": "Period of time for which the report will be generated"
                },
                "granularity": {
                  "type": "string",
                  "description": "Time period for which individual results should be aggregated"
                },
                "timeout": {
                  "type": "integer",
                  "description": "Amount if time, in ms, before which the request to generate the report should be cancelled"
                },
                "timezone": {
                  "type": "string",
                  "description": "Timezone used to display the results in the generated report"
                },
                "name": {
                  "type": "string",
                  "description": "Identifying name for the report to be generated"
                },
                "reportType": {
                  "type": "string",
                  "description": "The type of report this config will generate"
                },
                "minute": {
                  "type": "string",
                  "description": "Recurring minute when this report should be generated"
                },
                "hour": {
                  "type": "string",
                  "description": "Recurring hour when this report should be generated"
                },
                "dayMonth": {
                  "type": "string",
                  "description": "Recurring day of the month when this report should be generated"
                },
                "month": {
                  "type": "string",
                  "description": "Recurring month when this report should be generated"
                },
                "dayWeek": {
                  "type": "string",
                  "description": "Recurring day of the week when this report should be generated"
                },
                "active": {
                  "type": "boolean",
                  "description": "When true, the report will be generated. When false, the report will not be generated"
                },
                "meta": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "ReportScheduleConfigResponse": {
      "type": "object",
      "description": "A single object Report Schedule Configuration response from Datahub",
      "properties": {
        "data": {
          "$ref": "#/definitions/ReportScheduleConfig"
        }
      }
    },
    "ReportScheduleConfigListResponse": {
      "type": "object",
      "description": "Report Schedule Configuration response including one or more values",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReportScheduleConfig"
          }
        }
      }
    },
    "ReportScheduleConfig": {
      "type": "object",
      "required": [
        "type",
        "id",
        "attributes"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "reportScheduleConfigs"
          ]
        },
        "id": {
          "type": "string"
        },
        "relationships": {
          "$ref": "#/definitions/ReportScheduleConfigRelationships"
        },
        "attributes": {
          "type": "object",
          "required": [
            "_rev",
            "datatype",
            "tenantId",
            "timeRangeDuration",
            "granularity",
            "timeout",
            "timezone",
            "name",
            "reportType",
            "minute",
            "hour",
            "dayMonth",
            "month",
            "dayWeek",
            "active",
            "meta",
            "createdTimestamp",
            "lastModifiedTimestamp"
          ],
          "properties": {
            "_rev": {
              "type": "string",
              "description": "Value used to ensure updates to this object are handled in order."
            },
            "datatype": {
              "type": "string",
              "description": "Name used to identify this type of record in Datahub"
            },
            "tenantId": {
              "type": "string",
              "description": "Unique identifier of the Tenant in Datahub"
            },
            "timeRangeDuration": {
              "type": "string",
              "description": "Period of time for which the report will be generated"
            },
            "granularity": {
              "type": "string",
              "description": "Time period for which individual results should be aggregated"
            },
            "timeout": {
              "type": "integer",
              "description": "Amount if time, in ms, before which the request to generate the report should be cancelled"
            },
            "timezone": {
              "type": "string",
              "description": "Timezone used to display the results in the generated report"
            },
            "name": {
              "type": "string",
              "description": "Identifying name for the report to be generated"
            },
            "reportType": {
              "type": "string",
              "description": "The type of report this config will generate"
            },
            "minute": {
              "type": "string",
              "description": "Recurring minute when this report should be generated"
            },
            "hour": {
              "type": "string",
              "description": "Recurring hour when this report should be generated"
            },
            "dayMonth": {
              "type": "string",
              "description": "Recurring day of the month when this report should be generated"
            },
            "month": {
              "type": "string",
              "description": "Recurring month when this report should be generated"
            },
            "dayWeek": {
              "type": "string",
              "description": "Recurring day of the week when this report should be generated"
            },
            "active": {
              "type": "boolean",
              "description": "When true, the report will be generated. When false, the report will not be generated"
            },
            "meta": {
              "type": "object",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "createdTimestamp": {
              "type": "integer",
              "format": "int64",
              "description": "Time since epoch at which this object was instantiated."
            },
            "lastModifiedTimestamp": {
              "type": "integer",
              "format": "int64",
              "description": "Time since epoch at which this object was last altered."
            }
          }
        }
      }
    },
    "ReportScheduleConfigRelationships": {
      "type": "object",
      "required": [
        "thresholdProfile"
      ],
      "properties": {
        "thresholdProfile": {
          "$ref": "#/definitions/JsonApiSingleRelationship"
        }
      }
    }
  }
}
